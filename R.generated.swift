//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var auth: auth { .init(source: .init(bundle: bundle, tableName: "Auth", preferredLanguages: preferredLanguages, locale: locale)) }
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func auth(preferredLanguages: [String]) -> auth {
      .init(source: .init(bundle: bundle, tableName: "Auth", preferredLanguages: preferredLanguages, locale: locale))
    }
    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.auth` struct is generated, and contains static references to 319 localization keys.
    struct auth {
      let source: RswiftResources.StringResource.Source

      /// en translation: APPLY FILTER
      ///
      /// Key: APPLY FILTER
      ///
      /// Locales: en
      var applyfilteR: RswiftResources.StringResource { .init(key: "APPLY FILTER", tableName: "Auth", source: source, developmentValue: "APPLY FILTER", comment: nil) }

      /// en translation: About
      ///
      /// Key: About
      ///
      /// Locales: en
      var about: RswiftResources.StringResource { .init(key: "About", tableName: "Auth", source: source, developmentValue: "About", comment: nil) }

      /// en translation: About you
      ///
      /// Key: About you
      ///
      /// Locales: en
      var aboutYou: RswiftResources.StringResource { .init(key: "About you", tableName: "Auth", source: source, developmentValue: "About you", comment: nil) }

      /// en translation: Account Privacy
      ///
      /// Key: Account Privacy
      ///
      /// Locales: en
      var accountPrivacy: RswiftResources.StringResource { .init(key: "Account Privacy", tableName: "Auth", source: source, developmentValue: "Account Privacy", comment: nil) }

      /// en translation: Account and Profile
      ///
      /// Key: Account and Profile
      ///
      /// Locales: en
      var accountAndProfile: RswiftResources.StringResource { .init(key: "Account and Profile", tableName: "Auth", source: source, developmentValue: "Account and Profile", comment: nil) }

      /// en translation: Add
      ///
      /// Key: Add
      ///
      /// Locales: en
      var add: RswiftResources.StringResource { .init(key: "Add", tableName: "Auth", source: source, developmentValue: "Add", comment: nil) }

      /// en translation: Add Participants
      ///
      /// Key: Add Participants
      ///
      /// Locales: en
      var addParticipants: RswiftResources.StringResource { .init(key: "Add Participants", tableName: "Auth", source: source, developmentValue: "Add Participants", comment: nil) }

      /// en translation: Add Story
      ///
      /// Key: Add Story
      ///
      /// Locales: en
      var addStory: RswiftResources.StringResource { .init(key: "Add Story", tableName: "Auth", source: source, developmentValue: "Add Story", comment: nil) }

      /// en translation: Add new Story
      ///
      /// Key: Add new Story
      ///
      /// Locales: en
      var addNewStory: RswiftResources.StringResource { .init(key: "Add new Story", tableName: "Auth", source: source, developmentValue: "Add new Story", comment: nil) }

      /// en translation: Add post caption. #hashtag..@mentioned?
      ///
      /// Key: Add post caption. #hashtag..@mentioned?
      ///
      /// Locales: en
      var addPostCaptionHashtagMentioned: RswiftResources.StringResource { .init(key: "Add post caption. #hashtag..@mentioned?", tableName: "Auth", source: source, developmentValue: "Add post caption. #hashtag..@mentioned?", comment: nil) }

      /// en translation: Add to Post
      ///
      /// Key: Add to Post
      ///
      /// Locales: en
      var addToPost: RswiftResources.StringResource { .init(key: "Add to Post", tableName: "Auth", source: source, developmentValue: "Add to Post", comment: nil) }

      /// en translation: AddFriend
      ///
      /// Key: AddFriend
      ///
      /// Locales: en
      var addFriend: RswiftResources.StringResource { .init(key: "AddFriend", tableName: "Auth", source: source, developmentValue: "AddFriend", comment: nil) }

      /// en translation: Amount
      ///
      /// Key: Amount
      ///
      /// Locales: en
      var amount: RswiftResources.StringResource { .init(key: "Amount", tableName: "Auth", source: source, developmentValue: "Amount", comment: nil) }

      /// en translation: Answer
      ///
      /// Key: Answer
      ///
      /// Locales: en
      var answer: RswiftResources.StringResource { .init(key: "Answer", tableName: "Auth", source: source, developmentValue: "Answer", comment: nil) }

      /// en translation: Pixel Photo
      ///
      /// Key: App Name
      ///
      /// Locales: en
      var appName: RswiftResources.StringResource { .init(key: "App Name", tableName: "Auth", source: source, developmentValue: "Pixel Photo", comment: nil) }

      /// en translation: Application will close to change the language
      ///
      /// Key: Application will close to change the language
      ///
      /// Locales: en
      var applicationWillCloseToChangeTheLanguage: RswiftResources.StringResource { .init(key: "Application will close to change the language", tableName: "Auth", source: source, developmentValue: "Application will close to change the language", comment: nil) }

      /// en translation: Apply Filter
      ///
      /// Key: Apply Filter
      ///
      /// Locales: en
      var applyFilter: RswiftResources.StringResource { .init(key: "Apply Filter", tableName: "Auth", source: source, developmentValue: "Apply Filter", comment: nil) }

      /// en translation: Are you sure want to delete this post
      ///
      /// Key: Are you sure want to delete this post
      ///
      /// Locales: en
      var areYouSureWantToDeleteThisPost: RswiftResources.StringResource { .init(key: "Are you sure want to delete this post", tableName: "Auth", source: source, developmentValue: "Are you sure want to delete this post", comment: nil) }

      /// en translation: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Key: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Locales: en
      var areYouSureYouWantToDeleteTheAccountFromWoWonderMessenger: RswiftResources.StringResource { .init(key: "Are you sure you want to delete the account from WoWonder Messenger", tableName: "Auth", source: source, developmentValue: "Are you sure you want to delete the account from WoWonder Messenger", comment: nil) }

      /// en translation: Are you sure you want to logout?
      ///
      /// Key: Are you sure you want to logout?
      ///
      /// Locales: en
      var areYouSureYouWantToLogout: RswiftResources.StringResource { .init(key: "Are you sure you want to logout?", tableName: "Auth", source: source, developmentValue: "Are you sure you want to logout?", comment: nil) }

      /// en translation: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Key: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Locales: en
      var byregisteringyouagreetoouR: RswiftResources.StringResource { .init(key: "BY REGISTERING YOU AGREE TO OUR", tableName: "Auth", source: source, developmentValue: "BY REGISTERING YOU AGREE TO OUR", comment: nil) }

      /// en translation: Block
      ///
      /// Key: Block
      ///
      /// Locales: en
      var block: RswiftResources.StringResource { .init(key: "Block", tableName: "Auth", source: source, developmentValue: "Block", comment: nil) }

      /// en translation: Block User
      ///
      /// Key: Block User
      ///
      /// Locales: en
      var blockUser: RswiftResources.StringResource { .init(key: "Block User", tableName: "Auth", source: source, developmentValue: "Block User", comment: nil) }

      /// en translation: Block Users
      ///
      /// Key: Block Users
      ///
      /// Locales: en
      var blockUsers: RswiftResources.StringResource { .init(key: "Block Users", tableName: "Auth", source: source, developmentValue: "Block Users", comment: nil) }

      /// en translation: Blocked User
      ///
      /// Key: Blocked User
      ///
      /// Locales: en
      var blockedUser: RswiftResources.StringResource { .init(key: "Blocked User", tableName: "Auth", source: source, developmentValue: "Blocked User", comment: nil) }

      /// en translation: Blocked Users
      ///
      /// Key: Blocked Users
      ///
      /// Locales: en
      var blockedUsers: RswiftResources.StringResource { .init(key: "Blocked Users", tableName: "Auth", source: source, developmentValue: "Blocked Users", comment: nil) }

      /// en translation: Business Account
      ///
      /// Key: Business Account
      ///
      /// Locales: en
      var businessAccount: RswiftResources.StringResource { .init(key: "Business Account", tableName: "Auth", source: source, developmentValue: "Business Account", comment: nil) }

      /// en translation: Business Name
      ///
      /// Key: Business Name
      ///
      /// Locales: en
      var businessName: RswiftResources.StringResource { .init(key: "Business Name", tableName: "Auth", source: source, developmentValue: "Business Name", comment: nil) }

      /// en translation: Buy
      ///
      /// Key: Buy
      ///
      /// Locales: en
      var buy: RswiftResources.StringResource { .init(key: "Buy", tableName: "Auth", source: source, developmentValue: "Buy", comment: nil) }

      /// en translation: By registering you agree to our terms of service
      ///
      /// Key: By registering you agree to our terms of service
      ///
      /// Locales: en
      var byRegisteringYouAgreeToOurTermsOfService: RswiftResources.StringResource { .init(key: "By registering you agree to our terms of service", tableName: "Auth", source: source, developmentValue: "By registering you agree to our terms of service", comment: nil) }

      /// en translation: CANCEL
      ///
      /// Key: CANCEL
      ///
      /// Locales: en
      var canceL: RswiftResources.StringResource { .init(key: "CANCEL", tableName: "Auth", source: source, developmentValue: "CANCEL", comment: nil) }

      /// en translation: CREATE AN ACCOUNT
      ///
      /// Key: CREATE AN ACCOUNT
      ///
      /// Locales: en
      var createanaccounT: RswiftResources.StringResource { .init(key: "CREATE AN ACCOUNT", tableName: "Auth", source: source, developmentValue: "CREATE AN ACCOUNT", comment: nil) }

      /// en translation: Call Logs Cleared
      ///
      /// Key: Call Logs Cleared
      ///
      /// Locales: en
      var callLogsCleared: RswiftResources.StringResource { .init(key: "Call Logs Cleared", tableName: "Auth", source: source, developmentValue: "Call Logs Cleared", comment: nil) }

      /// en translation: Calling
      ///
      /// Key: Calling
      ///
      /// Locales: en
      var calling: RswiftResources.StringResource { .init(key: "Calling", tableName: "Auth", source: source, developmentValue: "Calling", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: Camera
      ///
      /// Locales: en
      var camera: RswiftResources.StringResource { .init(key: "Camera", tableName: "Auth", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: en
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Auth", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Category
      ///
      /// Key: Category
      ///
      /// Locales: en
      var category: RswiftResources.StringResource { .init(key: "Category", tableName: "Auth", source: source, developmentValue: "Category", comment: nil) }

      /// en translation: Change Password
      ///
      /// Key: Change Password
      ///
      /// Locales: en
      var changePassword: RswiftResources.StringResource { .init(key: "Change Password", tableName: "Auth", source: source, developmentValue: "Change Password", comment: nil) }

      /// en translation: Change your password
      ///
      /// Key: Change your password
      ///
      /// Locales: en
      var changeYourPassword: RswiftResources.StringResource { .init(key: "Change your password", tableName: "Auth", source: source, developmentValue: "Change your password", comment: nil) }

      /// en translation: Chats
      ///
      /// Key: Chats
      ///
      /// Locales: en
      var chats: RswiftResources.StringResource { .init(key: "Chats", tableName: "Auth", source: source, developmentValue: "Chats", comment: nil) }

      /// en translation: Please , confirm checkbox to process this action
      ///
      /// Key: Check Delete
      ///
      /// Locales: en
      var checkDelete: RswiftResources.StringResource { .init(key: "Check Delete", tableName: "Auth", source: source, developmentValue: "Please , confirm checkbox to process this action", comment: nil) }

      /// en translation: Chose Image
      ///
      /// Key: Chose image
      ///
      /// Locales: en
      var choseImage: RswiftResources.StringResource { .init(key: "Chose image", tableName: "Auth", source: source, developmentValue: "Chose Image", comment: nil) }

      /// en translation: Clear Chat
      ///
      /// Key: Clear Chat
      ///
      /// Locales: en
      var clearChat: RswiftResources.StringResource { .init(key: "Clear Chat", tableName: "Auth", source: source, developmentValue: "Clear Chat", comment: nil) }

      /// en translation: Close
      ///
      /// Key: Close
      ///
      /// Locales: en
      var close: RswiftResources.StringResource { .init(key: "Close", tableName: "Auth", source: source, developmentValue: "Close", comment: nil) }

      /// en translation: Comment
      ///
      /// Key: Comment
      ///
      /// Locales: en
      var comment: RswiftResources.StringResource { .init(key: "Comment", tableName: "Auth", source: source, developmentValue: "Comment", comment: nil) }

      /// en translation: Commented on my post
      ///
      /// Key: Commented on my post
      ///
      /// Locales: en
      var commentedOnMyPost: RswiftResources.StringResource { .init(key: "Commented on my post", tableName: "Auth", source: source, developmentValue: "Commented on my post", comment: nil) }

      /// en translation: Comments
      ///
      /// Key: Comments
      ///
      /// Locales: en
      var comments: RswiftResources.StringResource { .init(key: "Comments", tableName: "Auth", source: source, developmentValue: "Comments", comment: nil) }

      /// en translation: Confirm Password
      ///
      /// Key: Confirm Password
      ///
      /// Locales: en
      var confirmPassword: RswiftResources.StringResource { .init(key: "Confirm Password", tableName: "Auth", source: source, developmentValue: "Confirm Password", comment: nil) }

      /// en translation: Continue with Facebook
      ///
      /// Key: Continue with Facebook
      ///
      /// Locales: en
      var continueWithFacebook: RswiftResources.StringResource { .init(key: "Continue with Facebook", tableName: "Auth", source: source, developmentValue: "Continue with Facebook", comment: nil) }

      /// en translation: Conversation Tones
      ///
      /// Key: Conversation Tones
      ///
      /// Locales: en
      var conversationTones: RswiftResources.StringResource { .init(key: "Conversation Tones", tableName: "Auth", source: source, developmentValue: "Conversation Tones", comment: nil) }

      /// en translation: Copied
      ///
      /// Key: Copied
      ///
      /// Locales: en
      var copied: RswiftResources.StringResource { .init(key: "Copied", tableName: "Auth", source: source, developmentValue: "Copied", comment: nil) }

      /// en translation: Copy
      ///
      /// Key: Copy
      ///
      /// Locales: en
      var copy: RswiftResources.StringResource { .init(key: "Copy", tableName: "Auth", source: source, developmentValue: "Copy", comment: nil) }

      /// en translation: Copy Link to profile
      ///
      /// Key: Copy Link to profile
      ///
      /// Locales: en
      var copyLinkToProfile: RswiftResources.StringResource { .init(key: "Copy Link to profile", tableName: "Auth", source: source, developmentValue: "Copy Link to profile", comment: nil) }

      /// en translation: Create
      ///
      /// Key: Create
      ///
      /// Locales: en
      var create: RswiftResources.StringResource { .init(key: "Create", tableName: "Auth", source: source, developmentValue: "Create", comment: nil) }

      /// en translation: Current Password
      ///
      /// Key: Current Password
      ///
      /// Locales: en
      var currentPassword: RswiftResources.StringResource { .init(key: "Current Password", tableName: "Auth", source: source, developmentValue: "Current Password", comment: nil) }

      /// en translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Key: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: en
      var donthaveanaccounT: RswiftResources.StringResource { .init(key: "DON'T HAVE AN ACCOUNT?", tableName: "Auth", source: source, developmentValue: "DON'T HAVE AN ACCOUNT?", comment: nil) }

      /// en translation: Dark mode
      ///
      /// Key: Dark mode
      ///
      /// Locales: en
      var darkMode: RswiftResources.StringResource { .init(key: "Dark mode", tableName: "Auth", source: source, developmentValue: "Dark mode", comment: nil) }

      /// en translation: Decline
      ///
      /// Key: Decline
      ///
      /// Locales: en
      var decline: RswiftResources.StringResource { .init(key: "Decline", tableName: "Auth", source: source, developmentValue: "Decline", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: Delete
      ///
      /// Locales: en
      var delete: RswiftResources.StringResource { .init(key: "Delete", tableName: "Auth", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Delete Account
      ///
      /// Key: Delete Account
      ///
      /// Locales: en
      var deleteAccount: RswiftResources.StringResource { .init(key: "Delete Account", tableName: "Auth", source: source, developmentValue: "Delete Account", comment: nil) }

      /// en translation: Delete Group
      ///
      /// Key: Delete Group
      ///
      /// Locales: en
      var deleteGroup: RswiftResources.StringResource { .init(key: "Delete Group", tableName: "Auth", source: source, developmentValue: "Delete Group", comment: nil) }

      /// en translation: Delete Post
      ///
      /// Key: Delete Post
      ///
      /// Locales: en
      var deletePost: RswiftResources.StringResource { .init(key: "Delete Post", tableName: "Auth", source: source, developmentValue: "Delete Post", comment: nil) }

      /// en translation: Delete This Post
      ///
      /// Key: Delete This Post
      ///
      /// Locales: en
      var deleteThisPost: RswiftResources.StringResource { .init(key: "Delete This Post", tableName: "Auth", source: source, developmentValue: "Delete This Post", comment: nil) }

      /// en translation: Share images, video, link, Gifs and Stories with who you love and create popular hashtag
      ///
      /// Key: Desc1
      ///
      /// Locales: en
      var desc1: RswiftResources.StringResource { .init(key: "Desc1", tableName: "Auth", source: source, developmentValue: "Share images, video, link, Gifs and Stories with who you love and create popular hashtag", comment: nil) }

      /// en translation: Just like the photos wich you found interesting and become a follower of fampus people
      ///
      /// Key: Desc2
      ///
      /// Locales: en
      var desc2: RswiftResources.StringResource { .init(key: "Desc2", tableName: "Auth", source: source, developmentValue: "Just like the photos wich you found interesting and become a follower of fampus people", comment: nil) }

      /// en translation: Immediately save images or video to check them later anytime and in every place
      ///
      /// Key: Desc3
      ///
      /// Locales: en
      var desc3: RswiftResources.StringResource { .init(key: "Desc3", tableName: "Auth", source: source, developmentValue: "Immediately save images or video to check them later anytime and in every place", comment: nil) }

      /// en translation: Disable
      ///
      /// Key: Disable
      ///
      /// Locales: en
      var disable: RswiftResources.StringResource { .init(key: "Disable", tableName: "Auth", source: source, developmentValue: "Disable", comment: nil) }

      /// en translation: Display
      ///
      /// Key: Display
      ///
      /// Locales: en
      var display: RswiftResources.StringResource { .init(key: "Display", tableName: "Auth", source: source, developmentValue: "Display", comment: nil) }

      /// en translation: Display your app language
      ///
      /// Key: Display your app language
      ///
      /// Locales: en
      var displayYourAppLanguage: RswiftResources.StringResource { .init(key: "Display your app language", tableName: "Auth", source: source, developmentValue: "Display your app language", comment: nil) }

      /// en translation: Downloads
      ///
      /// Key: Downloads
      ///
      /// Locales: en
      var downloads: RswiftResources.StringResource { .init(key: "Downloads", tableName: "Auth", source: source, developmentValue: "Downloads", comment: nil) }

      /// en translation: Earn upto $0.10 for each user your refer to us!
      ///
      /// Key: Earn upto $0.10 for each user your refer to us!
      ///
      /// Locales: en
      var earnUpto010ForEachUserYourReferToUs: RswiftResources.StringResource { .init(key: "Earn upto $0.10 for each user your refer to us!", tableName: "Auth", source: source, developmentValue: "Earn upto $0.10 for each user your refer to us!", comment: nil) }

      /// en translation: Edit Post
      ///
      /// Key: Edit Post
      ///
      /// Locales: en
      var editPost: RswiftResources.StringResource { .init(key: "Edit Post", tableName: "Auth", source: source, developmentValue: "Edit Post", comment: nil) }

      /// en translation: Edit Profile
      ///
      /// Key: Edit Profile
      ///
      /// Locales: en
      var editProfile: RswiftResources.StringResource { .init(key: "Edit Profile", tableName: "Auth", source: source, developmentValue: "Edit Profile", comment: nil) }

      /// en translation: Edit Profile and avatar
      ///
      /// Key: Edit Profile and avatar
      ///
      /// Locales: en
      var editProfileAndAvatar: RswiftResources.StringResource { .init(key: "Edit Profile and avatar", tableName: "Auth", source: source, developmentValue: "Edit Profile and avatar", comment: nil) }

      /// en translation: Email
      ///
      /// Key: Email
      ///
      /// Locales: en
      var email: RswiftResources.StringResource { .init(key: "Email", tableName: "Auth", source: source, developmentValue: "Email", comment: nil) }

      /// en translation: Email is badly formatted.
      ///
      /// Key: Email is badly formatted.
      ///
      /// Locales: en
      var emailIsBadlyFormatted: RswiftResources.StringResource { .init(key: "Email is badly formatted.", tableName: "Auth", source: source, developmentValue: "Email is badly formatted.", comment: nil) }

      /// en translation: Email o username
      ///
      /// Key: Email or Username
      ///
      /// Locales: en
      var emailOrUsername: RswiftResources.StringResource { .init(key: "Email or Username", tableName: "Auth", source: source, developmentValue: "Email o username", comment: nil) }

      /// en translation: Embed Video
      ///
      /// Key: Embed Video
      ///
      /// Locales: en
      var embedVideo: RswiftResources.StringResource { .init(key: "Embed Video", tableName: "Auth", source: source, developmentValue: "Embed Video", comment: nil) }

      /// en translation: Enable
      ///
      /// Key: Enable
      ///
      /// Locales: en
      var enable: RswiftResources.StringResource { .init(key: "Enable", tableName: "Auth", source: source, developmentValue: "Enable", comment: nil) }

      /// en translation: Enter BusinessName
      ///
      /// Key: Enter BusinessName
      ///
      /// Locales: en
      var enterBusinessName: RswiftResources.StringResource { .init(key: "Enter BusinessName", tableName: "Auth", source: source, developmentValue: "Enter BusinessName", comment: nil) }

      /// en translation: Enter Category name
      ///
      /// Key: Enter Category name
      ///
      /// Locales: en
      var enterCategoryName: RswiftResources.StringResource { .init(key: "Enter Category name", tableName: "Auth", source: source, developmentValue: "Enter Category name", comment: nil) }

      /// en translation: Enter Email
      ///
      /// Key: Enter Email
      ///
      /// Locales: en
      var enterEmail: RswiftResources.StringResource { .init(key: "Enter Email", tableName: "Auth", source: source, developmentValue: "Enter Email", comment: nil) }

      /// en translation: Enter License name
      ///
      /// Key: Enter License name
      ///
      /// Locales: en
      var enterLicenseName: RswiftResources.StringResource { .init(key: "Enter License name", tableName: "Auth", source: source, developmentValue: "Enter License name", comment: nil) }

      /// en translation: Enter Name
      ///
      /// Key: Enter Name
      ///
      /// Locales: en
      var enterName: RswiftResources.StringResource { .init(key: "Enter Name", tableName: "Auth", source: source, developmentValue: "Enter Name", comment: nil) }

      /// en translation: Enter PhoneNumber
      ///
      /// Key: Enter PhoneNumber
      ///
      /// Locales: en
      var enterPhoneNumber: RswiftResources.StringResource { .init(key: "Enter PhoneNumber", tableName: "Auth", source: source, developmentValue: "Enter PhoneNumber", comment: nil) }

      /// en translation: Enter Price
      ///
      /// Key: Enter Price
      ///
      /// Locales: en
      var enterPrice: RswiftResources.StringResource { .init(key: "Enter Price", tableName: "Auth", source: source, developmentValue: "Enter Price", comment: nil) }

      /// en translation: Enter Tag
      ///
      /// Key: Enter Tag
      ///
      /// Locales: en
      var enterTag: RswiftResources.StringResource { .init(key: "Enter Tag", tableName: "Auth", source: source, developmentValue: "Enter Tag", comment: nil) }

      /// en translation: Enter Title
      ///
      /// Key: Enter Title
      ///
      /// Locales: en
      var enterTitle: RswiftResources.StringResource { .init(key: "Enter Title", tableName: "Auth", source: source, developmentValue: "Enter Title", comment: nil) }

      /// en translation: Enter Website
      ///
      /// Key: Enter Website
      ///
      /// Locales: en
      var enterWebsite: RswiftResources.StringResource { .init(key: "Enter Website", tableName: "Auth", source: source, developmentValue: "Enter Website", comment: nil) }

      /// en translation: Enter Your Information!
      ///
      /// Key: Enter Your Information!
      ///
      /// Locales: en
      var enterYourInformation: RswiftResources.StringResource { .init(key: "Enter Your Information!", tableName: "Auth", source: source, developmentValue: "Enter Your Information!", comment: nil) }

      /// en translation: Enter message
      ///
      /// Key: Enter message
      ///
      /// Locales: en
      var enterMessage: RswiftResources.StringResource { .init(key: "Enter message", tableName: "Auth", source: source, developmentValue: "Enter message", comment: nil) }

      /// en translation: Exit Group
      ///
      /// Key: Exit Group
      ///
      /// Locales: en
      var exitGroup: RswiftResources.StringResource { .init(key: "Exit Group", tableName: "Auth", source: source, developmentValue: "Exit Group", comment: nil) }

      /// en translation: Explore
      ///
      /// Key: Explore
      ///
      /// Locales: en
      var explore: RswiftResources.StringResource { .init(key: "Explore", tableName: "Auth", source: source, developmentValue: "Explore", comment: nil) }

      /// en translation: Explore Posts
      ///
      /// Key: Explore Posts
      ///
      /// Locales: en
      var explorePosts: RswiftResources.StringResource { .init(key: "Explore Posts", tableName: "Auth", source: source, developmentValue: "Explore Posts", comment: nil) }

      /// en translation: FEMALE
      ///
      /// Key: FAMALE
      ///
      /// Locales: en
      var famalE: RswiftResources.StringResource { .init(key: "FAMALE", tableName: "Auth", source: source, developmentValue: "FEMALE", comment: nil) }

      /// en translation: Facebook
      ///
      /// Key: Facebook
      ///
      /// Locales: en
      var facebook: RswiftResources.StringResource { .init(key: "Facebook", tableName: "Auth", source: source, developmentValue: "Facebook", comment: nil) }

      /// en translation: Favourite
      ///
      /// Key: Favourite
      ///
      /// Locales: en
      var favourite: RswiftResources.StringResource { .init(key: "Favourite", tableName: "Auth", source: source, developmentValue: "Favourite", comment: nil) }

      /// en translation: Featured Posts
      ///
      /// Key: Featured Posts
      ///
      /// Locales: en
      var featuredPosts: RswiftResources.StringResource { .init(key: "Featured Posts", tableName: "Auth", source: source, developmentValue: "Featured Posts", comment: nil) }

      /// en translation: Female
      ///
      /// Key: Female
      ///
      /// Locales: en
      var female: RswiftResources.StringResource { .init(key: "Female", tableName: "Auth", source: source, developmentValue: "Female", comment: nil) }

      /// en translation: Filter
      ///
      /// Key: Filter
      ///
      /// Locales: en
      var filter: RswiftResources.StringResource { .init(key: "Filter", tableName: "Auth", source: source, developmentValue: "Filter", comment: nil) }

      /// en translation: Find all invite request
      ///
      /// Key: Find all invite request
      ///
      /// Locales: en
      var findAllInviteRequest: RswiftResources.StringResource { .init(key: "Find all invite request", tableName: "Auth", source: source, developmentValue: "Find all invite request", comment: nil) }

      /// en translation: First Name
      ///
      /// Key: First Name
      ///
      /// Locales: en
      var firstName: RswiftResources.StringResource { .init(key: "First Name", tableName: "Auth", source: source, developmentValue: "First Name", comment: nil) }

      /// en translation: Follow Request
      ///
      /// Key: Follow Request
      ///
      /// Locales: en
      var followRequest: RswiftResources.StringResource { .init(key: "Follow Request", tableName: "Auth", source: source, developmentValue: "Follow Request", comment: nil) }

      /// en translation: Followed me
      ///
      /// Key: Followed me
      ///
      /// Locales: en
      var followedMe: RswiftResources.StringResource { .init(key: "Followed me", tableName: "Auth", source: source, developmentValue: "Followed me", comment: nil) }

      /// en translation: Followers
      ///
      /// Key: Followers
      ///
      /// Locales: en
      var followers: RswiftResources.StringResource { .init(key: "Followers", tableName: "Auth", source: source, developmentValue: "Followers", comment: nil) }

      /// en translation: Forgot Password
      ///
      /// Key: Forgot Password
      ///
      /// Locales: en
      var forgotPassword: RswiftResources.StringResource { .init(key: "Forgot Password", tableName: "Auth", source: source, developmentValue: "Forgot Password", comment: nil) }

      /// en translation: Forgot your password?
      ///
      /// Key: Forgot your password?
      ///
      /// Locales: en
      var forgotYourPassword: RswiftResources.StringResource { .init(key: "Forgot your password?", tableName: "Auth", source: source, developmentValue: "Forgot your password?", comment: nil) }

      /// en translation: Funding
      ///
      /// Key: Funding
      ///
      /// Locales: en
      var funding: RswiftResources.StringResource { .init(key: "Funding", tableName: "Auth", source: source, developmentValue: "Funding", comment: nil) }

      /// en translation: Funding Request
      ///
      /// Key: Funding Request
      ///
      /// Locales: en
      var fundingRequest: RswiftResources.StringResource { .init(key: "Funding Request", tableName: "Auth", source: source, developmentValue: "Funding Request", comment: nil) }

      /// en translation: GIF
      ///
      /// Key: GIF
      ///
      /// Locales: en
      var giF: RswiftResources.StringResource { .init(key: "GIF", tableName: "Auth", source: source, developmentValue: "GIF", comment: nil) }

      /// en translation: Gallery
      ///
      /// Key: Gallery
      ///
      /// Locales: en
      var gallery: RswiftResources.StringResource { .init(key: "Gallery", tableName: "Auth", source: source, developmentValue: "Gallery", comment: nil) }

      /// en translation: Gender
      ///
      /// Key: Gender
      ///
      /// Locales: en
      var gender: RswiftResources.StringResource { .init(key: "Gender", tableName: "Auth", source: source, developmentValue: "Gender", comment: nil) }

      /// en translation: General
      ///
      /// Key: General
      ///
      /// Locales: en
      var general: RswiftResources.StringResource { .init(key: "General", tableName: "Auth", source: source, developmentValue: "General", comment: nil) }

      /// en translation: Get notifications when you receive messages
      ///
      /// Key: Get notifications when you receive messages
      ///
      /// Locales: en
      var getNotificationsWhenYouReceiveMessages: RswiftResources.StringResource { .init(key: "Get notifications when you receive messages", tableName: "Auth", source: source, developmentValue: "Get notifications when you receive messages", comment: nil) }

      /// en translation: Go to Post
      ///
      /// Key: Go to Post
      ///
      /// Locales: en
      var goToPost: RswiftResources.StringResource { .init(key: "Go to Post", tableName: "Auth", source: source, developmentValue: "Go to Post", comment: nil) }

      /// en translation: Group Name
      ///
      /// Key: Group Name
      ///
      /// Locales: en
      var groupName: RswiftResources.StringResource { .init(key: "Group Name", tableName: "Auth", source: source, developmentValue: "Group Name", comment: nil) }

      /// en translation: Group Request
      ///
      /// Key: Group Request
      ///
      /// Locales: en
      var groupRequest: RswiftResources.StringResource { .init(key: "Group Request", tableName: "Auth", source: source, developmentValue: "Group Request", comment: nil) }

      /// en translation: HASHTAGS
      ///
      /// Key: HASHTAGS
      ///
      /// Locales: en
      var hashtagS: RswiftResources.StringResource { .init(key: "HASHTAGS", tableName: "Auth", source: source, developmentValue: "HASHTAGS", comment: nil) }

      /// en translation: Hang Up
      ///
      /// Key: Hang Up
      ///
      /// Locales: en
      var hangUp: RswiftResources.StringResource { .init(key: "Hang Up", tableName: "Auth", source: source, developmentValue: "Hang Up", comment: nil) }

      /// en translation: HashTag
      ///
      /// Key: HashTag
      ///
      /// Locales: en
      var hashTag: RswiftResources.StringResource { .init(key: "HashTag", tableName: "Auth", source: source, developmentValue: "HashTag", comment: nil) }

      /// en translation: Help
      ///
      /// Key: Help
      ///
      /// Locales: en
      var help: RswiftResources.StringResource { .init(key: "Help", tableName: "Auth", source: source, developmentValue: "Help", comment: nil) }

      /// en translation: Hi! There I'm using Pixel Photo
      ///
      /// Key: Hi! There I'm using Pixel Photo
      ///
      /// Locales: en
      var hiThereIMUsingPixelPhoto: RswiftResources.StringResource { .init(key: "Hi! There I'm using Pixel Photo", tableName: "Auth", source: source, developmentValue: "Hi! There I'm using Pixel Photo", comment: nil) }

      /// en translation: Hi! there i am using WoWonder Messenger
      ///
      /// Key: Hi! there i am using WoWonder Messenger
      ///
      /// Locales: en
      var hiThereIAmUsingWoWonderMessenger: RswiftResources.StringResource { .init(key: "Hi! there i am using WoWonder Messenger", tableName: "Auth", source: source, developmentValue: "Hi! there i am using WoWonder Messenger", comment: nil) }

      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Key: If you forgot your password, you can reset it from here.
      ///
      /// Locales: en
      var ifYouForgotYourPasswordYouCanResetItFromHere: RswiftResources.StringResource { .init(key: "If you forgot your password, you can reset it from here.", tableName: "Auth", source: source, developmentValue: "If you forgot your password, you can reset it from here.", comment: nil) }

      /// en translation: Image
      ///
      /// Key: Image
      ///
      /// Locales: en
      var image: RswiftResources.StringResource { .init(key: "Image", tableName: "Auth", source: source, developmentValue: "Image", comment: nil) }

      /// en translation: Image Gallery
      ///
      /// Key: Image Gallery
      ///
      /// Locales: en
      var imageGallery: RswiftResources.StringResource { .init(key: "Image Gallery", tableName: "Auth", source: source, developmentValue: "Image Gallery", comment: nil) }

      /// en translation: Image Type
      ///
      /// Key: Image Type
      ///
      /// Locales: en
      var imageType: RswiftResources.StringResource { .init(key: "Image Type", tableName: "Auth", source: source, developmentValue: "Image Type", comment: nil) }

      /// en translation: Internet Error
      ///
      /// Key: Internet Error
      ///
      /// Locales: en
      var internetError: RswiftResources.StringResource { .init(key: "Internet Error", tableName: "Auth", source: source, developmentValue: "Internet Error", comment: nil) }

      /// en translation: Invite Friends
      ///
      /// Key: Invite Friends
      ///
      /// Locales: en
      var inviteFriends: RswiftResources.StringResource { .init(key: "Invite Friends", tableName: "Auth", source: source, developmentValue: "Invite Friends", comment: nil) }

      /// en translation: Label
      ///
      /// Key: Label
      ///
      /// Locales: en
      var label: RswiftResources.StringResource { .init(key: "Label", tableName: "Auth", source: source, developmentValue: "Label", comment: nil) }

      /// en translation: Language
      ///
      /// Key: Language
      ///
      /// Locales: en
      var language: RswiftResources.StringResource { .init(key: "Language", tableName: "Auth", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: Last Name
      ///
      /// Key: Last Name
      ///
      /// Locales: en
      var lastName: RswiftResources.StringResource { .init(key: "Last Name", tableName: "Auth", source: source, developmentValue: "Last Name", comment: nil) }

      /// en translation: License Type
      ///
      /// Key: License Type
      ///
      /// Locales: en
      var licenseType: RswiftResources.StringResource { .init(key: "License Type", tableName: "Auth", source: source, developmentValue: "License Type", comment: nil) }

      /// en translation: Light mode
      ///
      /// Key: Light mode
      ///
      /// Locales: en
      var lightMode: RswiftResources.StringResource { .init(key: "Light mode", tableName: "Auth", source: source, developmentValue: "Light mode", comment: nil) }

      /// en translation: Like
      ///
      /// Key: Like
      ///
      /// Locales: en
      var like: RswiftResources.StringResource { .init(key: "Like", tableName: "Auth", source: source, developmentValue: "Like", comment: nil) }

      /// en translation: Liked my post
      ///
      /// Key: Liked my post
      ///
      /// Locales: en
      var likedMyPost: RswiftResources.StringResource { .init(key: "Liked my post", tableName: "Auth", source: source, developmentValue: "Liked my post", comment: nil) }

      /// en translation: Likes
      ///
      /// Key: Likes
      ///
      /// Locales: en
      var likes: RswiftResources.StringResource { .init(key: "Likes", tableName: "Auth", source: source, developmentValue: "Likes", comment: nil) }

      /// en translation: Loading...
      ///
      /// Key: Loading...
      ///
      /// Locales: en
      var loading: RswiftResources.StringResource { .init(key: "Loading...", tableName: "Auth", source: source, developmentValue: "Loading...", comment: nil) }

      /// en translation: Location
      ///
      /// Key: Location
      ///
      /// Locales: en
      var location: RswiftResources.StringResource { .init(key: "Location", tableName: "Auth", source: source, developmentValue: "Location", comment: nil) }

      /// en translation: Login
      ///
      /// Key: Login
      ///
      /// Locales: en
      var login: RswiftResources.StringResource { .init(key: "Login", tableName: "Auth", source: source, developmentValue: "Login", comment: nil) }

      /// en translation: Logout
      ///
      /// Key: Logout
      ///
      /// Locales: en
      var logout: RswiftResources.StringResource { .init(key: "Logout", tableName: "Auth", source: source, developmentValue: "Logout", comment: nil) }

      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Key: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Locales: en
      var loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda: RswiftResources.StringResource { .init(key: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", tableName: "Auth", source: source, developmentValue: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", comment: nil) }

      /// en translation: MALE
      ///
      /// Key: MALE
      ///
      /// Locales: en
      var malE: RswiftResources.StringResource { .init(key: "MALE", tableName: "Auth", source: source, developmentValue: "MALE", comment: nil) }

      /// en translation: Male
      ///
      /// Key: Male
      ///
      /// Locales: en
      var male: RswiftResources.StringResource { .init(key: "Male", tableName: "Auth", source: source, developmentValue: "Male", comment: nil) }

      /// en translation: Manage Sessions
      ///
      /// Key: Manage Sessions
      ///
      /// Locales: en
      var manageSessions: RswiftResources.StringResource { .init(key: "Manage Sessions", tableName: "Auth", source: source, developmentValue: "Manage Sessions", comment: nil) }

      /// en translation: Mention Contact
      ///
      /// Key: Mention Contact
      ///
      /// Locales: en
      var mentionContact: RswiftResources.StringResource { .init(key: "Mention Contact", tableName: "Auth", source: source, developmentValue: "Mention Contact", comment: nil) }

      /// en translation: Mentioned Contact
      ///
      /// Key: Mentioned Contact
      ///
      /// Locales: en
      var mentionedContact: RswiftResources.StringResource { .init(key: "Mentioned Contact", tableName: "Auth", source: source, developmentValue: "Mentioned Contact", comment: nil) }

      /// en translation: Mentioned me
      ///
      /// Key: Mentioned me
      ///
      /// Locales: en
      var mentionedMe: RswiftResources.StringResource { .init(key: "Mentioned me", tableName: "Auth", source: source, developmentValue: "Mentioned me", comment: nil) }

      /// en translation: Message
      ///
      /// Key: Message
      ///
      /// Locales: en
      var message: RswiftResources.StringResource { .init(key: "Message", tableName: "Auth", source: source, developmentValue: "Message", comment: nil) }

      /// en translation: Message Notification
      ///
      /// Key: Message Notification
      ///
      /// Locales: en
      var messageNotification: RswiftResources.StringResource { .init(key: "Message Notification", tableName: "Auth", source: source, developmentValue: "Message Notification", comment: nil) }

      /// en translation: Message Notifications
      ///
      /// Key: Message Notifications
      ///
      /// Locales: en
      var messageNotifications: RswiftResources.StringResource { .init(key: "Message Notifications", tableName: "Auth", source: source, developmentValue: "Message Notifications", comment: nil) }

      /// en translation: Mobile
      ///
      /// Key: Mobile
      ///
      /// Locales: en
      var mobile: RswiftResources.StringResource { .init(key: "Mobile", tableName: "Auth", source: source, developmentValue: "Mobile", comment: nil) }

      /// en translation: Mute
      ///
      /// Key: Mute
      ///
      /// Locales: en
      var mute: RswiftResources.StringResource { .init(key: "Mute", tableName: "Auth", source: source, developmentValue: "Mute", comment: nil) }

      /// en translation: My Account
      ///
      /// Key: My Account
      ///
      /// Locales: en
      var myAccount: RswiftResources.StringResource { .init(key: "My Account", tableName: "Auth", source: source, developmentValue: "My Account", comment: nil) }

      /// en translation: My Affilities
      ///
      /// Key: My Affilities
      ///
      /// Locales: en
      var myAffilities: RswiftResources.StringResource { .init(key: "My Affilities", tableName: "Auth", source: source, developmentValue: "My Affilities", comment: nil) }

      /// en translation: My Profile
      ///
      /// Key: My Profile
      ///
      /// Locales: en
      var myProfile: RswiftResources.StringResource { .init(key: "My Profile", tableName: "Auth", source: source, developmentValue: "My Profile", comment: nil) }

      /// en translation: MyFriend
      ///
      /// Key: MyFriend
      ///
      /// Locales: en
      var myFriend: RswiftResources.StringResource { .init(key: "MyFriend", tableName: "Auth", source: source, developmentValue: "MyFriend", comment: nil) }

      /// en translation: NO
      ///
      /// Key: NO
      ///
      /// Locales: en
      var nO: RswiftResources.StringResource { .init(key: "NO", tableName: "Auth", source: source, developmentValue: "NO", comment: nil) }

      /// en translation: Name
      ///
      /// Key: Name
      ///
      /// Locales: en
      var name: RswiftResources.StringResource { .init(key: "Name", tableName: "Auth", source: source, developmentValue: "Name", comment: nil) }

      /// en translation: New Password
      ///
      /// Key: New Password
      ///
      /// Locales: en
      var newPassword: RswiftResources.StringResource { .init(key: "New Password", tableName: "Auth", source: source, developmentValue: "New Password", comment: nil) }

      /// en translation: Night Mode
      ///
      /// Key: Night Mode
      ///
      /// Locales: en
      var nightMode: RswiftResources.StringResource { .init(key: "Night Mode", tableName: "Auth", source: source, developmentValue: "Night Mode", comment: nil) }

      /// en translation: No body
      ///
      /// Key: No body
      ///
      /// Locales: en
      var noBody: RswiftResources.StringResource { .init(key: "No body", tableName: "Auth", source: source, developmentValue: "No body", comment: nil) }

      /// en translation: No more Messages
      ///
      /// Key: No more Messages
      ///
      /// Locales: en
      var noMoreMessages: RswiftResources.StringResource { .init(key: "No more Messages", tableName: "Auth", source: source, developmentValue: "No more Messages", comment: nil) }

      /// en translation: Nobody
      ///
      /// Key: Nobody
      ///
      /// Locales: en
      var nobody: RswiftResources.StringResource { .init(key: "Nobody", tableName: "Auth", source: source, developmentValue: "Nobody", comment: nil) }

      /// en translation: Notification
      ///
      /// Key: Notification
      ///
      /// Locales: en
      var notification: RswiftResources.StringResource { .init(key: "Notification", tableName: "Auth", source: source, developmentValue: "Notification", comment: nil) }

      /// en translation: Notification Popup
      ///
      /// Key: Notification Popup
      ///
      /// Locales: en
      var notificationPopup: RswiftResources.StringResource { .init(key: "Notification Popup", tableName: "Auth", source: source, developmentValue: "Notification Popup", comment: nil) }

      /// en translation: Notification Setting
      ///
      /// Key: Notification Setting
      ///
      /// Locales: en
      var notificationSetting: RswiftResources.StringResource { .init(key: "Notification Setting", tableName: "Auth", source: source, developmentValue: "Notification Setting", comment: nil) }

      /// en translation: OFFLINE
      ///
      /// Key: OFFLINE
      ///
      /// Locales: en
      var offlinE: RswiftResources.StringResource { .init(key: "OFFLINE", tableName: "Auth", source: source, developmentValue: "OFFLINE", comment: nil) }

      /// en translation: OK
      ///
      /// Key: OK
      ///
      /// Locales: en
      var oK: RswiftResources.StringResource { .init(key: "OK", tableName: "Auth", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: ONLINE
      ///
      /// Key: ONLINE
      ///
      /// Locales: en
      var onlinE: RswiftResources.StringResource { .init(key: "ONLINE", tableName: "Auth", source: source, developmentValue: "ONLINE", comment: nil) }

      /// en translation: Okay
      ///
      /// Key: Okay
      ///
      /// Locales: en
      var okay: RswiftResources.StringResource { .init(key: "Okay", tableName: "Auth", source: source, developmentValue: "Okay", comment: nil) }

      /// en translation: Option
      ///
      /// Key: Option
      ///
      /// Locales: en
      var option: RswiftResources.StringResource { .init(key: "Option", tableName: "Auth", source: source, developmentValue: "Option", comment: nil) }

      /// en translation: Others
      ///
      /// Key: Others
      ///
      /// Locales: en
      var others: RswiftResources.StringResource { .init(key: "Others", tableName: "Auth", source: source, developmentValue: "Others", comment: nil) }

      /// en translation: PRIVACY
      ///
      /// Key: PRIVACY
      ///
      /// Locales: en
      var privacY: RswiftResources.StringResource { .init(key: "PRIVACY", tableName: "Auth", source: source, developmentValue: "PRIVACY", comment: nil) }

      /// en translation: Passport
      ///
      /// Key: Passport
      ///
      /// Locales: en
      var passport: RswiftResources.StringResource { .init(key: "Passport", tableName: "Auth", source: source, developmentValue: "Passport", comment: nil) }

      /// en translation: Password
      ///
      /// Key: Password
      ///
      /// Locales: en
      var password: RswiftResources.StringResource { .init(key: "Password", tableName: "Auth", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Password do not match.
      ///
      /// Key: Password do not match.
      ///
      /// Locales: en
      var passwordDoNotMatch: RswiftResources.StringResource { .init(key: "Password do not match.", tableName: "Auth", source: source, developmentValue: "Password do not match.", comment: nil) }

      /// en translation: Password does not match. Try again!
      ///
      /// Key: Password does not match. Try again!
      ///
      /// Locales: en
      var passwordDoesNotMatchTryAgain: RswiftResources.StringResource { .init(key: "Password does not match. Try again!", tableName: "Auth", source: source, developmentValue: "Password does not match. Try again!", comment: nil) }

      /// en translation: Password has been changed!
      ///
      /// Key: Password has been changed!
      ///
      /// Locales: en
      var passwordHasBeenChanged: RswiftResources.StringResource { .init(key: "Password has been changed!", tableName: "Auth", source: source, developmentValue: "Password has been changed!", comment: nil) }

      /// en translation: PayPal E-mail
      ///
      /// Key: PayPal E-mail
      ///
      /// Locales: en
      var payPalEMail: RswiftResources.StringResource { .init(key: "PayPal E-mail", tableName: "Auth", source: source, developmentValue: "PayPal E-mail", comment: nil) }

      /// en translation: Phone
      ///
      /// Key: Phone
      ///
      /// Locales: en
      var phone: RswiftResources.StringResource { .init(key: "Phone", tableName: "Auth", source: source, developmentValue: "Phone", comment: nil) }

      /// en translation: Phone Number
      ///
      /// Key: Phone Number
      ///
      /// Locales: en
      var phoneNumber: RswiftResources.StringResource { .init(key: "Phone Number", tableName: "Auth", source: source, developmentValue: "Phone Number", comment: nil) }

      /// en translation: Play sound for incoming and outgoing messages
      ///
      /// Key: Play sound for incoming and outgoing messages
      ///
      /// Locales: en
      var playSoundForIncomingAndOutgoingMessages: RswiftResources.StringResource { .init(key: "Play sound for incoming and outgoing messages", tableName: "Auth", source: source, developmentValue: "Play sound for incoming and outgoing messages", comment: nil) }

      /// en translation: Play sounds for incoming and outgoing messages
      ///
      /// Key: Play sounds for incoming and outgoing messages
      ///
      /// Locales: en
      var playSoundsForIncomingAndOutgoingMessages: RswiftResources.StringResource { .init(key: "Play sounds for incoming and outgoing messages", tableName: "Auth", source: source, developmentValue: "Play sounds for incoming and outgoing messages", comment: nil) }

      /// en translation: Please Enter Paypal Email
      ///
      /// Key: Please Enter Paypal Email
      ///
      /// Locales: en
      var pleaseEnterPaypalEmail: RswiftResources.StringResource { .init(key: "Please Enter Paypal Email", tableName: "Auth", source: source, developmentValue: "Please Enter Paypal Email", comment: nil) }

      /// en translation: Please Enter amount
      ///
      /// Key: Please Enter amount
      ///
      /// Locales: en
      var pleaseEnterAmount: RswiftResources.StringResource { .init(key: "Please Enter amount", tableName: "Auth", source: source, developmentValue: "Please Enter amount", comment: nil) }

      /// en translation: Please Select a recent Picture of your Passport or id
      ///
      /// Key: Please Select a recent Picture of your Passport or id
      ///
      /// Locales: en
      var pleaseSelectARecentPictureOfYourPassportOrId: RswiftResources.StringResource { .init(key: "Please Select a recent Picture of your Passport or id", tableName: "Auth", source: source, developmentValue: "Please Select a recent Picture of your Passport or id", comment: nil) }

      /// en translation: Please add Photo image
      ///
      /// Key: Please add Photo image
      ///
      /// Locales: en
      var pleaseAddPhotoImage: RswiftResources.StringResource { .init(key: "Please add Photo image", tableName: "Auth", source: source, developmentValue: "Please add Photo image", comment: nil) }

      /// en translation: Please add passport image
      ///
      /// Key: Please add passport image
      ///
      /// Locales: en
      var pleaseAddPassportImage: RswiftResources.StringResource { .init(key: "Please add passport image", tableName: "Auth", source: source, developmentValue: "Please add passport image", comment: nil) }

      /// en translation: Please enter confirm password.
      ///
      /// Key: Please enter confirm password.
      ///
      /// Locales: en
      var pleaseEnterConfirmPassword: RswiftResources.StringResource { .init(key: "Please enter confirm password.", tableName: "Auth", source: source, developmentValue: "Please enter confirm password.", comment: nil) }

      /// en translation: Please enter current confirm password.
      ///
      /// Key: Please enter current confirm password.
      ///
      /// Locales: en
      var pleaseEnterCurrentConfirmPassword: RswiftResources.StringResource { .init(key: "Please enter current confirm password.", tableName: "Auth", source: source, developmentValue: "Please enter current confirm password.", comment: nil) }

      /// en translation: Please enter current new password.
      ///
      /// Key: Please enter current new password.
      ///
      /// Locales: en
      var pleaseEnterCurrentNewPassword: RswiftResources.StringResource { .init(key: "Please enter current new password.", tableName: "Auth", source: source, developmentValue: "Please enter current new password.", comment: nil) }

      /// en translation: Please enter current password.
      ///
      /// Key: Please enter current password.
      ///
      /// Locales: en
      var pleaseEnterCurrentPassword: RswiftResources.StringResource { .init(key: "Please enter current password.", tableName: "Auth", source: source, developmentValue: "Please enter current password.", comment: nil) }

      /// en translation: Please enter email.
      ///
      /// Key: Please enter email.
      ///
      /// Locales: en
      var pleaseEnterEmail: RswiftResources.StringResource { .init(key: "Please enter email.", tableName: "Auth", source: source, developmentValue: "Please enter email.", comment: nil) }

      /// en translation: Please enter password.
      ///
      /// Key: Please enter password.
      ///
      /// Locales: en
      var pleaseEnterPassword: RswiftResources.StringResource { .init(key: "Please enter password.", tableName: "Auth", source: source, developmentValue: "Please enter password.", comment: nil) }

      /// en translation: Please enter username.
      ///
      /// Key: Please enter username.
      ///
      /// Locales: en
      var pleaseEnterUsername: RswiftResources.StringResource { .init(key: "Please enter username.", tableName: "Auth", source: source, developmentValue: "Please enter username.", comment: nil) }

      /// en translation: Please enter your email address. We will send you a link to reset password.
      ///
      /// Key: Please enter your email address. We will send you a link to reset password.
      ///
      /// Locales: en
      var pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword: RswiftResources.StringResource { .init(key: "Please enter your email address. We will send you a link to reset password.", tableName: "Auth", source: source, developmentValue: "Please enter your email address. We will send you a link to reset password.", comment: nil) }

      /// en translation: Please see my post
      ///
      /// Key: Please see my post
      ///
      /// Locales: en
      var pleaseSeeMyPost: RswiftResources.StringResource { .init(key: "Please see my post", tableName: "Auth", source: source, developmentValue: "Please see my post", comment: nil) }

      /// en translation: Please select atleast one media.
      ///
      /// Key: Please select atleast one media.
      ///
      /// Locales: en
      var pleaseSelectAtleastOneMedia: RswiftResources.StringResource { .init(key: "Please select atleast one media.", tableName: "Auth", source: source, developmentValue: "Please select atleast one media.", comment: nil) }

      /// en translation: Post
      ///
      /// Key: Post
      ///
      /// Locales: en
      var post: RswiftResources.StringResource { .init(key: "Post", tableName: "Auth", source: source, developmentValue: "Post", comment: nil) }

      /// en translation: Posts
      ///
      /// Key: Posts
      ///
      /// Locales: en
      var posts: RswiftResources.StringResource { .init(key: "Posts", tableName: "Auth", source: source, developmentValue: "Posts", comment: nil) }

      /// en translation: Price
      ///
      /// Key: Price
      ///
      /// Locales: en
      var price: RswiftResources.StringResource { .init(key: "Price", tableName: "Auth", source: source, developmentValue: "Price", comment: nil) }

      /// en translation: Price Max
      ///
      /// Key: Price Max
      ///
      /// Locales: en
      var priceMax: RswiftResources.StringResource { .init(key: "Price Max", tableName: "Auth", source: source, developmentValue: "Price Max", comment: nil) }

      /// en translation: Price Min
      ///
      /// Key: Price Min
      ///
      /// Locales: en
      var priceMin: RswiftResources.StringResource { .init(key: "Price Min", tableName: "Auth", source: source, developmentValue: "Price Min", comment: nil) }

      /// en translation: Privacy
      ///
      /// Key: Privacy
      ///
      /// Locales: en
      var privacy: RswiftResources.StringResource { .init(key: "Privacy", tableName: "Auth", source: source, developmentValue: "Privacy", comment: nil) }

      /// en translation: Profile
      ///
      /// Key: Profile
      ///
      /// Locales: en
      var profile: RswiftResources.StringResource { .init(key: "Profile", tableName: "Auth", source: source, developmentValue: "Profile", comment: nil) }

      /// en translation: Promoted
      ///
      /// Key: Promoted
      ///
      /// Locales: en
      var promoted: RswiftResources.StringResource { .init(key: "Promoted", tableName: "Auth", source: source, developmentValue: "Promoted", comment: nil) }

      /// en translation: REQUEST WITHDRAWAL
      ///
      /// Key: REQUEST WITHDRAWAL
      ///
      /// Locales: en
      var requestwithdrawaL: RswiftResources.StringResource { .init(key: "REQUEST WITHDRAWAL", tableName: "Auth", source: source, developmentValue: "REQUEST WITHDRAWAL", comment: nil) }

      /// en translation: Received Notification when some one
      ///
      /// Key: Received Notification when some one
      ///
      /// Locales: en
      var receivedNotificationWhenSomeOne: RswiftResources.StringResource { .init(key: "Received Notification when some one", tableName: "Auth", source: source, developmentValue: "Received Notification when some one", comment: nil) }

      /// en translation: Refresh
      ///
      /// Key: Refresh
      ///
      /// Locales: en
      var refresh: RswiftResources.StringResource { .init(key: "Refresh", tableName: "Auth", source: source, developmentValue: "Refresh", comment: nil) }

      /// en translation: Register
      ///
      /// Key: Register
      ///
      /// Locales: en
      var register: RswiftResources.StringResource { .init(key: "Register", tableName: "Auth", source: source, developmentValue: "Register", comment: nil) }

      /// en translation: Remove Account
      ///
      /// Key: Remove Account
      ///
      /// Locales: en
      var removeAccount: RswiftResources.StringResource { .init(key: "Remove Account", tableName: "Auth", source: source, developmentValue: "Remove Account", comment: nil) }

      /// en translation: Repeat Password
      ///
      /// Key: Repeat Password
      ///
      /// Locales: en
      var repeatPassword: RswiftResources.StringResource { .init(key: "Repeat Password", tableName: "Auth", source: source, developmentValue: "Repeat Password", comment: nil) }

      /// en translation: Report
      ///
      /// Key: Report
      ///
      /// Locales: en
      var report: RswiftResources.StringResource { .init(key: "Report", tableName: "Auth", source: source, developmentValue: "Report", comment: nil) }

      /// en translation: Report a Problem
      ///
      /// Key: Report a Problem
      ///
      /// Locales: en
      var reportAProblem: RswiftResources.StringResource { .init(key: "Report a Problem", tableName: "Auth", source: source, developmentValue: "Report a Problem", comment: nil) }

      /// en translation: Report this Post
      ///
      /// Key: Report this Post
      ///
      /// Locales: en
      var reportThisPost: RswiftResources.StringResource { .init(key: "Report this Post", tableName: "Auth", source: source, developmentValue: "Report this Post", comment: nil) }

      /// en translation: Request Submit
      ///
      /// Key: Request Submit
      ///
      /// Locales: en
      var requestSubmit: RswiftResources.StringResource { .init(key: "Request Submit", tableName: "Auth", source: source, developmentValue: "Request Submit", comment: nil) }

      /// en translation: Requested
      ///
      /// Key: Requested
      ///
      /// Locales: en
      var requested: RswiftResources.StringResource { .init(key: "Requested", tableName: "Auth", source: source, developmentValue: "Requested", comment: nil) }

      /// en translation: Reset filter
      ///
      /// Key: Reset filter
      ///
      /// Locales: en
      var resetFilter: RswiftResources.StringResource { .init(key: "Reset filter", tableName: "Auth", source: source, developmentValue: "Reset filter", comment: nil) }

      /// en translation: SAVE
      ///
      /// Key: SAVE
      ///
      /// Locales: en
      var savE: RswiftResources.StringResource { .init(key: "SAVE", tableName: "Auth", source: source, developmentValue: "SAVE", comment: nil) }

      /// en translation: SEND
      ///
      /// Key: SEND
      ///
      /// Locales: en
      var senD: RswiftResources.StringResource { .init(key: "SEND", tableName: "Auth", source: source, developmentValue: "SEND", comment: nil) }

      /// en translation: SIGN IN
      ///
      /// Key: SIGN IN
      ///
      /// Locales: en
      var signiN: RswiftResources.StringResource { .init(key: "SIGN IN", tableName: "Auth", source: source, developmentValue: "SIGN IN", comment: nil) }

      /// en translation: Sad no result!
      ///
      /// Key: Sad no result!
      ///
      /// Locales: en
      var sadNoResult: RswiftResources.StringResource { .init(key: "Sad no result!", tableName: "Auth", source: source, developmentValue: "Sad no result!", comment: nil) }

      /// en translation: Save
      ///
      /// Key: Save
      ///
      /// Locales: en
      var save: RswiftResources.StringResource { .init(key: "Save", tableName: "Auth", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Save & Continue
      ///
      /// Key: Save & Continue
      ///
      /// Locales: en
      var saveContinue: RswiftResources.StringResource { .init(key: "Save & Continue", tableName: "Auth", source: source, developmentValue: "Save & Continue", comment: nil) }

      /// en translation: Search
      ///
      /// Key: Search
      ///
      /// Locales: en
      var search: RswiftResources.StringResource { .init(key: "Search", tableName: "Auth", source: source, developmentValue: "Search", comment: nil) }

      /// en translation: Search Random
      ///
      /// Key: Search Random
      ///
      /// Locales: en
      var searchRandom: RswiftResources.StringResource { .init(key: "Search Random", tableName: "Auth", source: source, developmentValue: "Search Random", comment: nil) }

      /// en translation: Security
      ///
      /// Key: Security
      ///
      /// Locales: en
      var security: RswiftResources.StringResource { .init(key: "Security", tableName: "Auth", source: source, developmentValue: "Security", comment: nil) }

      /// en translation: Select GIF
      ///
      /// Key: Select GIF
      ///
      /// Locales: en
      var selectGIF: RswiftResources.StringResource { .init(key: "Select GIF", tableName: "Auth", source: source, developmentValue: "Select GIF", comment: nil) }

      /// en translation: Select Image
      ///
      /// Key: Select Image
      ///
      /// Locales: en
      var selectImage: RswiftResources.StringResource { .init(key: "Select Image", tableName: "Auth", source: source, developmentValue: "Select Image", comment: nil) }

      /// en translation: Select from your contact list
      ///
      /// Key: Select from your contact list
      ///
      /// Locales: en
      var selectFromYourContactList: RswiftResources.StringResource { .init(key: "Select from your contact list", tableName: "Auth", source: source, developmentValue: "Select from your contact list", comment: nil) }

      /// en translation: Select what you want
      ///
      /// Key: Select what you want
      ///
      /// Locales: en
      var selectWhatYouWant: RswiftResources.StringResource { .init(key: "Select what you want", tableName: "Auth", source: source, developmentValue: "Select what you want", comment: nil) }

      /// en translation: Share
      ///
      /// Key: Share
      ///
      /// Locales: en
      var share: RswiftResources.StringResource { .init(key: "Share", tableName: "Auth", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Share To
      ///
      /// Key: Share To
      ///
      /// Locales: en
      var shareTo: RswiftResources.StringResource { .init(key: "Share To", tableName: "Auth", source: source, developmentValue: "Share To", comment: nil) }

      /// en translation: Show all comments
      ///
      /// Key: Show all comments
      ///
      /// Locales: en
      var showAllComments: RswiftResources.StringResource { .init(key: "Show all comments", tableName: "Auth", source: source, developmentValue: "Show all comments", comment: nil) }

      /// en translation: Show online users
      ///
      /// Key: Show online users
      ///
      /// Locales: en
      var showOnlineUsers: RswiftResources.StringResource { .init(key: "Show online users", tableName: "Auth", source: source, developmentValue: "Show online users", comment: nil) }

      /// en translation: Show when user are online
      ///
      /// Key: Show when user are online
      ///
      /// Locales: en
      var showWhenUserAreOnline: RswiftResources.StringResource { .init(key: "Show when user are online", tableName: "Auth", source: source, developmentValue: "Show when user are online", comment: nil) }

      /// en translation: Show your profile in search engines
      ///
      /// Key: Show your profile in search engines
      ///
      /// Locales: en
      var showYourProfileInSearchEngines: RswiftResources.StringResource { .init(key: "Show your profile in search engines", tableName: "Auth", source: source, developmentValue: "Show your profile in search engines", comment: nil) }

      /// en translation: Sign Up
      ///
      /// Key: Sign Up
      ///
      /// Locales: en
      var signUp: RswiftResources.StringResource { .init(key: "Sign Up", tableName: "Auth", source: source, developmentValue: "Sign Up", comment: nil) }

      /// en translation: Social Link
      ///
      /// Key: Social Link
      ///
      /// Locales: en
      var socialLink: RswiftResources.StringResource { .init(key: "Social Link", tableName: "Auth", source: source, developmentValue: "Social Link", comment: nil) }

      /// en translation: Social Links 
      ///
      /// Key: Social Links 
      ///
      /// Locales: en
      var socialLinks: RswiftResources.StringResource { .init(key: "Social Links ", tableName: "Auth", source: source, developmentValue: "Social Links ", comment: nil) }

      /// en translation: Started Messages
      ///
      /// Key: Started Messages
      ///
      /// Locales: en
      var startedMessages: RswiftResources.StringResource { .init(key: "Started Messages", tableName: "Auth", source: source, developmentValue: "Started Messages", comment: nil) }

      /// en translation: Store
      ///
      /// Key: Store
      ///
      /// Locales: en
      var store: RswiftResources.StringResource { .init(key: "Store", tableName: "Auth", source: source, developmentValue: "Store", comment: nil) }

      /// en translation: Submit
      ///
      /// Key: Submit
      ///
      /// Locales: en
      var submit: RswiftResources.StringResource { .init(key: "Submit", tableName: "Auth", source: source, developmentValue: "Submit", comment: nil) }

      /// en translation: Submit Request
      ///
      /// Key: Submit Request
      ///
      /// Locales: en
      var submitRequest: RswiftResources.StringResource { .init(key: "Submit Request", tableName: "Auth", source: source, developmentValue: "Submit Request", comment: nil) }

      /// en translation: Suggested User
      ///
      /// Key: Suggested User
      ///
      /// Locales: en
      var suggestedUser: RswiftResources.StringResource { .init(key: "Suggested User", tableName: "Auth", source: source, developmentValue: "Suggested User", comment: nil) }

      /// en translation: Suggestion for you
      ///
      /// Key: Suggestion for you
      ///
      /// Locales: en
      var suggestionForYou: RswiftResources.StringResource { .init(key: "Suggestion for you", tableName: "Auth", source: source, developmentValue: "Suggestion for you", comment: nil) }

      /// en translation: Support
      ///
      /// Key: Support
      ///
      /// Locales: en
      var support: RswiftResources.StringResource { .init(key: "Support", tableName: "Auth", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Switch Camera
      ///
      /// Key: Switch Camera
      ///
      /// Locales: en
      var switchCamera: RswiftResources.StringResource { .init(key: "Switch Camera", tableName: "Auth", source: source, developmentValue: "Switch Camera", comment: nil) }

      /// en translation: TERMS AND SERVICES
      ///
      /// Key: TERMS AND SERVICES
      ///
      /// Locales: en
      var termsandserviceS: RswiftResources.StringResource { .init(key: "TERMS AND SERVICES", tableName: "Auth", source: source, developmentValue: "TERMS AND SERVICES", comment: nil) }

      /// en translation: TERMS OF SERVICE
      ///
      /// Key: TERMS OF SERVICE
      ///
      /// Locales: en
      var termsofservicE: RswiftResources.StringResource { .init(key: "TERMS OF SERVICE", tableName: "Auth", source: source, developmentValue: "TERMS OF SERVICE", comment: nil) }

      /// en translation: Tags
      ///
      /// Key: Tags
      ///
      /// Locales: en
      var tags: RswiftResources.StringResource { .init(key: "Tags", tableName: "Auth", source: source, developmentValue: "Tags", comment: nil) }

      /// en translation: Text
      ///
      /// Key: Text
      ///
      /// Locales: en
      var text: RswiftResources.StringResource { .init(key: "Text", tableName: "Auth", source: source, developmentValue: "Text", comment: nil) }

      /// en translation: Theme
      ///
      /// Key: Theme
      ///
      /// Locales: en
      var theme: RswiftResources.StringResource { .init(key: "Theme", tableName: "Auth", source: source, developmentValue: "Theme", comment: nil) }

      /// en translation: There are no call Logs to clear
      ///
      /// Key: There are no call Logs to clear
      ///
      /// Locales: en
      var thereAreNoCallLogsToClear: RswiftResources.StringResource { .init(key: "There are no call Logs to clear", tableName: "Auth", source: source, developmentValue: "There are no call Logs to clear", comment: nil) }

      /// en translation: There is no Group request
      ///
      /// Key: There is no Group request
      ///
      /// Locales: en
      var thereIsNoGroupRequest: RswiftResources.StringResource { .init(key: "There is no Group request", tableName: "Auth", source: source, developmentValue: "There is no Group request", comment: nil) }

      /// en translation: Title
      ///
      /// Key: Title
      ///
      /// Locales: en
      var title: RswiftResources.StringResource { .init(key: "Title", tableName: "Auth", source: source, developmentValue: "Title", comment: nil) }

      /// en translation: Explore Everything
      ///
      /// Key: Title1
      ///
      /// Locales: en
      var title1: RswiftResources.StringResource { .init(key: "Title1", tableName: "Auth", source: source, developmentValue: "Explore Everything", comment: nil) }

      /// en translation: Liked & Follow
      ///
      /// Key: Title2
      ///
      /// Locales: en
      var title2: RswiftResources.StringResource { .init(key: "Title2", tableName: "Auth", source: source, developmentValue: "Liked & Follow", comment: nil) }

      /// en translation: Save & Favorite
      ///
      /// Key: Title3
      ///
      /// Locales: en
      var title3: RswiftResources.StringResource { .init(key: "Title3", tableName: "Auth", source: source, developmentValue: "Save & Favorite", comment: nil) }

      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Key: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en
      var turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn: RswiftResources.StringResource { .init(key: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", tableName: "Auth", source: source, developmentValue: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", comment: nil) }

      /// en translation: Two-factor Authentication
      ///
      /// Key: Two-factor Authentication
      ///
      /// Locales: en
      var twoFactorAuthentication: RswiftResources.StringResource { .init(key: "Two-factor Authentication", tableName: "Auth", source: source, developmentValue: "Two-factor Authentication", comment: nil) }

      /// en translation: Type Something
      ///
      /// Key: Type Something
      ///
      /// Locales: en
      var typeSomething: RswiftResources.StringResource { .init(key: "Type Something", tableName: "Auth", source: source, developmentValue: "Type Something", comment: nil) }

      /// en translation: Type Something
      ///
      /// Key: Type Someting
      ///
      /// Locales: en
      var typeSometing: RswiftResources.StringResource { .init(key: "Type Someting", tableName: "Auth", source: source, developmentValue: "Type Something", comment: nil) }

      /// en translation: USERS
      ///
      /// Key: USERS
      ///
      /// Locales: en
      var userS: RswiftResources.StringResource { .init(key: "USERS", tableName: "Auth", source: source, developmentValue: "USERS", comment: nil) }

      /// en translation: Unblocked
      ///
      /// Key: Unblocked
      ///
      /// Locales: en
      var unblocked: RswiftResources.StringResource { .init(key: "Unblocked", tableName: "Auth", source: source, developmentValue: "Unblocked", comment: nil) }

      /// en translation: Update Funding
      ///
      /// Key: Update Funding
      ///
      /// Locales: en
      var updateFunding: RswiftResources.StringResource { .init(key: "Update Funding", tableName: "Auth", source: source, developmentValue: "Update Funding", comment: nil) }

      /// en translation: Update Group
      ///
      /// Key: Update Group
      ///
      /// Locales: en
      var updateGroup: RswiftResources.StringResource { .init(key: "Update Group", tableName: "Auth", source: source, developmentValue: "Update Group", comment: nil) }

      /// en translation: User Info
      ///
      /// Key: User Info
      ///
      /// Locales: en
      var userInfo: RswiftResources.StringResource { .init(key: "User Info", tableName: "Auth", source: source, developmentValue: "User Info", comment: nil) }

      /// en translation: User Profile
      ///
      /// Key: User Profile
      ///
      /// Locales: en
      var userProfile: RswiftResources.StringResource { .init(key: "User Profile", tableName: "Auth", source: source, developmentValue: "User Profile", comment: nil) }

      /// en translation: User Suggestion
      ///
      /// Key: User Suggestion
      ///
      /// Locales: en
      var userSuggestion: RswiftResources.StringResource { .init(key: "User Suggestion", tableName: "Auth", source: source, developmentValue: "User Suggestion", comment: nil) }

      /// en translation: User has been blocked!
      ///
      /// Key: User has been blocked!
      ///
      /// Locales: en
      var userHasBeenBlocked: RswiftResources.StringResource { .init(key: "User has been blocked!", tableName: "Auth", source: source, developmentValue: "User has been blocked!", comment: nil) }

      /// en translation: UserName
      ///
      /// Key: UserName
      ///
      /// Locales: en
      var userName: RswiftResources.StringResource { .init(key: "UserName", tableName: "Auth", source: source, developmentValue: "UserName", comment: nil) }

      /// en translation: Verification
      ///
      /// Key: Verification
      ///
      /// Locales: en
      var verification: RswiftResources.StringResource { .init(key: "Verification", tableName: "Auth", source: source, developmentValue: "Verification", comment: nil) }

      /// en translation: Verification of the Profile!
      ///
      /// Key: Verification of the Profile!
      ///
      /// Locales: en
      var verificationOfTheProfile: RswiftResources.StringResource { .init(key: "Verification of the Profile!", tableName: "Auth", source: source, developmentValue: "Verification of the Profile!", comment: nil) }

      /// en translation: Video
      ///
      /// Key: Video
      ///
      /// Locales: en
      var video: RswiftResources.StringResource { .init(key: "Video", tableName: "Auth", source: source, developmentValue: "Video", comment: nil) }

      /// en translation: Video Gallery
      ///
      /// Key: Video Gallery
      ///
      /// Locales: en
      var videoGallery: RswiftResources.StringResource { .init(key: "Video Gallery", tableName: "Auth", source: source, developmentValue: "Video Gallery", comment: nil) }

      /// en translation: Video Mute
      ///
      /// Key: Video Mute
      ///
      /// Locales: en
      var videoMute: RswiftResources.StringResource { .init(key: "Video Mute", tableName: "Auth", source: source, developmentValue: "Video Mute", comment: nil) }

      /// en translation: View
      ///
      /// Key: View
      ///
      /// Locales: en
      var view: RswiftResources.StringResource { .init(key: "View", tableName: "Auth", source: source, developmentValue: "View", comment: nil) }

      /// en translation: View Profile
      ///
      /// Key: View Profile
      ///
      /// Locales: en
      var viewProfile: RswiftResources.StringResource { .init(key: "View Profile", tableName: "Auth", source: source, developmentValue: "View Profile", comment: nil) }

      /// en translation: View all Follow Request
      ///
      /// Key: View all Follow Request
      ///
      /// Locales: en
      var viewAllFollowRequest: RswiftResources.StringResource { .init(key: "View all Follow Request", tableName: "Auth", source: source, developmentValue: "View all Follow Request", comment: nil) }

      /// en translation: ViewMore
      ///
      /// Key: ViewMore
      ///
      /// Locales: en
      var viewMore: RswiftResources.StringResource { .init(key: "ViewMore", tableName: "Auth", source: source, developmentValue: "ViewMore", comment: nil) }

      /// en translation: Views
      ///
      /// Key: Views
      ///
      /// Locales: en
      var views: RswiftResources.StringResource { .init(key: "Views", tableName: "Auth", source: source, developmentValue: "Views", comment: nil) }

      /// en translation: Warning !
      ///
      /// Key: Warning !
      ///
      /// Locales: en
      var warning: RswiftResources.StringResource { .init(key: "Warning !", tableName: "Auth", source: source, developmentValue: "Warning !", comment: nil) }

      /// en translation: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Key: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Locales: en
      var weCannotFindTheKeywordYouAreSearchingFormMaybeALittleSpellingMistake: RswiftResources.StringResource { .init(key: "We cannot find the keyword you are searching form maybe a little spelling mistake?", tableName: "Auth", source: source, developmentValue: "We cannot find the keyword you are searching form maybe a little spelling mistake?", comment: nil) }

      /// en translation: Website
      ///
      /// Key: Website
      ///
      /// Locales: en
      var website: RswiftResources.StringResource { .init(key: "Website", tableName: "Auth", source: source, developmentValue: "Website", comment: nil) }

      /// en translation: Welcome to PixelPhoto
      ///
      /// Key: WelcomeText
      ///
      /// Locales: en
      var welcomeText: RswiftResources.StringResource { .init(key: "WelcomeText", tableName: "Auth", source: source, developmentValue: "Welcome to PixelPhoto", comment: nil) }

      /// en translation: Where do you want to share it?
      ///
      /// Key: Where do you want to share it?
      ///
      /// Locales: en
      var whereDoYouWantToShareIt: RswiftResources.StringResource { .init(key: "Where do you want to share it?", tableName: "Auth", source: source, developmentValue: "Where do you want to share it?", comment: nil) }

      /// en translation: Who can direct message you?
      ///
      /// Key: Who can direct message you?
      ///
      /// Locales: en
      var whoCanDirectMessageYou: RswiftResources.StringResource { .init(key: "Who can direct message you?", tableName: "Auth", source: source, developmentValue: "Who can direct message you?", comment: nil) }

      /// en translation: Who can follow me?
      ///
      /// Key: Who can follow me?
      ///
      /// Locales: en
      var whoCanFollowMe: RswiftResources.StringResource { .init(key: "Who can follow me?", tableName: "Auth", source: source, developmentValue: "Who can follow me?", comment: nil) }

      /// en translation: Who can message me?
      ///
      /// Key: Who can message me?
      ///
      /// Locales: en
      var whoCanMessageMe: RswiftResources.StringResource { .init(key: "Who can message me?", tableName: "Auth", source: source, developmentValue: "Who can message me?", comment: nil) }

      /// en translation: Who can see my birthday?
      ///
      /// Key: Who can see my birthday?
      ///
      /// Locales: en
      var whoCanSeeMyBirthday: RswiftResources.StringResource { .init(key: "Who can see my birthday?", tableName: "Auth", source: source, developmentValue: "Who can see my birthday?", comment: nil) }

      /// en translation: Who can view your profile?
      ///
      /// Key: Who can view your profile?
      ///
      /// Locales: en
      var whoCanViewYourProfile: RswiftResources.StringResource { .init(key: "Who can view your profile?", tableName: "Auth", source: source, developmentValue: "Who can view your profile?", comment: nil) }

      /// en translation: Widthdrawals
      ///
      /// Key: Widthdrawals
      ///
      /// Locales: en
      var widthdrawals: RswiftResources.StringResource { .init(key: "Widthdrawals", tableName: "Auth", source: source, developmentValue: "Widthdrawals", comment: nil) }

      /// en translation: Workspace
      ///
      /// Key: Workspace
      ///
      /// Locales: en
      var workspace: RswiftResources.StringResource { .init(key: "Workspace", tableName: "Auth", source: source, developmentValue: "Workspace", comment: nil) }

      /// en translation: YES
      ///
      /// Key: YES
      ///
      /// Locales: en
      var yeS: RswiftResources.StringResource { .init(key: "YES", tableName: "Auth", source: source, developmentValue: "YES", comment: nil) }

      /// en translation: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Key: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en
      var yesIWanToDeletePermanentlyFromPixelPhotoAccount: RswiftResources.StringResource { .init(key: "Yes, I wan to delete permanently from PixelPhoto Account.", tableName: "Auth", source: source, developmentValue: "Yes, I wan to delete permanently from PixelPhoto Account.", comment: nil) }

      /// en translation: Yes, I want to delete permanently from PixelPhoto Account.
      ///
      /// Key: Yes, I want to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en
      var yesIWantToDeletePermanentlyFromPixelPhotoAccount: RswiftResources.StringResource { .init(key: "Yes, I want to delete permanently from PixelPhoto Account.", tableName: "Auth", source: source, developmentValue: "Yes, I want to delete permanently from PixelPhoto Account.", comment: nil) }

      /// en translation: You
      ///
      /// Key: You
      ///
      /// Locales: en
      var you: RswiftResources.StringResource { .init(key: "You", tableName: "Auth", source: source, developmentValue: "You", comment: nil) }

      /// en translation: You cannot block this user because it is administrator
      ///
      /// Key: You cannot block this user because it is administrator
      ///
      /// Locales: en
      var youCannotBlockThisUserBecauseItIsAdministrator: RswiftResources.StringResource { .init(key: "You cannot block this user because it is administrator", tableName: "Auth", source: source, developmentValue: "You cannot block this user because it is administrator", comment: nil) }

      /// en translation: Your Message here...
      ///
      /// Key: Your Message here...
      ///
      /// Locales: en
      var yourMessageHere: RswiftResources.StringResource { .init(key: "Your Message here...", tableName: "Auth", source: source, developmentValue: "Your Message here...", comment: nil) }

      /// en translation: Your Photo
      ///
      /// Key: Your Photo
      ///
      /// Locales: en
      var yourPhoto: RswiftResources.StringResource { .init(key: "Your Photo", tableName: "Auth", source: source, developmentValue: "Your Photo", comment: nil) }

      /// en translation: Your Story
      ///
      /// Key: Your Story
      ///
      /// Locales: en
      var yourStory: RswiftResources.StringResource { .init(key: "Your Story", tableName: "Auth", source: source, developmentValue: "Your Story", comment: nil) }

      /// en translation: Your balance is $0, minimum withdrawal request is $50
      ///
      /// Key: Your balance is $0, minimum withdrawal request is $50
      ///
      /// Locales: en
      var yourBalanceIs0MinimumWithdrawalRequestIs50: RswiftResources.StringResource { .init(key: "Your balance is $0, minimum withdrawal request is $50", tableName: "Auth", source: source, developmentValue: "Your balance is $0, minimum withdrawal request is $50", comment: nil) }

      /// en translation: Your facebook profile url
      ///
      /// Key: Your facebook profile url
      ///
      /// Locales: en
      var yourFacebookProfileUrl: RswiftResources.StringResource { .init(key: "Your facebook profile url", tableName: "Auth", source: source, developmentValue: "Your facebook profile url", comment: nil) }

      /// en translation: Your google-plus profile url
      ///
      /// Key: Your google-plus profile url
      ///
      /// Locales: en
      var yourGooglePlusProfileUrl: RswiftResources.StringResource { .init(key: "Your google-plus profile url", tableName: "Auth", source: source, developmentValue: "Your google-plus profile url", comment: nil) }

      /// en translation: Your report has been sent
      ///
      /// Key: Your report has been sent
      ///
      /// Locales: en
      var yourReportHasBeenSent: RswiftResources.StringResource { .init(key: "Your report has been sent", tableName: "Auth", source: source, developmentValue: "Your report has been sent", comment: nil) }

      /// en translation: Your twitter profile url
      ///
      /// Key: Your twitter profile url
      ///
      /// Locales: en
      var yourTwitterProfileUrl: RswiftResources.StringResource { .init(key: "Your twitter profile url", tableName: "Auth", source: source, developmentValue: "Your twitter profile url", comment: nil) }

      /// en translation: birthday Privacy
      ///
      /// Key: birthday Privacy
      ///
      /// Locales: en
      var birthdayPrivacy: RswiftResources.StringResource { .init(key: "birthday Privacy", tableName: "Auth", source: source, developmentValue: "birthday Privacy", comment: nil) }

      /// en translation: count
      ///
      /// Key: count
      ///
      /// Locales: en
      var count: RswiftResources.StringResource { .init(key: "count", tableName: "Auth", source: source, developmentValue: "count", comment: nil) }

      /// en translation: Start to follow you
      ///
      /// Key: followed you
      ///
      /// Locales: en
      var followedYou: RswiftResources.StringResource { .init(key: "followed you", tableName: "Auth", source: source, developmentValue: "Start to follow you", comment: nil) }

      /// en translation: get Notification when you receive messages
      ///
      /// Key: get Notification when you receive messages
      ///
      /// Locales: en
      var getNotificationWhenYouReceiveMessages: RswiftResources.StringResource { .init(key: "get Notification when you receive messages", tableName: "Auth", source: source, developmentValue: "get Notification when you receive messages", comment: nil) }

      /// en translation: liked your comment
      ///
      /// Key: liked your post
      ///
      /// Locales: en
      var likedYourPost: RswiftResources.StringResource { .init(key: "liked your post", tableName: "Auth", source: source, developmentValue: "liked your comment", comment: nil) }

      /// en translation: mentioned you in a comment
      ///
      /// Key: mentioned you in a comment
      ///
      /// Locales: en
      var mentionedYouInAComment: RswiftResources.StringResource { .init(key: "mentioned you in a comment", tableName: "Auth", source: source, developmentValue: "mentioned you in a comment", comment: nil) }

      /// en translation: mentioned you in a post
      ///
      /// Key: mentioned you in a post
      ///
      /// Locales: en
      var mentionedYouInAPost: RswiftResources.StringResource { .init(key: "mentioned you in a post", tableName: "Auth", source: source, developmentValue: "mentioned you in a post", comment: nil) }

      /// en translation: no likes yet
      ///
      /// Key: no likes yet
      ///
      /// Locales: en
      var noLikesYet: RswiftResources.StringResource { .init(key: "no likes yet", tableName: "Auth", source: source, developmentValue: "no likes yet", comment: nil) }

      /// en translation: sells
      ///
      /// Key: sells
      ///
      /// Locales: en
      var sells: RswiftResources.StringResource { .init(key: "sells", tableName: "Auth", source: source, developmentValue: "sells", comment: nil) }

      /// en translation: someone is calling you
      ///
      /// Key: someone is calling you
      ///
      /// Locales: en
      var someoneIsCallingYou: RswiftResources.StringResource { .init(key: "someone is calling you", tableName: "Auth", source: source, developmentValue: "someone is calling you", comment: nil) }

      /// en translation: something to show
      ///
      /// Key: something to show
      ///
      /// Locales: en
      var somethingToShow: RswiftResources.StringResource { .init(key: "something to show", tableName: "Auth", source: source, developmentValue: "something to show", comment: nil) }
    }

    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 465 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation:  A verification link has been sent to your email
      ///
      /// Key: A verification link has been sent to your email
      ///
      /// Locales: en, tr
      var aVerificationLinkHasBeenSentToYourEmail: RswiftResources.StringResource { .init(key: "A verification link has been sent to your email", tableName: "Localizable", source: source, developmentValue: "\nA verification link has been sent to your email", comment: nil) }

      /// en translation: ABOUT
      ///
      /// Key: ABOUT
      ///
      /// Locales: en, tr
      var abouT: RswiftResources.StringResource { .init(key: "ABOUT", tableName: "Localizable", source: source, developmentValue: "ABOUT", comment: nil) }

      /// en translation: APPLY FILTER
      ///
      /// Key: APPLY FILTER
      ///
      /// Locales: en, tr
      var applyfilteR: RswiftResources.StringResource { .init(key: "APPLY FILTER", tableName: "Localizable", source: source, developmentValue: "APPLY FILTER", comment: nil) }

      /// en translation: About
      ///
      /// Key: About
      ///
      /// Locales: en, tr
      var about: RswiftResources.StringResource { .init(key: "About", tableName: "Localizable", source: source, developmentValue: "About", comment: nil) }

      /// en translation: About us
      ///
      /// Key: About us
      ///
      /// Locales: en, tr
      var aboutUs: RswiftResources.StringResource { .init(key: "About us", tableName: "Localizable", source: source, developmentValue: "About us", comment: nil) }

      /// en translation: About you
      ///
      /// Key: About you
      ///
      /// Locales: en, tr
      var aboutYou: RswiftResources.StringResource { .init(key: "About you", tableName: "Localizable", source: source, developmentValue: "About you", comment: nil) }

      /// en translation: Account Privacy
      ///
      /// Key: Account Privacy
      ///
      /// Locales: en, tr
      var accountPrivacy: RswiftResources.StringResource { .init(key: "Account Privacy", tableName: "Localizable", source: source, developmentValue: "Account Privacy", comment: nil) }

      /// en translation: Account and Profile
      ///
      /// Key: Account and Profile
      ///
      /// Locales: en, tr
      var accountAndProfile: RswiftResources.StringResource { .init(key: "Account and Profile", tableName: "Localizable", source: source, developmentValue: "Account and Profile", comment: nil) }

      /// en translation: ACTIVITES
      ///
      /// Key: Activites
      ///
      /// Locales: en, tr
      var activites: RswiftResources.StringResource { .init(key: "Activites", tableName: "Localizable", source: source, developmentValue: "ACTIVITES", comment: nil) }

      /// en translation: Add
      ///
      /// Key: Add
      ///
      /// Locales: en, tr
      var add: RswiftResources.StringResource { .init(key: "Add", tableName: "Localizable", source: source, developmentValue: "Add", comment: nil) }

      /// en translation: Add Participants
      ///
      /// Key: Add Participants
      ///
      /// Locales: en, tr
      var addParticipants: RswiftResources.StringResource { .init(key: "Add Participants", tableName: "Localizable", source: source, developmentValue: "Add Participants", comment: nil) }

      /// en translation: Add Story
      ///
      /// Key: Add Story
      ///
      /// Locales: en, tr
      var addStory: RswiftResources.StringResource { .init(key: "Add Story", tableName: "Localizable", source: source, developmentValue: "Add Story", comment: nil) }

      /// en translation: Add To
      ///
      /// Key: Add To
      ///
      /// Locales: en, tr
      var addTo: RswiftResources.StringResource { .init(key: "Add To", tableName: "Localizable", source: source, developmentValue: "Add To", comment: nil) }

      /// en translation: Add code number
      ///
      /// Key: Add code number
      ///
      /// Locales: en, tr
      var addCodeNumber: RswiftResources.StringResource { .init(key: "Add code number", tableName: "Localizable", source: source, developmentValue: "Add code number", comment: nil) }

      /// en translation: Add new Story
      ///
      /// Key: Add new Story
      ///
      /// Locales: en, tr
      var addNewStory: RswiftResources.StringResource { .init(key: "Add new Story", tableName: "Localizable", source: source, developmentValue: "Add new Story", comment: nil) }

      /// en translation: Add post caption. #hashtag..@mentioned?
      ///
      /// Key: Add post caption. #hashtag..@mentioned?
      ///
      /// Locales: en, tr
      var addPostCaptionHashtagMentioned: RswiftResources.StringResource { .init(key: "Add post caption. #hashtag..@mentioned?", tableName: "Localizable", source: source, developmentValue: "Add post caption. #hashtag..@mentioned?", comment: nil) }

      /// en translation: Add to Playlist
      ///
      /// Key: Add to Playlist
      ///
      /// Locales: en, tr
      var addToPlaylist: RswiftResources.StringResource { .init(key: "Add to Playlist", tableName: "Localizable", source: source, developmentValue: "Add to Playlist", comment: nil) }

      /// en translation: Add to Post
      ///
      /// Key: Add to Post
      ///
      /// Locales: en, tr
      var addToPost: RswiftResources.StringResource { .init(key: "Add to Post", tableName: "Localizable", source: source, developmentValue: "Add to Post", comment: nil) }

      /// en translation: Add to Watch Later
      ///
      /// Key: Add to Watch Later
      ///
      /// Locales: en, tr
      var addToWatchLater: RswiftResources.StringResource { .init(key: "Add to Watch Later", tableName: "Localizable", source: source, developmentValue: "Add to Watch Later", comment: nil) }

      /// en translation: AddFriend
      ///
      /// Key: AddFriend
      ///
      /// Locales: en, tr
      var addFriend: RswiftResources.StringResource { .init(key: "AddFriend", tableName: "Localizable", source: source, developmentValue: "AddFriend", comment: nil) }

      /// en translation: Added to watch later
      ///
      /// Key: Added to watch later
      ///
      /// Locales: en, tr
      var addedToWatchLater: RswiftResources.StringResource { .init(key: "Added to watch later", tableName: "Localizable", source: source, developmentValue: "Added to watch later", comment: nil) }

      /// en translation: All Time
      ///
      /// Key: All Time
      ///
      /// Locales: en, tr
      var allTime: RswiftResources.StringResource { .init(key: "All Time", tableName: "Localizable", source: source, developmentValue: "All Time", comment: nil) }

      /// en translation: Already added in watch later
      ///
      /// Key: Already added in watch later
      ///
      /// Locales: en, tr
      var alreadyAddedInWatchLater: RswiftResources.StringResource { .init(key: "Already added in watch later", tableName: "Localizable", source: source, developmentValue: "Already added in watch later", comment: nil) }

      /// en translation: Amount
      ///
      /// Key: Amount
      ///
      /// Locales: en, tr
      var amount: RswiftResources.StringResource { .init(key: "Amount", tableName: "Localizable", source: source, developmentValue: "Amount", comment: nil) }

      /// en translation: Amount shouldn't be less than 50.
      ///
      /// Key: Amount shouldn't be less than 50.
      ///
      /// Locales: en, tr
      var amountShouldnTBeLessThan50: RswiftResources.StringResource { .init(key: "Amount shouldn't be less than 50.", tableName: "Localizable", source: source, developmentValue: "Amount shouldn't be less than 50.", comment: nil) }

      /// en translation: Answer
      ///
      /// Key: Answer
      ///
      /// Locales: en, tr
      var answer: RswiftResources.StringResource { .init(key: "Answer", tableName: "Localizable", source: source, developmentValue: "Answer", comment: nil) }

      /// en translation: Pixel Photo
      ///
      /// Key: App Name
      ///
      /// Locales: en, tr
      var appName: RswiftResources.StringResource { .init(key: "App Name", tableName: "Localizable", source: source, developmentValue: "Pixel Photo", comment: nil) }

      /// en translation: Application will close to change the language
      ///
      /// Key: Application will close to change the language
      ///
      /// Locales: en, tr
      var applicationWillCloseToChangeTheLanguage: RswiftResources.StringResource { .init(key: "Application will close to change the language", tableName: "Localizable", source: source, developmentValue: "Application will close to change the language", comment: nil) }

      /// en translation: Apply Filter
      ///
      /// Key: Apply Filter
      ///
      /// Locales: en, tr
      var applyFilter: RswiftResources.StringResource { .init(key: "Apply Filter", tableName: "Localizable", source: source, developmentValue: "Apply Filter", comment: nil) }

      /// en translation: Are you sure want to delete this post
      ///
      /// Key: Are you sure want to delete this post
      ///
      /// Locales: en, tr
      var areYouSureWantToDeleteThisPost: RswiftResources.StringResource { .init(key: "Are you sure want to delete this post", tableName: "Localizable", source: source, developmentValue: "Are you sure want to delete this post", comment: nil) }

      /// en translation: Are you sure you want to delete Account?
      ///
      /// Key: Are you sure you want to delete Account?
      ///
      /// Locales: en, tr
      var areYouSureYouWantToDeleteAccount: RswiftResources.StringResource { .init(key: "Are you sure you want to delete Account?", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to delete Account?", comment: nil) }

      /// en translation: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Key: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Locales: en, tr
      var areYouSureYouWantToDeleteTheAccountFromWoWonderMessenger: RswiftResources.StringResource { .init(key: "Are you sure you want to delete the account from WoWonder Messenger", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to delete the account from WoWonder Messenger", comment: nil) }

      /// en translation: Are you sure you want to logout?
      ///
      /// Key: Are you sure you want to logout?
      ///
      /// Locales: en, tr
      var areYouSureYouWantToLogout: RswiftResources.StringResource { .init(key: "Are you sure you want to logout?", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to logout?", comment: nil) }

      /// en translation: Avatar&Cover
      ///
      /// Key: Avatar&Cover
      ///
      /// Locales: en, tr
      var avatarCover: RswiftResources.StringResource { .init(key: "Avatar&Cover", tableName: "Localizable", source: source, developmentValue: "Avatar&Cover", comment: nil) }

      /// en translation: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Key: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Locales: en, tr
      var byregisteringyouagreetoouR: RswiftResources.StringResource { .init(key: "BY REGISTERING YOU AGREE TO OUR", tableName: "Localizable", source: source, developmentValue: "BY REGISTERING YOU AGREE TO OUR", comment: nil) }

      /// en translation: Block
      ///
      /// Key: Block
      ///
      /// Locales: en, tr
      var block: RswiftResources.StringResource { .init(key: "Block", tableName: "Localizable", source: source, developmentValue: "Block", comment: nil) }

      /// en translation: Block User
      ///
      /// Key: Block User
      ///
      /// Locales: en, tr
      var blockUser: RswiftResources.StringResource { .init(key: "Block User", tableName: "Localizable", source: source, developmentValue: "Block User", comment: nil) }

      /// en translation: Block Users
      ///
      /// Key: Block Users
      ///
      /// Locales: en, tr
      var blockUsers: RswiftResources.StringResource { .init(key: "Block Users", tableName: "Localizable", source: source, developmentValue: "Block Users", comment: nil) }

      /// en translation: Blocked User
      ///
      /// Key: Blocked User
      ///
      /// Locales: en, tr
      var blockedUser: RswiftResources.StringResource { .init(key: "Blocked User", tableName: "Localizable", source: source, developmentValue: "Blocked User", comment: nil) }

      /// en translation: Blocked Users
      ///
      /// Key: Blocked Users
      ///
      /// Locales: en, tr
      var blockedUsers: RswiftResources.StringResource { .init(key: "Blocked Users", tableName: "Localizable", source: source, developmentValue: "Blocked Users", comment: nil) }

      /// en translation: Business Account
      ///
      /// Key: Business Account
      ///
      /// Locales: en, tr
      var businessAccount: RswiftResources.StringResource { .init(key: "Business Account", tableName: "Localizable", source: source, developmentValue: "Business Account", comment: nil) }

      /// en translation: Business Name
      ///
      /// Key: Business Name
      ///
      /// Locales: en, tr
      var businessName: RswiftResources.StringResource { .init(key: "Business Name", tableName: "Localizable", source: source, developmentValue: "Business Name", comment: nil) }

      /// en translation: Buy
      ///
      /// Key: Buy
      ///
      /// Locales: en, tr
      var buy: RswiftResources.StringResource { .init(key: "Buy", tableName: "Localizable", source: source, developmentValue: "Buy", comment: nil) }

      /// en translation: By registering you agree to our terms of service
      ///
      /// Key: By registering you agree to our terms of service
      ///
      /// Locales: en, tr
      var byRegisteringYouAgreeToOurTermsOfService: RswiftResources.StringResource { .init(key: "By registering you agree to our terms of service", tableName: "Localizable", source: source, developmentValue: "By registering you agree to our terms of service", comment: nil) }

      /// en translation: CANCEL
      ///
      /// Key: CANCEL
      ///
      /// Locales: en, tr
      var canceL: RswiftResources.StringResource { .init(key: "CANCEL", tableName: "Localizable", source: source, developmentValue: "CANCEL", comment: nil) }

      /// en translation: COMMENTS
      ///
      /// Key: COMMENTS
      ///
      /// Locales: en, tr
      var commentS: RswiftResources.StringResource { .init(key: "COMMENTS", tableName: "Localizable", source: source, developmentValue: "COMMENTS", comment: nil) }

      /// en translation: CREATE AN ACCOUNT
      ///
      /// Key: CREATE AN ACCOUNT
      ///
      /// Locales: en, tr
      var createanaccounT: RswiftResources.StringResource { .init(key: "CREATE AN ACCOUNT", tableName: "Localizable", source: source, developmentValue: "CREATE AN ACCOUNT", comment: nil) }

      /// en translation: Cache Removed
      ///
      /// Key: Cache Removed
      ///
      /// Locales: en, tr
      var cacheRemoved: RswiftResources.StringResource { .init(key: "Cache Removed", tableName: "Localizable", source: source, developmentValue: "Cache Removed", comment: nil) }

      /// en translation: Call Logs Cleared
      ///
      /// Key: Call Logs Cleared
      ///
      /// Locales: en, tr
      var callLogsCleared: RswiftResources.StringResource { .init(key: "Call Logs Cleared", tableName: "Localizable", source: source, developmentValue: "Call Logs Cleared", comment: nil) }

      /// en translation: Calling
      ///
      /// Key: Calling
      ///
      /// Locales: en, tr
      var calling: RswiftResources.StringResource { .init(key: "Calling", tableName: "Localizable", source: source, developmentValue: "Calling", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: Camera
      ///
      /// Locales: en, tr
      var camera: RswiftResources.StringResource { .init(key: "Camera", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: en, tr
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Categories
      ///
      /// Key: Categories
      ///
      /// Locales: en, tr
      var categories: RswiftResources.StringResource { .init(key: "Categories", tableName: "Localizable", source: source, developmentValue: "Categories", comment: nil) }

      /// en translation: Category
      ///
      /// Key: Category
      ///
      /// Locales: en, tr
      var category: RswiftResources.StringResource { .init(key: "Category", tableName: "Localizable", source: source, developmentValue: "Category", comment: nil) }

      /// en translation: Change Password
      ///
      /// Key: Change Password
      ///
      /// Locales: en, tr
      var changePassword: RswiftResources.StringResource { .init(key: "Change Password", tableName: "Localizable", source: source, developmentValue: "Change Password", comment: nil) }

      /// en translation: Change image avatar
      ///
      /// Key: Change image avatar
      ///
      /// Locales: en, tr
      var changeImageAvatar: RswiftResources.StringResource { .init(key: "Change image avatar", tableName: "Localizable", source: source, developmentValue: "Change image avatar", comment: nil) }

      /// en translation: Change image cover
      ///
      /// Key: Change image cover
      ///
      /// Locales: en, tr
      var changeImageCover: RswiftResources.StringResource { .init(key: "Change image cover", tableName: "Localizable", source: source, developmentValue: "Change image cover", comment: nil) }

      /// en translation: Change your password
      ///
      /// Key: Change your password
      ///
      /// Locales: en, tr
      var changeYourPassword: RswiftResources.StringResource { .init(key: "Change your password", tableName: "Localizable", source: source, developmentValue: "Change your password", comment: nil) }

      /// en translation: Chats
      ///
      /// Key: Chats
      ///
      /// Locales: en, tr
      var chats: RswiftResources.StringResource { .init(key: "Chats", tableName: "Localizable", source: source, developmentValue: "Chats", comment: nil) }

      /// en translation: Please , confirm checkbox to process this action
      ///
      /// Key: Check Delete
      ///
      /// Locales: en, tr
      var checkDelete: RswiftResources.StringResource { .init(key: "Check Delete", tableName: "Localizable", source: source, developmentValue: "Please , confirm checkbox to process this action", comment: nil) }

      /// en translation: Chose Image
      ///
      /// Key: Chose image
      ///
      /// Locales: en, tr
      var choseImage: RswiftResources.StringResource { .init(key: "Chose image", tableName: "Localizable", source: source, developmentValue: "Chose Image", comment: nil) }

      /// en translation: Clear watch history
      ///
      /// Key: Clear
      ///
      /// Locales: en, tr
      var clear: RswiftResources.StringResource { .init(key: "Clear", tableName: "Localizable", source: source, developmentValue: "Clear watch history", comment: nil) }

      /// en translation: Clear Cache
      ///
      /// Key: Clear Cache
      ///
      /// Locales: en, tr
      var clearCache: RswiftResources.StringResource { .init(key: "Clear Cache", tableName: "Localizable", source: source, developmentValue: "Clear Cache", comment: nil) }

      /// en translation: Clear Chat
      ///
      /// Key: Clear Chat
      ///
      /// Locales: en, tr
      var clearChat: RswiftResources.StringResource { .init(key: "Clear Chat", tableName: "Localizable", source: source, developmentValue: "Clear Chat", comment: nil) }

      /// en translation: Clear videos watched while signed out on this device. This will also clear your watch history
      ///
      /// Key: Clear videos watched while signed out on this device. This will also clear your watch history
      ///
      /// Locales: en, tr
      var clearVideosWatchedWhileSignedOutOnThisDeviceThisWillAlsoClearYourWatchHistory: RswiftResources.StringResource { .init(key: "Clear videos watched while signed out on this device. This will also clear your watch history", tableName: "Localizable", source: source, developmentValue: "Clear videos watched while signed out on this device. This will also clear your watch history", comment: nil) }

      /// en translation: Close
      ///
      /// Key: Close
      ///
      /// Locales: en, tr
      var close: RswiftResources.StringResource { .init(key: "Close", tableName: "Localizable", source: source, developmentValue: "Close", comment: nil) }

      /// en translation: Comment
      ///
      /// Key: Comment
      ///
      /// Locales: en, tr
      var comment: RswiftResources.StringResource { .init(key: "Comment", tableName: "Localizable", source: source, developmentValue: "Comment", comment: nil) }

      /// en translation: Commented on my post
      ///
      /// Key: Commented on my post
      ///
      /// Locales: en, tr
      var commentedOnMyPost: RswiftResources.StringResource { .init(key: "Commented on my post", tableName: "Localizable", source: source, developmentValue: "Commented on my post", comment: nil) }

      /// en translation: Comments
      ///
      /// Key: Comments
      ///
      /// Locales: en, tr
      var comments: RswiftResources.StringResource { .init(key: "Comments", tableName: "Localizable", source: source, developmentValue: "Comments", comment: nil) }

      /// en translation: Confirm Password
      ///
      /// Key: Confirm Password
      ///
      /// Locales: en, tr
      var confirmPassword: RswiftResources.StringResource { .init(key: "Confirm Password", tableName: "Localizable", source: source, developmentValue: "Confirm Password", comment: nil) }

      /// en translation: Continue with Facebook
      ///
      /// Key: Continue with Facebook
      ///
      /// Locales: en, tr
      var continueWithFacebook: RswiftResources.StringResource { .init(key: "Continue with Facebook", tableName: "Localizable", source: source, developmentValue: "Continue with Facebook", comment: nil) }

      /// en translation: Conversation Tones
      ///
      /// Key: Conversation Tones
      ///
      /// Locales: en
      var conversationTones: RswiftResources.StringResource { .init(key: "Conversation Tones", tableName: "Localizable", source: source, developmentValue: "Conversation Tones", comment: nil) }

      /// en translation: Copied
      ///
      /// Key: Copied
      ///
      /// Locales: en, tr
      var copied: RswiftResources.StringResource { .init(key: "Copied", tableName: "Localizable", source: source, developmentValue: "Copied", comment: nil) }

      /// en translation: Copy
      ///
      /// Key: Copy
      ///
      /// Locales: en, tr
      var copy: RswiftResources.StringResource { .init(key: "Copy", tableName: "Localizable", source: source, developmentValue: "Copy", comment: nil) }

      /// en translation: Copy Link to profile
      ///
      /// Key: Copy Link to profile
      ///
      /// Locales: en, tr
      var copyLinkToProfile: RswiftResources.StringResource { .init(key: "Copy Link to profile", tableName: "Localizable", source: source, developmentValue: "Copy Link to profile", comment: nil) }

      /// en translation: Copy to clipboard
      ///
      /// Key: Copy to clipboard
      ///
      /// Locales: en, tr
      var copyToClipboard: RswiftResources.StringResource { .init(key: "Copy to clipboard", tableName: "Localizable", source: source, developmentValue: "Copy to clipboard", comment: nil) }

      /// en translation: Country
      ///
      /// Key: Country
      ///
      /// Locales: en, tr
      var country: RswiftResources.StringResource { .init(key: "Country", tableName: "Localizable", source: source, developmentValue: "Country", comment: nil) }

      /// en translation: Create
      ///
      /// Key: Create
      ///
      /// Locales: en, tr
      var create: RswiftResources.StringResource { .init(key: "Create", tableName: "Localizable", source: source, developmentValue: "Create", comment: nil) }

      /// en translation: Create Playlist
      ///
      /// Key: Create Playlist
      ///
      /// Locales: en, tr
      var createPlaylist: RswiftResources.StringResource { .init(key: "Create Playlist", tableName: "Localizable", source: source, developmentValue: "Create Playlist", comment: nil) }

      /// en translation: Current Password
      ///
      /// Key: Current Password
      ///
      /// Locales: en, tr
      var currentPassword: RswiftResources.StringResource { .init(key: "Current Password", tableName: "Localizable", source: source, developmentValue: "Current Password", comment: nil) }

      /// en translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Key: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: en, tr
      var donthaveanaccounT: RswiftResources.StringResource { .init(key: "DON'T HAVE AN ACCOUNT?", tableName: "Localizable", source: source, developmentValue: "DON'T HAVE AN ACCOUNT?", comment: nil) }

      /// en translation: Dark mode
      ///
      /// Key: Dark mode
      ///
      /// Locales: en, tr
      var darkMode: RswiftResources.StringResource { .init(key: "Dark mode", tableName: "Localizable", source: source, developmentValue: "Dark mode", comment: nil) }

      /// en translation: Date
      ///
      /// Key: Date
      ///
      /// Locales: en, tr
      var date: RswiftResources.StringResource { .init(key: "Date", tableName: "Localizable", source: source, developmentValue: "Date", comment: nil) }

      /// en translation: Decline
      ///
      /// Key: Decline
      ///
      /// Locales: en, tr
      var decline: RswiftResources.StringResource { .init(key: "Decline", tableName: "Localizable", source: source, developmentValue: "Decline", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: Delete
      ///
      /// Locales: en, tr
      var delete: RswiftResources.StringResource { .init(key: "Delete", tableName: "Localizable", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Delete Account
      ///
      /// Key: Delete Account
      ///
      /// Locales: en, tr
      var deleteAccount: RswiftResources.StringResource { .init(key: "Delete Account", tableName: "Localizable", source: source, developmentValue: "Delete Account", comment: nil) }

      /// en translation: Delete Group
      ///
      /// Key: Delete Group
      ///
      /// Locales: en, tr
      var deleteGroup: RswiftResources.StringResource { .init(key: "Delete Group", tableName: "Localizable", source: source, developmentValue: "Delete Group", comment: nil) }

      /// en translation: Delete Post
      ///
      /// Key: Delete Post
      ///
      /// Locales: en, tr
      var deletePost: RswiftResources.StringResource { .init(key: "Delete Post", tableName: "Localizable", source: source, developmentValue: "Delete Post", comment: nil) }

      /// en translation: Delete This Post
      ///
      /// Key: Delete This Post
      ///
      /// Locales: en, tr
      var deleteThisPost: RswiftResources.StringResource { .init(key: "Delete This Post", tableName: "Localizable", source: source, developmentValue: "Delete This Post", comment: nil) }

      /// en translation: Share images, video, link, Gifs and Stories with who you love and create popular hashtag
      ///
      /// Key: Desc1
      ///
      /// Locales: en, tr
      var desc1: RswiftResources.StringResource { .init(key: "Desc1", tableName: "Localizable", source: source, developmentValue: "Share images, video, link, Gifs and Stories with who you love and create popular hashtag", comment: nil) }

      /// en translation: Just like the photos wich you found interesting and become a follower of fampus people
      ///
      /// Key: Desc2
      ///
      /// Locales: en, tr
      var desc2: RswiftResources.StringResource { .init(key: "Desc2", tableName: "Localizable", source: source, developmentValue: "Just like the photos wich you found interesting and become a follower of fampus people", comment: nil) }

      /// en translation: Immediately save images or video to check them later anytime and in every place
      ///
      /// Key: Desc3
      ///
      /// Locales: en, tr
      var desc3: RswiftResources.StringResource { .init(key: "Desc3", tableName: "Localizable", source: source, developmentValue: "Immediately save images or video to check them later anytime and in every place", comment: nil) }

      /// en translation: Dicover more features with Playtube Pro Package
      ///
      /// Key: Dicover more features with Playtube Pro Package
      ///
      /// Locales: en, tr
      var dicoverMoreFeaturesWithPlaytubeProPackage: RswiftResources.StringResource { .init(key: "Dicover more features with Playtube Pro Package", tableName: "Localizable", source: source, developmentValue: "Dicover more features with Playtube Pro Package", comment: nil) }

      /// en translation: Disable
      ///
      /// Key: Disable
      ///
      /// Locales: en, tr
      var disable: RswiftResources.StringResource { .init(key: "Disable", tableName: "Localizable", source: source, developmentValue: "Disable", comment: nil) }

      /// en translation: Disliked
      ///
      /// Key: Disliked
      ///
      /// Locales: en, tr
      var disliked: RswiftResources.StringResource { .init(key: "Disliked", tableName: "Localizable", source: source, developmentValue: "Disliked", comment: nil) }

      /// en translation: Display
      ///
      /// Key: Display
      ///
      /// Locales: en, tr
      var display: RswiftResources.StringResource { .init(key: "Display", tableName: "Localizable", source: source, developmentValue: "Display", comment: nil) }

      /// en translation: Display your app language
      ///
      /// Key: Display your app language
      ///
      /// Locales: en, tr
      var displayYourAppLanguage: RswiftResources.StringResource { .init(key: "Display your app language", tableName: "Localizable", source: source, developmentValue: "Display your app language", comment: nil) }

      /// en translation: Dont worry type your email here and we will recover it for you.
      ///
      /// Key: Dont worry type your email here and we will recover it for you.
      ///
      /// Locales: en, tr
      var dontWorryTypeYourEmailHereAndWeWillRecoverItForYou: RswiftResources.StringResource { .init(key: "Dont worry type your email here and we will recover it for you.", tableName: "Localizable", source: source, developmentValue: "Dont worry type your email here and we will recover it for you.", comment: nil) }

      /// en translation: Downloads
      ///
      /// Key: Downloads
      ///
      /// Locales: en, tr
      var downloads: RswiftResources.StringResource { .init(key: "Downloads", tableName: "Localizable", source: source, developmentValue: "Downloads", comment: nil) }

      /// en translation: Earn upto $0.10 for each user your refer to us!
      ///
      /// Key: Earn upto $0.10 for each user your refer to us!
      ///
      /// Locales: en, tr
      var earnUpto010ForEachUserYourReferToUs: RswiftResources.StringResource { .init(key: "Earn upto $0.10 for each user your refer to us!", tableName: "Localizable", source: source, developmentValue: "Earn upto $0.10 for each user your refer to us!", comment: nil) }

      /// en translation: Edit
      ///
      /// Key: Edit
      ///
      /// Locales: en, tr
      var edit: RswiftResources.StringResource { .init(key: "Edit", tableName: "Localizable", source: source, developmentValue: "Edit", comment: nil) }

      /// en translation: Edit My Channel
      ///
      /// Key: Edit My Channel
      ///
      /// Locales: en, tr
      var editMyChannel: RswiftResources.StringResource { .init(key: "Edit My Channel", tableName: "Localizable", source: source, developmentValue: "Edit My Channel", comment: nil) }

      /// en translation: Edit Post
      ///
      /// Key: Edit Post
      ///
      /// Locales: en, tr
      var editPost: RswiftResources.StringResource { .init(key: "Edit Post", tableName: "Localizable", source: source, developmentValue: "Edit Post", comment: nil) }

      /// en translation: Edit Profile
      ///
      /// Key: Edit Profile
      ///
      /// Locales: en, tr
      var editProfile: RswiftResources.StringResource { .init(key: "Edit Profile", tableName: "Localizable", source: source, developmentValue: "Edit Profile", comment: nil) }

      /// en translation: Edit Profile and avatar
      ///
      /// Key: Edit Profile and avatar
      ///
      /// Locales: en, tr
      var editProfileAndAvatar: RswiftResources.StringResource { .init(key: "Edit Profile and avatar", tableName: "Localizable", source: source, developmentValue: "Edit Profile and avatar", comment: nil) }

      /// en translation: Email
      ///
      /// Key: Email
      ///
      /// Locales: en, tr
      var email: RswiftResources.StringResource { .init(key: "Email", tableName: "Localizable", source: source, developmentValue: "Email", comment: nil) }

      /// en translation: Email is badly formatted.
      ///
      /// Key: Email is badly formatted.
      ///
      /// Locales: en, tr
      var emailIsBadlyFormatted: RswiftResources.StringResource { .init(key: "Email is badly formatted.", tableName: "Localizable", source: source, developmentValue: "Email is badly formatted.", comment: nil) }

      /// en translation: Email o username
      ///
      /// Key: Email or Username
      ///
      /// Locales: en, tr
      var emailOrUsername: RswiftResources.StringResource { .init(key: "Email or Username", tableName: "Localizable", source: source, developmentValue: "Email o username", comment: nil) }

      /// en translation: Email verification
      ///
      /// Key: Email verification
      ///
      /// Locales: en, tr
      var emailVerification: RswiftResources.StringResource { .init(key: "Email verification", tableName: "Localizable", source: source, developmentValue: "Email verification", comment: nil) }

      /// en translation: Embed Video
      ///
      /// Key: Embed Video
      ///
      /// Locales: en, tr
      var embedVideo: RswiftResources.StringResource { .init(key: "Embed Video", tableName: "Localizable", source: source, developmentValue: "Embed Video", comment: nil) }

      /// en translation: Enable
      ///
      /// Key: Enable
      ///
      /// Locales: en, tr
      var enable: RswiftResources.StringResource { .init(key: "Enable", tableName: "Localizable", source: source, developmentValue: "Enable", comment: nil) }

      /// en translation: Enabled
      ///
      /// Key: Enabled
      ///
      /// Locales: en, tr
      var enabled: RswiftResources.StringResource { .init(key: "Enabled", tableName: "Localizable", source: source, developmentValue: "Enabled", comment: nil) }

      /// en translation: Enter BusinessName
      ///
      /// Key: Enter BusinessName
      ///
      /// Locales: en, tr
      var enterBusinessName: RswiftResources.StringResource { .init(key: "Enter BusinessName", tableName: "Localizable", source: source, developmentValue: "Enter BusinessName", comment: nil) }

      /// en translation: Enter Category name
      ///
      /// Key: Enter Category name
      ///
      /// Locales: en, tr
      var enterCategoryName: RswiftResources.StringResource { .init(key: "Enter Category name", tableName: "Localizable", source: source, developmentValue: "Enter Category name", comment: nil) }

      /// en translation: Enter Email
      ///
      /// Key: Enter Email
      ///
      /// Locales: en, tr
      var enterEmail: RswiftResources.StringResource { .init(key: "Enter Email", tableName: "Localizable", source: source, developmentValue: "Enter Email", comment: nil) }

      /// en translation: Enter License name
      ///
      /// Key: Enter License name
      ///
      /// Locales: en, tr
      var enterLicenseName: RswiftResources.StringResource { .init(key: "Enter License name", tableName: "Localizable", source: source, developmentValue: "Enter License name", comment: nil) }

      /// en translation: Enter Name
      ///
      /// Key: Enter Name
      ///
      /// Locales: en, tr
      var enterName: RswiftResources.StringResource { .init(key: "Enter Name", tableName: "Localizable", source: source, developmentValue: "Enter Name", comment: nil) }

      /// en translation: Enter PhoneNumber
      ///
      /// Key: Enter PhoneNumber
      ///
      /// Locales: en, tr
      var enterPhoneNumber: RswiftResources.StringResource { .init(key: "Enter PhoneNumber", tableName: "Localizable", source: source, developmentValue: "Enter PhoneNumber", comment: nil) }

      /// en translation: Enter Price
      ///
      /// Key: Enter Price
      ///
      /// Locales: en, tr
      var enterPrice: RswiftResources.StringResource { .init(key: "Enter Price", tableName: "Localizable", source: source, developmentValue: "Enter Price", comment: nil) }

      /// en translation: Enter Tag
      ///
      /// Key: Enter Tag
      ///
      /// Locales: en, tr
      var enterTag: RswiftResources.StringResource { .init(key: "Enter Tag", tableName: "Localizable", source: source, developmentValue: "Enter Tag", comment: nil) }

      /// en translation: Enter Title
      ///
      /// Key: Enter Title
      ///
      /// Locales: en, tr
      var enterTitle: RswiftResources.StringResource { .init(key: "Enter Title", tableName: "Localizable", source: source, developmentValue: "Enter Title", comment: nil) }

      /// en translation: Enter Website
      ///
      /// Key: Enter Website
      ///
      /// Locales: en, tr
      var enterWebsite: RswiftResources.StringResource { .init(key: "Enter Website", tableName: "Localizable", source: source, developmentValue: "Enter Website", comment: nil) }

      /// en translation: Enter Your Information!
      ///
      /// Key: Enter Your Information!
      ///
      /// Locales: en, tr
      var enterYourInformation: RswiftResources.StringResource { .init(key: "Enter Your Information!", tableName: "Localizable", source: source, developmentValue: "Enter Your Information!", comment: nil) }

      /// en translation: Enter message
      ///
      /// Key: Enter message
      ///
      /// Locales: en, tr
      var enterMessage: RswiftResources.StringResource { .init(key: "Enter message", tableName: "Localizable", source: source, developmentValue: "Enter message", comment: nil) }

      /// en translation: Enter your Email
      ///
      /// Key: Enter your Email
      ///
      /// Locales: en
      var enterYourEmail: RswiftResources.StringResource { .init(key: "Enter your Email", tableName: "Localizable", source: source, developmentValue: "Enter your Email", comment: nil) }

      /// en translation: Enter your details below to continue
      ///
      /// Key: Enter your details below to continue
      ///
      /// Locales: en, tr
      var enterYourDetailsBelowToContinue: RswiftResources.StringResource { .init(key: "Enter your details below to continue", tableName: "Localizable", source: source, developmentValue: "Enter your details below to continue", comment: nil) }

      /// en translation: Exit Group
      ///
      /// Key: Exit Group
      ///
      /// Locales: en, tr
      var exitGroup: RswiftResources.StringResource { .init(key: "Exit Group", tableName: "Localizable", source: source, developmentValue: "Exit Group", comment: nil) }

      /// en translation: Explore
      ///
      /// Key: Explore
      ///
      /// Locales: en, tr
      var explore: RswiftResources.StringResource { .init(key: "Explore", tableName: "Localizable", source: source, developmentValue: "Explore", comment: nil) }

      /// en translation: Explore Articles
      ///
      /// Key: Explore Articles
      ///
      /// Locales: en, tr
      var exploreArticles: RswiftResources.StringResource { .init(key: "Explore Articles", tableName: "Localizable", source: source, developmentValue: "Explore Articles", comment: nil) }

      /// en translation: Explore Posts
      ///
      /// Key: Explore Posts
      ///
      /// Locales: en, tr
      var explorePosts: RswiftResources.StringResource { .init(key: "Explore Posts", tableName: "Localizable", source: source, developmentValue: "Explore Posts", comment: nil) }

      /// en translation: FEMALE
      ///
      /// Key: FAMALE
      ///
      /// Locales: en, tr
      var famalE: RswiftResources.StringResource { .init(key: "FAMALE", tableName: "Localizable", source: source, developmentValue: "FEMALE", comment: nil) }

      /// en translation: Facebook
      ///
      /// Key: Facebook
      ///
      /// Locales: en, tr
      var facebook: RswiftResources.StringResource { .init(key: "Facebook", tableName: "Localizable", source: source, developmentValue: "Facebook", comment: nil) }

      /// en translation: Favourite
      ///
      /// Key: Favourite
      ///
      /// Locales: en, tr
      var favourite: RswiftResources.StringResource { .init(key: "Favourite", tableName: "Localizable", source: source, developmentValue: "Favourite", comment: nil) }

      /// en translation: Favourite category
      ///
      /// Key: Favourite category
      ///
      /// Locales: en, tr
      var favouriteCategory: RswiftResources.StringResource { .init(key: "Favourite category", tableName: "Localizable", source: source, developmentValue: "Favourite category", comment: nil) }

      /// en translation: Featured Posts
      ///
      /// Key: Featured Posts
      ///
      /// Locales: en, tr
      var featuredPosts: RswiftResources.StringResource { .init(key: "Featured Posts", tableName: "Localizable", source: source, developmentValue: "Featured Posts", comment: nil) }

      /// en translation: Featured videos
      ///
      /// Key: Featured videos
      ///
      /// Locales: en, tr
      var featuredVideos: RswiftResources.StringResource { .init(key: "Featured videos", tableName: "Localizable", source: source, developmentValue: "Featured videos", comment: nil) }

      /// en translation: Female
      ///
      /// Key: Female
      ///
      /// Locales: en, tr
      var female: RswiftResources.StringResource { .init(key: "Female", tableName: "Localizable", source: source, developmentValue: "Female", comment: nil) }

      /// en translation: Fill your details or continue with social media
      ///
      /// Key: Fill your details or continue with social media
      ///
      /// Locales: en, tr
      var fillYourDetailsOrContinueWithSocialMedia: RswiftResources.StringResource { .init(key: "Fill your details or continue with social media", tableName: "Localizable", source: source, developmentValue: "Fill your details or continue with social media", comment: nil) }

      /// en translation: Filter
      ///
      /// Key: Filter
      ///
      /// Locales: en, tr
      var filter: RswiftResources.StringResource { .init(key: "Filter", tableName: "Localizable", source: source, developmentValue: "Filter", comment: nil) }

      /// en translation: Find all invite request
      ///
      /// Key: Find all invite request
      ///
      /// Locales: en, tr
      var findAllInviteRequest: RswiftResources.StringResource { .init(key: "Find all invite request", tableName: "Localizable", source: source, developmentValue: "Find all invite request", comment: nil) }

      /// en translation: First Name
      ///
      /// Key: First Name
      ///
      /// Locales: en, tr
      var firstName: RswiftResources.StringResource { .init(key: "First Name", tableName: "Localizable", source: source, developmentValue: "First Name", comment: nil) }

      /// en translation: Follow Request
      ///
      /// Key: Follow Request
      ///
      /// Locales: en, tr
      var followRequest: RswiftResources.StringResource { .init(key: "Follow Request", tableName: "Localizable", source: source, developmentValue: "Follow Request", comment: nil) }

      /// en translation: Followed me
      ///
      /// Key: Followed me
      ///
      /// Locales: en, tr
      var followedMe: RswiftResources.StringResource { .init(key: "Followed me", tableName: "Localizable", source: source, developmentValue: "Followed me", comment: nil) }

      /// en translation: Followers
      ///
      /// Key: Followers
      ///
      /// Locales: en, tr
      var followers: RswiftResources.StringResource { .init(key: "Followers", tableName: "Localizable", source: source, developmentValue: "Followers", comment: nil) }

      /// en translation: Forget Password ?
      ///
      /// Key: Forget Password ?
      ///
      /// Locales: en, tr
      var forgetPassword: RswiftResources.StringResource { .init(key: "Forget Password ?", tableName: "Localizable", source: source, developmentValue: "Forget Password ?", comment: nil) }

      /// en translation: Forgot Password
      ///
      /// Key: Forgot Password
      ///
      /// Locales: en, tr
      var forgotPassword: RswiftResources.StringResource { .init(key: "Forgot Password", tableName: "Localizable", source: source, developmentValue: "Forgot Password", comment: nil) }

      /// en translation: Free Member
      ///
      /// Key: Free Member
      ///
      /// Locales: en, tr
      var freeMember: RswiftResources.StringResource { .init(key: "Free Member", tableName: "Localizable", source: source, developmentValue: "Free Member", comment: nil) }

      /// en translation: Funding
      ///
      /// Key: Funding
      ///
      /// Locales: en, tr
      var funding: RswiftResources.StringResource { .init(key: "Funding", tableName: "Localizable", source: source, developmentValue: "Funding", comment: nil) }

      /// en translation: Funding Request
      ///
      /// Key: Funding Request
      ///
      /// Locales: en, tr
      var fundingRequest: RswiftResources.StringResource { .init(key: "Funding Request", tableName: "Localizable", source: source, developmentValue: "Funding Request", comment: nil) }

      /// en translation: GIF
      ///
      /// Key: GIF
      ///
      /// Locales: en, tr
      var giF: RswiftResources.StringResource { .init(key: "GIF", tableName: "Localizable", source: source, developmentValue: "GIF", comment: nil) }

      /// en translation: Gallery
      ///
      /// Key: Gallery
      ///
      /// Locales: en, tr
      var gallery: RswiftResources.StringResource { .init(key: "Gallery", tableName: "Localizable", source: source, developmentValue: "Gallery", comment: nil) }

      /// en translation: Gender
      ///
      /// Key: Gender
      ///
      /// Locales: en
      var gender: RswiftResources.StringResource { .init(key: "Gender", tableName: "Localizable", source: source, developmentValue: "Gender", comment: nil) }

      /// en translation: General
      ///
      /// Key: General
      ///
      /// Locales: en, tr
      var general: RswiftResources.StringResource { .init(key: "General", tableName: "Localizable", source: source, developmentValue: "General", comment: nil) }

      /// en translation: Get articles by categories
      ///
      /// Key: Get articles by categories
      ///
      /// Locales: en, tr
      var getArticlesByCategories: RswiftResources.StringResource { .init(key: "Get articles by categories", tableName: "Localizable", source: source, developmentValue: "Get articles by categories", comment: nil) }

      /// en translation: Get notifications when you receive messages
      ///
      /// Key: Get notifications when you receive messages
      ///
      /// Locales: en, tr
      var getNotificationsWhenYouReceiveMessages: RswiftResources.StringResource { .init(key: "Get notifications when you receive messages", tableName: "Localizable", source: source, developmentValue: "Get notifications when you receive messages", comment: nil) }

      /// en translation: Get the conversation started by leaving the first comment
      ///
      /// Key: Get the conversation started by leaving the first comment
      ///
      /// Locales: en, tr
      var getTheConversationStartedByLeavingTheFirstComment: RswiftResources.StringResource { .init(key: "Get the conversation started by leaving the first comment", tableName: "Localizable", source: source, developmentValue: "Get the conversation started by leaving the first comment", comment: nil) }

      /// en translation: Go Live
      ///
      /// Key: Go Live
      ///
      /// Locales: en, tr
      var goLive: RswiftResources.StringResource { .init(key: "Go Live", tableName: "Localizable", source: source, developmentValue: "Go Live", comment: nil) }

      /// en translation: Go Pro
      ///
      /// Key: Go Pro
      ///
      /// Locales: en, tr
      var goPro: RswiftResources.StringResource { .init(key: "Go Pro", tableName: "Localizable", source: source, developmentValue: "Go Pro", comment: nil) }

      /// en translation: Go to Post
      ///
      /// Key: Go to Post
      ///
      /// Locales: en, tr
      var goToPost: RswiftResources.StringResource { .init(key: "Go to Post", tableName: "Localizable", source: source, developmentValue: "Go to Post", comment: nil) }

      /// en translation: Group Name
      ///
      /// Key: Group Name
      ///
      /// Locales: en, tr
      var groupName: RswiftResources.StringResource { .init(key: "Group Name", tableName: "Localizable", source: source, developmentValue: "Group Name", comment: nil) }

      /// en translation: Group Request
      ///
      /// Key: Group Request
      ///
      /// Locales: en, tr
      var groupRequest: RswiftResources.StringResource { .init(key: "Group Request", tableName: "Localizable", source: source, developmentValue: "Group Request", comment: nil) }

      /// en translation: HASHTAGS
      ///
      /// Key: HASHTAGS
      ///
      /// Locales: en, tr
      var hashtagS: RswiftResources.StringResource { .init(key: "HASHTAGS", tableName: "Localizable", source: source, developmentValue: "HASHTAGS", comment: nil) }

      /// en translation: Hang Up
      ///
      /// Key: Hang Up
      ///
      /// Locales: en, tr
      var hangUp: RswiftResources.StringResource { .init(key: "Hang Up", tableName: "Localizable", source: source, developmentValue: "Hang Up", comment: nil) }

      /// en translation: HashTag
      ///
      /// Key: HashTag
      ///
      /// Locales: en, tr
      var hashTag: RswiftResources.StringResource { .init(key: "HashTag", tableName: "Localizable", source: source, developmentValue: "HashTag", comment: nil) }

      /// en translation: Help
      ///
      /// Key: Help
      ///
      /// Locales: en, tr
      var help: RswiftResources.StringResource { .init(key: "Help", tableName: "Localizable", source: source, developmentValue: "Help", comment: nil) }

      /// en translation: Help and Report Center
      ///
      /// Key: Help and Report Center
      ///
      /// Locales: en, tr
      var helpAndReportCenter: RswiftResources.StringResource { .init(key: "Help and Report Center", tableName: "Localizable", source: source, developmentValue: "Help and Report Center", comment: nil) }

      /// en translation: Hi! There I'm using Pixel Photo
      ///
      /// Key: Hi! There I'm using Pixel Photo
      ///
      /// Locales: en, tr
      var hiThereIMUsingPixelPhoto: RswiftResources.StringResource { .init(key: "Hi! There I'm using Pixel Photo", tableName: "Localizable", source: source, developmentValue: "Hi! There I'm using Pixel Photo", comment: nil) }

      /// en translation: Hi! there i am using WoWonder Messenger
      ///
      /// Key: Hi! there i am using WoWonder Messenger
      ///
      /// Locales: en, tr
      var hiThereIAmUsingWoWonderMessenger: RswiftResources.StringResource { .init(key: "Hi! there i am using WoWonder Messenger", tableName: "Localizable", source: source, developmentValue: "Hi! there i am using WoWonder Messenger", comment: nil) }

      /// en translation: History & Privacy
      ///
      /// Key: History & Privacy
      ///
      /// Locales: en, tr
      var historyPrivacy: RswiftResources.StringResource { .init(key: "History & Privacy", tableName: "Localizable", source: source, developmentValue: "History & Privacy", comment: nil) }

      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Key: If you forgot your password, you can reset it from here.
      ///
      /// Locales: en, tr
      var ifYouForgotYourPasswordYouCanResetItFromHere: RswiftResources.StringResource { .init(key: "If you forgot your password, you can reset it from here.", tableName: "Localizable", source: source, developmentValue: "If you forgot your password, you can reset it from here.", comment: nil) }

      /// en translation: Image
      ///
      /// Key: Image
      ///
      /// Locales: en, tr
      var image: RswiftResources.StringResource { .init(key: "Image", tableName: "Localizable", source: source, developmentValue: "Image", comment: nil) }

      /// en translation: Image Gallery
      ///
      /// Key: Image Gallery
      ///
      /// Locales: en, tr
      var imageGallery: RswiftResources.StringResource { .init(key: "Image Gallery", tableName: "Localizable", source: source, developmentValue: "Image Gallery", comment: nil) }

      /// en translation: Image Type
      ///
      /// Key: Image Type
      ///
      /// Locales: en, tr
      var imageType: RswiftResources.StringResource { .init(key: "Image Type", tableName: "Localizable", source: source, developmentValue: "Image Type", comment: nil) }

      /// en translation: Import
      ///
      /// Key: Import
      ///
      /// Locales: en, tr
      var `import`: RswiftResources.StringResource { .init(key: "Import", tableName: "Localizable", source: source, developmentValue: "Import", comment: nil) }

      /// en translation: Import Video
      ///
      /// Key: Import Video
      ///
      /// Locales: en, tr
      var importVideo: RswiftResources.StringResource { .init(key: "Import Video", tableName: "Localizable", source: source, developmentValue: "Import Video", comment: nil) }

      /// en translation: In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.
      ///
      /// Key: In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.
      ///
      /// Locales: en, tr
      var inOrderToConfirmTheBankTranferYouWillNeedToUploadAReceiptOrTakeAScreenshotOfYourTransferWithin1DayFromYourPaymentDateIfABankTransferIsMadeButNoReceiptIsUploadedWithinThisPeriodYourOrderWillBeCancelledWeWillVerifyAndConfirmYourReceiptWithin3WorkingDaysFromTheDateYouUploadIt: RswiftResources.StringResource { .init(key: "In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.", tableName: "Localizable", source: source, developmentValue: "In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.", comment: nil) }

      /// en translation: InterNetError
      ///
      /// Key: InterNetError
      ///
      /// Locales: en, tr
      var interNetError: RswiftResources.StringResource { .init(key: "InterNetError", tableName: "Localizable", source: source, developmentValue: "InterNetError", comment: nil) }

      /// en translation: Internet Error
      ///
      /// Key: Internet Error
      ///
      /// Locales: en, tr
      var internetError: RswiftResources.StringResource { .init(key: "Internet Error", tableName: "Localizable", source: source, developmentValue: "Internet Error", comment: nil) }

      /// en translation: Invite Friends
      ///
      /// Key: Invite Friends
      ///
      /// Locales: en, tr
      var inviteFriends: RswiftResources.StringResource { .init(key: "Invite Friends", tableName: "Localizable", source: source, developmentValue: "Invite Friends", comment: nil) }

      /// en translation: Keyword should not be less than 4
      ///
      /// Key: Keyword should not be less than 4
      ///
      /// Locales: en, tr
      var keywordShouldNotBeLessThan4: RswiftResources.StringResource { .init(key: "Keyword should not be less than 4", tableName: "Localizable", source: source, developmentValue: "Keyword should not be less than 4", comment: nil) }

      /// en translation: LOGIN
      ///
      /// Key: LOGIN
      ///
      /// Locales: en, tr
      var logiN: RswiftResources.StringResource { .init(key: "LOGIN", tableName: "Localizable", source: source, developmentValue: "LOGIN", comment: nil) }

      /// en translation: Label
      ///
      /// Key: Label
      ///
      /// Locales: en, tr
      var label: RswiftResources.StringResource { .init(key: "Label", tableName: "Localizable", source: source, developmentValue: "Label", comment: nil) }

      /// en translation: Language
      ///
      /// Key: Language
      ///
      /// Locales: en, tr
      var language: RswiftResources.StringResource { .init(key: "Language", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: Last Name
      ///
      /// Key: Last Name
      ///
      /// Locales: en, tr
      var lastName: RswiftResources.StringResource { .init(key: "Last Name", tableName: "Localizable", source: source, developmentValue: "Last Name", comment: nil) }

      /// en translation: Last hour
      ///
      /// Key: Last hour
      ///
      /// Locales: en, tr
      var lastHour: RswiftResources.StringResource { .init(key: "Last hour", tableName: "Localizable", source: source, developmentValue: "Last hour", comment: nil) }

      /// en translation: Latest Videos
      ///
      /// Key: Latest Videos
      ///
      /// Locales: en, tr
      var latestVideos: RswiftResources.StringResource { .init(key: "Latest Videos", tableName: "Localizable", source: source, developmentValue: "Latest Videos", comment: nil) }

      /// en translation: Let's get started!
      ///
      /// Key: Let's get started!
      ///
      /// Locales: en, tr
      var letSGetStarted: RswiftResources.StringResource { .init(key: "Let's get started!", tableName: "Localizable", source: source, developmentValue: "Let's get started!", comment: nil) }

      /// en translation: Library
      ///
      /// Key: Library
      ///
      /// Locales: en, tr
      var library: RswiftResources.StringResource { .init(key: "Library", tableName: "Localizable", source: source, developmentValue: "Library", comment: nil) }

      /// en translation: License Type
      ///
      /// Key: License Type
      ///
      /// Locales: en, tr
      var licenseType: RswiftResources.StringResource { .init(key: "License Type", tableName: "Localizable", source: source, developmentValue: "License Type", comment: nil) }

      /// en translation: Light mode
      ///
      /// Key: Light mode
      ///
      /// Locales: en, tr
      var lightMode: RswiftResources.StringResource { .init(key: "Light mode", tableName: "Localizable", source: source, developmentValue: "Light mode", comment: nil) }

      /// en translation: Like
      ///
      /// Key: Like
      ///
      /// Locales: en, tr
      var like: RswiftResources.StringResource { .init(key: "Like", tableName: "Localizable", source: source, developmentValue: "Like", comment: nil) }

      /// en translation: Liked
      ///
      /// Key: Liked
      ///
      /// Locales: en, tr
      var liked: RswiftResources.StringResource { .init(key: "Liked", tableName: "Localizable", source: source, developmentValue: "Liked", comment: nil) }

      /// en translation: Liked Videos
      ///
      /// Key: Liked Videos
      ///
      /// Locales: en, tr
      var likedVideos: RswiftResources.StringResource { .init(key: "Liked Videos", tableName: "Localizable", source: source, developmentValue: "Liked Videos", comment: nil) }

      /// en translation: Liked my post
      ///
      /// Key: Liked my post
      ///
      /// Locales: en, tr
      var likedMyPost: RswiftResources.StringResource { .init(key: "Liked my post", tableName: "Localizable", source: source, developmentValue: "Liked my post", comment: nil) }

      /// en translation: Likes
      ///
      /// Key: Likes
      ///
      /// Locales: en, tr
      var likes: RswiftResources.StringResource { .init(key: "Likes", tableName: "Localizable", source: source, developmentValue: "Likes", comment: nil) }

      /// en translation: Loading Profile...
      ///
      /// Key: Loading Profile...
      ///
      /// Locales: en, tr
      var loadingProfile: RswiftResources.StringResource { .init(key: "Loading Profile...", tableName: "Localizable", source: source, developmentValue: "Loading Profile...", comment: nil) }

      /// en translation: Loading...
      ///
      /// Key: Loading...
      ///
      /// Locales: en, tr
      var loading: RswiftResources.StringResource { .init(key: "Loading...", tableName: "Localizable", source: source, developmentValue: "Loading...", comment: nil) }

      /// en translation: Location
      ///
      /// Key: Location
      ///
      /// Locales: en, tr
      var location: RswiftResources.StringResource { .init(key: "Location", tableName: "Localizable", source: source, developmentValue: "Location", comment: nil) }

      /// en translation: Login
      ///
      /// Key: Login
      ///
      /// Locales: en, tr
      var login: RswiftResources.StringResource { .init(key: "Login", tableName: "Localizable", source: source, developmentValue: "Login", comment: nil) }

      /// en translation: Login with WoWonder
      ///
      /// Key: Login with WoWonder
      ///
      /// Locales: en, tr
      var loginWithWoWonder: RswiftResources.StringResource { .init(key: "Login with WoWonder", tableName: "Localizable", source: source, developmentValue: "Login with WoWonder", comment: nil) }

      /// en translation: Logout
      ///
      /// Key: Logout
      ///
      /// Locales: en, tr
      var logout: RswiftResources.StringResource { .init(key: "Logout", tableName: "Localizable", source: source, developmentValue: "Logout", comment: nil) }

      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Key: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Locales: en, tr
      var loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda: RswiftResources.StringResource { .init(key: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", tableName: "Localizable", source: source, developmentValue: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", comment: nil) }

      /// en translation: MALE
      ///
      /// Key: MALE
      ///
      /// Locales: en, tr
      var malE: RswiftResources.StringResource { .init(key: "MALE", tableName: "Localizable", source: source, developmentValue: "MALE", comment: nil) }

      /// en translation: MY BALANCE
      ///
      /// Key: MY BALANCE
      ///
      /// Locales: en, tr
      var mybalancE: RswiftResources.StringResource { .init(key: "MY BALANCE", tableName: "Localizable", source: source, developmentValue: "MY BALANCE", comment: nil) }

      /// en translation: Male
      ///
      /// Key: Male
      ///
      /// Locales: en, tr
      var male: RswiftResources.StringResource { .init(key: "Male", tableName: "Localizable", source: source, developmentValue: "Male", comment: nil) }

      /// en translation: Manage Sessions
      ///
      /// Key: Manage Sessions
      ///
      /// Locales: en, tr
      var manageSessions: RswiftResources.StringResource { .init(key: "Manage Sessions", tableName: "Localizable", source: source, developmentValue: "Manage Sessions", comment: nil) }

      /// en translation: Mention Contact
      ///
      /// Key: Mention Contact
      ///
      /// Locales: en, tr
      var mentionContact: RswiftResources.StringResource { .init(key: "Mention Contact", tableName: "Localizable", source: source, developmentValue: "Mention Contact", comment: nil) }

      /// en translation: Mentioned Contact
      ///
      /// Key: Mentioned Contact
      ///
      /// Locales: en, tr
      var mentionedContact: RswiftResources.StringResource { .init(key: "Mentioned Contact", tableName: "Localizable", source: source, developmentValue: "Mentioned Contact", comment: nil) }

      /// en translation: Mentioned me
      ///
      /// Key: Mentioned me
      ///
      /// Locales: en, tr
      var mentionedMe: RswiftResources.StringResource { .init(key: "Mentioned me", tableName: "Localizable", source: source, developmentValue: "Mentioned me", comment: nil) }

      /// en translation: Message
      ///
      /// Key: Message
      ///
      /// Locales: en, tr
      var message: RswiftResources.StringResource { .init(key: "Message", tableName: "Localizable", source: source, developmentValue: "Message", comment: nil) }

      /// en translation: Message Notification
      ///
      /// Key: Message Notification
      ///
      /// Locales: en, tr
      var messageNotification: RswiftResources.StringResource { .init(key: "Message Notification", tableName: "Localizable", source: source, developmentValue: "Message Notification", comment: nil) }

      /// en translation: Message Notifications
      ///
      /// Key: Message Notifications
      ///
      /// Locales: en, tr
      var messageNotifications: RswiftResources.StringResource { .init(key: "Message Notifications", tableName: "Localizable", source: source, developmentValue: "Message Notifications", comment: nil) }

      /// en translation: Mobile
      ///
      /// Key: Mobile
      ///
      /// Locales: en, tr
      var mobile: RswiftResources.StringResource { .init(key: "Mobile", tableName: "Localizable", source: source, developmentValue: "Mobile", comment: nil) }

      /// en translation: Monitization
      ///
      /// Key: Monitization
      ///
      /// Locales: en, tr
      var monitization: RswiftResources.StringResource { .init(key: "Monitization", tableName: "Localizable", source: source, developmentValue: "Monitization", comment: nil) }

      /// en translation: Most Active
      ///
      /// Key: Most Active
      ///
      /// Locales: en, tr
      var mostActive: RswiftResources.StringResource { .init(key: "Most Active", tableName: "Localizable", source: source, developmentValue: "Most Active", comment: nil) }

      /// en translation: Mute
      ///
      /// Key: Mute
      ///
      /// Locales: en, tr
      var mute: RswiftResources.StringResource { .init(key: "Mute", tableName: "Localizable", source: source, developmentValue: "Mute", comment: nil) }

      /// en translation: My Account
      ///
      /// Key: My Account
      ///
      /// Locales: en, tr
      var myAccount: RswiftResources.StringResource { .init(key: "My Account", tableName: "Localizable", source: source, developmentValue: "My Account", comment: nil) }

      /// en translation: My Affilities
      ///
      /// Key: My Affilities
      ///
      /// Locales: en, tr
      var myAffilities: RswiftResources.StringResource { .init(key: "My Affilities", tableName: "Localizable", source: source, developmentValue: "My Affilities", comment: nil) }

      /// en translation: My Profile
      ///
      /// Key: My Profile
      ///
      /// Locales: en, tr
      var myProfile: RswiftResources.StringResource { .init(key: "My Profile", tableName: "Localizable", source: source, developmentValue: "My Profile", comment: nil) }

      /// en translation: MyFriend
      ///
      /// Key: MyFriend
      ///
      /// Locales: en, tr
      var myFriend: RswiftResources.StringResource { .init(key: "MyFriend", tableName: "Localizable", source: source, developmentValue: "MyFriend", comment: nil) }

      /// en translation: NO
      ///
      /// Key: NO
      ///
      /// Locales: en, tr
      var nO: RswiftResources.StringResource { .init(key: "NO", tableName: "Localizable", source: source, developmentValue: "NO", comment: nil) }

      /// en translation: Name
      ///
      /// Key: Name
      ///
      /// Locales: en, tr
      var name: RswiftResources.StringResource { .init(key: "Name", tableName: "Localizable", source: source, developmentValue: "Name", comment: nil) }

      /// en translation: New Password
      ///
      /// Key: New Password
      ///
      /// Locales: en, tr
      var newPassword: RswiftResources.StringResource { .init(key: "New Password", tableName: "Localizable", source: source, developmentValue: "New Password", comment: nil) }

      /// en translation: Next To
      ///
      /// Key: Next To
      ///
      /// Locales: en, tr
      var nextTo: RswiftResources.StringResource { .init(key: "Next To", tableName: "Localizable", source: source, developmentValue: "Next To", comment: nil) }

      /// en translation: Night Mode
      ///
      /// Key: Night Mode
      ///
      /// Locales: en, tr
      var nightMode: RswiftResources.StringResource { .init(key: "Night Mode", tableName: "Localizable", source: source, developmentValue: "Night Mode", comment: nil) }

      /// en translation: No Comments Yet
      ///
      /// Key: No Comments Yet
      ///
      /// Locales: en, tr
      var noCommentsYet: RswiftResources.StringResource { .init(key: "No Comments Yet", tableName: "Localizable", source: source, developmentValue: "No Comments Yet", comment: nil) }

      /// en translation: No Featured videos
      ///
      /// Key: No Featured videos
      ///
      /// Locales: en, tr
      var noFeaturedVideos: RswiftResources.StringResource { .init(key: "No Featured videos", tableName: "Localizable", source: source, developmentValue: "No Featured videos", comment: nil) }

      /// en translation: No Notification!
      ///
      /// Key: No Notification!
      ///
      /// Locales: en, tr
      var noNotification: RswiftResources.StringResource { .init(key: "No Notification!", tableName: "Localizable", source: source, developmentValue: "No Notification!", comment: nil) }

      /// en translation: No PlayList found
      ///
      /// Key: No PlayList found
      ///
      /// Locales: en, tr
      var noPlayListFound: RswiftResources.StringResource { .init(key: "No PlayList found", tableName: "Localizable", source: source, developmentValue: "No PlayList found", comment: nil) }

      /// en translation: No Playlist found for now!
      ///
      /// Key: No Playlist found for now!
      ///
      /// Locales: en, tr
      var noPlaylistFoundForNow: RswiftResources.StringResource { .init(key: "No Playlist found for now!", tableName: "Localizable", source: source, developmentValue: "No Playlist found for now!", comment: nil) }

      /// en translation: No Verified badge
      ///
      /// Key: No Verified badge
      ///
      /// Locales: en, tr
      var noVerifiedBadge: RswiftResources.StringResource { .init(key: "No Verified badge", tableName: "Localizable", source: source, developmentValue: "No Verified badge", comment: nil) }

      /// en translation: No activites found for now
      ///
      /// Key: No activites found for now
      ///
      /// Locales: en, tr
      var noActivitesFoundForNow: RswiftResources.StringResource { .init(key: "No activites found for now", tableName: "Localizable", source: source, developmentValue: "No activites found for now", comment: nil) }

      /// en translation: No ads will show up
      ///
      /// Key: No ads will show up
      ///
      /// Locales: en, tr
      var noAdsWillShowUp: RswiftResources.StringResource { .init(key: "No ads will show up", tableName: "Localizable", source: source, developmentValue: "No ads will show up", comment: nil) }

      /// en translation: No body
      ///
      /// Key: No body
      ///
      /// Locales: en, tr
      var noBody: RswiftResources.StringResource { .init(key: "No body", tableName: "Localizable", source: source, developmentValue: "No body", comment: nil) }

      /// en translation: No more Messages
      ///
      /// Key: No more Messages
      ///
      /// Locales: en, tr
      var noMoreMessages: RswiftResources.StringResource { .init(key: "No more Messages", tableName: "Localizable", source: source, developmentValue: "No more Messages", comment: nil) }

      /// en translation: No paid videos found
      ///
      /// Key: No paid videos found
      ///
      /// Locales: en, tr
      var noPaidVideosFound: RswiftResources.StringResource { .init(key: "No paid videos found", tableName: "Localizable", source: source, developmentValue: "No paid videos found", comment: nil) }

      /// en translation: No videos found for now!
      ///
      /// Key: No videos found for now!
      ///
      /// Locales: en, tr
      var noVideosFoundForNow: RswiftResources.StringResource { .init(key: "No videos found for now!", tableName: "Localizable", source: source, developmentValue: "No videos found for now!", comment: nil) }

      /// en translation: Nobody
      ///
      /// Key: Nobody
      ///
      /// Locales: en, tr
      var nobody: RswiftResources.StringResource { .init(key: "Nobody", tableName: "Localizable", source: source, developmentValue: "Nobody", comment: nil) }

      /// en translation: Not interested
      ///
      /// Key: Not interested
      ///
      /// Locales: en, tr
      var notInterested: RswiftResources.StringResource { .init(key: "Not interested", tableName: "Localizable", source: source, developmentValue: "Not interested", comment: nil) }

      /// en translation: Note
      ///
      /// Key: Note
      ///
      /// Locales: en, tr
      var note: RswiftResources.StringResource { .init(key: "Note", tableName: "Localizable", source: source, developmentValue: "Note", comment: nil) }

      /// en translation: Notification
      ///
      /// Key: Notification
      ///
      /// Locales: en, tr
      var notification: RswiftResources.StringResource { .init(key: "Notification", tableName: "Localizable", source: source, developmentValue: "Notification", comment: nil) }

      /// en translation: Notification Popup
      ///
      /// Key: Notification Popup
      ///
      /// Locales: en, tr
      var notificationPopup: RswiftResources.StringResource { .init(key: "Notification Popup", tableName: "Localizable", source: source, developmentValue: "Notification Popup", comment: nil) }

      /// en translation: Notification Setting
      ///
      /// Key: Notification Setting
      ///
      /// Locales: en, tr
      var notificationSetting: RswiftResources.StringResource { .init(key: "Notification Setting", tableName: "Localizable", source: source, developmentValue: "Notification Setting", comment: nil) }

      /// en translation: OFFLINE
      ///
      /// Key: OFFLINE
      ///
      /// Locales: en, tr
      var offlinE: RswiftResources.StringResource { .init(key: "OFFLINE", tableName: "Localizable", source: source, developmentValue: "OFFLINE", comment: nil) }

      /// en translation: OK
      ///
      /// Key: OK
      ///
      /// Locales: en, tr
      var oK: RswiftResources.StringResource { .init(key: "OK", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: ONLINE
      ///
      /// Key: ONLINE
      ///
      /// Locales: en, tr
      var onlinE: RswiftResources.StringResource { .init(key: "ONLINE", tableName: "Localizable", source: source, developmentValue: "ONLINE", comment: nil) }

      /// en translation: Offline Download
      ///
      /// Key: Offline Download
      ///
      /// Locales: en, tr
      var offlineDownload: RswiftResources.StringResource { .init(key: "Offline Download", tableName: "Localizable", source: source, developmentValue: "Offline Download", comment: nil) }

      /// en translation: Okay
      ///
      /// Key: Okay
      ///
      /// Locales: en, tr
      var okay: RswiftResources.StringResource { .init(key: "Okay", tableName: "Localizable", source: source, developmentValue: "Okay", comment: nil) }

      /// en translation: Option
      ///
      /// Key: Option
      ///
      /// Locales: en, tr
      var option: RswiftResources.StringResource { .init(key: "Option", tableName: "Localizable", source: source, developmentValue: "Option", comment: nil) }

      /// en translation: Or Continue with
      ///
      /// Key: Or Continue with
      ///
      /// Locales: en, tr
      var orContinueWith: RswiftResources.StringResource { .init(key: "Or Continue with", tableName: "Localizable", source: source, developmentValue: "Or Continue with", comment: nil) }

      /// en translation: Others
      ///
      /// Key: Others
      ///
      /// Locales: en, tr
      var others: RswiftResources.StringResource { .init(key: "Others", tableName: "Localizable", source: source, developmentValue: "Others", comment: nil) }

      /// en translation: PLAYLISTS
      ///
      /// Key: PLAYLISTS
      ///
      /// Locales: en, tr
      var playlistS: RswiftResources.StringResource { .init(key: "PLAYLISTS", tableName: "Localizable", source: source, developmentValue: "PLAYLISTS", comment: nil) }

      /// en translation: PRIVACY
      ///
      /// Key: PRIVACY
      ///
      /// Locales: en, tr
      var privacY: RswiftResources.StringResource { .init(key: "PRIVACY", tableName: "Localizable", source: source, developmentValue: "PRIVACY", comment: nil) }

      /// en translation: Paid
      ///
      /// Key: Paid
      ///
      /// Locales: en, tr
      var paid: RswiftResources.StringResource { .init(key: "Paid", tableName: "Localizable", source: source, developmentValue: "Paid", comment: nil) }

      /// en translation: Passport
      ///
      /// Key: Passport
      ///
      /// Locales: en, tr
      var passport: RswiftResources.StringResource { .init(key: "Passport", tableName: "Localizable", source: source, developmentValue: "Passport", comment: nil) }

      /// en translation: Password
      ///
      /// Key: Password
      ///
      /// Locales: en
      var password: RswiftResources.StringResource { .init(key: "Password", tableName: "Localizable", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Password do not match.
      ///
      /// Key: Password do not match.
      ///
      /// Locales: en, tr
      var passwordDoNotMatch: RswiftResources.StringResource { .init(key: "Password do not match.", tableName: "Localizable", source: source, developmentValue: "Password do not match.", comment: nil) }

      /// en translation: Password does not match. Try again!
      ///
      /// Key: Password does not match. Try again!
      ///
      /// Locales: en, tr
      var passwordDoesNotMatchTryAgain: RswiftResources.StringResource { .init(key: "Password does not match. Try again!", tableName: "Localizable", source: source, developmentValue: "Password does not match. Try again!", comment: nil) }

      /// en translation: Password has been changed!
      ///
      /// Key: Password has been changed!
      ///
      /// Locales: en, tr
      var passwordHasBeenChanged: RswiftResources.StringResource { .init(key: "Password has been changed!", tableName: "Localizable", source: source, developmentValue: "Password has been changed!", comment: nil) }

      /// en translation: PayPal E-mail
      ///
      /// Key: PayPal E-mail
      ///
      /// Locales: en, tr
      var payPalEMail: RswiftResources.StringResource { .init(key: "PayPal E-mail", tableName: "Localizable", source: source, developmentValue: "PayPal E-mail", comment: nil) }

      /// en translation: Phone
      ///
      /// Key: Phone
      ///
      /// Locales: en, tr
      var phone: RswiftResources.StringResource { .init(key: "Phone", tableName: "Localizable", source: source, developmentValue: "Phone", comment: nil) }

      /// en translation: Phone Number
      ///
      /// Key: Phone Number
      ///
      /// Locales: en, tr
      var phoneNumber: RswiftResources.StringResource { .init(key: "Phone Number", tableName: "Localizable", source: source, developmentValue: "Phone Number", comment: nil) }

      /// en translation: Picture-in-picture
      ///
      /// Key: Picture-in-picture
      ///
      /// Locales: en, tr
      var pictureInPicture: RswiftResources.StringResource { .init(key: "Picture-in-picture", tableName: "Localizable", source: source, developmentValue: "Picture-in-picture", comment: nil) }

      /// en translation: Play sound for incoming and outgoing messages
      ///
      /// Key: Play sound for incoming and outgoing messages
      ///
      /// Locales: en, tr
      var playSoundForIncomingAndOutgoingMessages: RswiftResources.StringResource { .init(key: "Play sound for incoming and outgoing messages", tableName: "Localizable", source: source, developmentValue: "Play sound for incoming and outgoing messages", comment: nil) }

      /// en translation: Play sounds for incoming and outgoing messages
      ///
      /// Key: Play sounds for incoming and outgoing messages
      ///
      /// Locales: en, tr
      var playSoundsForIncomingAndOutgoingMessages: RswiftResources.StringResource { .init(key: "Play sounds for incoming and outgoing messages", tableName: "Localizable", source: source, developmentValue: "Play sounds for incoming and outgoing messages", comment: nil) }

      /// en translation: Playlist
      ///
      /// Key: Playlist
      ///
      /// Locales: en, tr
      var playlist: RswiftResources.StringResource { .init(key: "Playlist", tableName: "Localizable", source: source, developmentValue: "Playlist", comment: nil) }

      /// en translation: Playlists
      ///
      /// Key: Playlists
      ///
      /// Locales: en, tr
      var playlists: RswiftResources.StringResource { .init(key: "Playlists", tableName: "Localizable", source: source, developmentValue: "Playlists", comment: nil) }

      /// en translation: Please Enter Paypal Email
      ///
      /// Key: Please Enter Paypal Email
      ///
      /// Locales: en, tr
      var pleaseEnterPaypalEmail: RswiftResources.StringResource { .init(key: "Please Enter Paypal Email", tableName: "Localizable", source: source, developmentValue: "Please Enter Paypal Email", comment: nil) }

      /// en translation: Please Select a recent Picture of your Passport or id
      ///
      /// Key: Please Select a recent Picture of your Passport or id
      ///
      /// Locales: en, tr
      var pleaseSelectARecentPictureOfYourPassportOrId: RswiftResources.StringResource { .init(key: "Please Select a recent Picture of your Passport or id", tableName: "Localizable", source: source, developmentValue: "Please Select a recent Picture of your Passport or id", comment: nil) }

      /// en translation: Please add Photo image
      ///
      /// Key: Please add Photo image
      ///
      /// Locales: en, tr
      var pleaseAddPhotoImage: RswiftResources.StringResource { .init(key: "Please add Photo image", tableName: "Localizable", source: source, developmentValue: "Please add Photo image", comment: nil) }

      /// en translation: Please add passport image
      ///
      /// Key: Please add passport image
      ///
      /// Locales: en, tr
      var pleaseAddPassportImage: RswiftResources.StringResource { .init(key: "Please add passport image", tableName: "Localizable", source: source, developmentValue: "Please add passport image", comment: nil) }

      /// en translation: Please enter Code.
      ///
      /// Key: Please enter Code.
      ///
      /// Locales: en, tr
      var pleaseEnterCode: RswiftResources.StringResource { .init(key: "Please enter Code.", tableName: "Localizable", source: source, developmentValue: "Please enter Code.", comment: nil) }

      /// en translation: Please enter a message.
      ///
      /// Key: Please enter a message.
      ///
      /// Locales: en, tr
      var pleaseEnterAMessage: RswiftResources.StringResource { .init(key: "Please enter a message.", tableName: "Localizable", source: source, developmentValue: "Please enter a message.", comment: nil) }

      /// en translation: Please enter confirm password.
      ///
      /// Key: Please enter confirm password.
      ///
      /// Locales: en, tr
      var pleaseEnterConfirmPassword: RswiftResources.StringResource { .init(key: "Please enter confirm password.", tableName: "Localizable", source: source, developmentValue: "Please enter confirm password.", comment: nil) }

      /// en translation: Please enter current confirm password.
      ///
      /// Key: Please enter current confirm password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentConfirmPassword: RswiftResources.StringResource { .init(key: "Please enter current confirm password.", tableName: "Localizable", source: source, developmentValue: "Please enter current confirm password.", comment: nil) }

      /// en translation: Please enter current new password.
      ///
      /// Key: Please enter current new password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentNewPassword: RswiftResources.StringResource { .init(key: "Please enter current new password.", tableName: "Localizable", source: source, developmentValue: "Please enter current new password.", comment: nil) }

      /// en translation: Please enter current password.
      ///
      /// Key: Please enter current password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentPassword: RswiftResources.StringResource { .init(key: "Please enter current password.", tableName: "Localizable", source: source, developmentValue: "Please enter current password.", comment: nil) }

      /// en translation: Please enter email.
      ///
      /// Key: Please enter email.
      ///
      /// Locales: en, tr
      var pleaseEnterEmail: RswiftResources.StringResource { .init(key: "Please enter email.", tableName: "Localizable", source: source, developmentValue: "Please enter email.", comment: nil) }

      /// en translation: Please enter first name.
      ///
      /// Key: Please enter first name.
      ///
      /// Locales: en, tr
      var pleaseEnterFirstName: RswiftResources.StringResource { .init(key: "Please enter first name.", tableName: "Localizable", source: source, developmentValue: "Please enter first name.", comment: nil) }

      /// en translation: Please enter last name.
      ///
      /// Key: Please enter last name.
      ///
      /// Locales: en, tr
      var pleaseEnterLastName: RswiftResources.StringResource { .init(key: "Please enter last name.", tableName: "Localizable", source: source, developmentValue: "Please enter last name.", comment: nil) }

      /// en translation: Please enter password.
      ///
      /// Key: Please enter password.
      ///
      /// Locales: en, tr
      var pleaseEnterPassword: RswiftResources.StringResource { .init(key: "Please enter password.", tableName: "Localizable", source: source, developmentValue: "Please enter password.", comment: nil) }

      /// en translation: Please enter playlist description
      ///
      /// Key: Please enter playlist description
      ///
      /// Locales: en, tr
      var pleaseEnterPlaylistDescription: RswiftResources.StringResource { .init(key: "Please enter playlist description", tableName: "Localizable", source: source, developmentValue: "Please enter playlist description", comment: nil) }

      /// en translation: Please enter playlist name
      ///
      /// Key: Please enter playlist name
      ///
      /// Locales: en, tr
      var pleaseEnterPlaylistName: RswiftResources.StringResource { .init(key: "Please enter playlist name", tableName: "Localizable", source: source, developmentValue: "Please enter playlist name", comment: nil) }

      /// en translation: Please enter username.
      ///
      /// Key: Please enter username.
      ///
      /// Locales: en, tr
      var pleaseEnterUsername: RswiftResources.StringResource { .init(key: "Please enter username.", tableName: "Localizable", source: source, developmentValue: "Please enter username.", comment: nil) }

      /// en translation: Please enter your email address. We will send you a link to reset password.
      ///
      /// Key: Please enter your email address. We will send you a link to reset password.
      ///
      /// Locales: en
      var pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword: RswiftResources.StringResource { .init(key: "Please enter your email address. We will send you a link to reset password.", tableName: "Localizable", source: source, developmentValue: "Please enter your email address. We will send you a link to reset password.", comment: nil) }

      /// en translation: Please login to continue
      ///
      /// Key: Please login to continue
      ///
      /// Locales: en, tr
      var pleaseLoginToContinue: RswiftResources.StringResource { .init(key: "Please login to continue", tableName: "Localizable", source: source, developmentValue: "Please login to continue", comment: nil) }

      /// en translation: Please see my post
      ///
      /// Key: Please see my post
      ///
      /// Locales: en, tr
      var pleaseSeeMyPost: RswiftResources.StringResource { .init(key: "Please see my post", tableName: "Localizable", source: source, developmentValue: "Please see my post", comment: nil) }

      /// en translation: Please select Sort By
      ///
      /// Key: Please select Sort By
      ///
      /// Locales: en, tr
      var pleaseSelectSortBy: RswiftResources.StringResource { .init(key: "Please select Sort By", tableName: "Localizable", source: source, developmentValue: "Please select Sort By", comment: nil) }

      /// en translation: Please select Time By
      ///
      /// Key: Please select Time By
      ///
      /// Locales: en, tr
      var pleaseSelectTimeBy: RswiftResources.StringResource { .init(key: "Please select Time By", tableName: "Localizable", source: source, developmentValue: "Please select Time By", comment: nil) }

      /// en translation: Please select atleast one media.
      ///
      /// Key: Please select atleast one media.
      ///
      /// Locales: en, tr
      var pleaseSelectAtleastOneMedia: RswiftResources.StringResource { .init(key: "Please select atleast one media.", tableName: "Localizable", source: source, developmentValue: "Please select atleast one media.", comment: nil) }

      /// en translation: Please select gender
      ///
      /// Key: Please select gender
      ///
      /// Locales: en, tr
      var pleaseSelectGender: RswiftResources.StringResource { .init(key: "Please select gender", tableName: "Localizable", source: source, developmentValue: "Please select gender", comment: nil) }

      /// en translation: Please select recent picutre of your passport or id.
      ///
      /// Key: Please select recent picutre of your passport or id.
      ///
      /// Locales: en, tr
      var pleaseSelectRecentPicutreOfYourPassportOrId: RswiftResources.StringResource { .init(key: "Please select recent picutre of your passport or id.", tableName: "Localizable", source: source, developmentValue: "Please select recent picutre of your passport or id.", comment: nil) }

      /// en translation: Please select the Terms & Conditions.
      ///
      /// Key: Please select the Terms & Conditions.
      ///
      /// Locales: en, tr
      var pleaseSelectTheTermsConditions: RswiftResources.StringResource { .init(key: "Please select the Terms & Conditions.", tableName: "Localizable", source: source, developmentValue: "Please select the Terms & Conditions.", comment: nil) }

      /// en translation: Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership
      ///
      /// Key: Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership
      ///
      /// Locales: en, tr
      var pleaseTransferTheAmountOf8ToThisBankAccountToPurchaseWeeklyPlanPremiumMembership: RswiftResources.StringResource { .init(key: "Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership", tableName: "Localizable", source: source, developmentValue: "Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership", comment: nil) }

      /// en translation: Please type Comment
      ///
      /// Key: Please type Comment
      ///
      /// Locales: en, tr
      var pleaseTypeComment: RswiftResources.StringResource { .init(key: "Please type Comment", tableName: "Localizable", source: source, developmentValue: "Please type Comment", comment: nil) }

      /// en translation: Popular Channel
      ///
      /// Key: Popular Channel
      ///
      /// Locales: en, tr
      var popularChannel: RswiftResources.StringResource { .init(key: "Popular Channel", tableName: "Localizable", source: source, developmentValue: "Popular Channel", comment: nil) }

      /// en translation: Popular Channels
      ///
      /// Key: Popular Channels
      ///
      /// Locales: en, tr
      var popularChannels: RswiftResources.StringResource { .init(key: "Popular Channels", tableName: "Localizable", source: source, developmentValue: "Popular Channels", comment: nil) }

      /// en translation: Post
      ///
      /// Key: Post
      ///
      /// Locales: en, tr
      var post: RswiftResources.StringResource { .init(key: "Post", tableName: "Localizable", source: source, developmentValue: "Post", comment: nil) }

      /// en translation: Posts
      ///
      /// Key: Posts
      ///
      /// Locales: en, tr
      var posts: RswiftResources.StringResource { .init(key: "Posts", tableName: "Localizable", source: source, developmentValue: "Posts", comment: nil) }

      /// en translation: Price
      ///
      /// Key: Price
      ///
      /// Locales: en, tr
      var price: RswiftResources.StringResource { .init(key: "Price", tableName: "Localizable", source: source, developmentValue: "Price", comment: nil) }

      /// en translation: Price Max
      ///
      /// Key: Price Max
      ///
      /// Locales: en, tr
      var priceMax: RswiftResources.StringResource { .init(key: "Price Max", tableName: "Localizable", source: source, developmentValue: "Price Max", comment: nil) }

      /// en translation: Price Min
      ///
      /// Key: Price Min
      ///
      /// Locales: en, tr
      var priceMin: RswiftResources.StringResource { .init(key: "Price Min", tableName: "Localizable", source: source, developmentValue: "Price Min", comment: nil) }

      /// en translation: Privacy
      ///
      /// Key: Privacy
      ///
      /// Locales: en, tr
      var privacy: RswiftResources.StringResource { .init(key: "Privacy", tableName: "Localizable", source: source, developmentValue: "Privacy", comment: nil) }

      /// en translation: Privacy Policy
      ///
      /// Key: Privacy Policy
      ///
      /// Locales: en, tr
      var privacyPolicy: RswiftResources.StringResource { .init(key: "Privacy Policy", tableName: "Localizable", source: source, developmentValue: "Privacy Policy", comment: nil) }

      /// en translation: Profile
      ///
      /// Key: Profile
      ///
      /// Locales: en, tr
      var profile: RswiftResources.StringResource { .init(key: "Profile", tableName: "Localizable", source: source, developmentValue: "Profile", comment: nil) }

      /// en translation: Promoted
      ///
      /// Key: Promoted
      ///
      /// Locales: en, tr
      var promoted: RswiftResources.StringResource { .init(key: "Promoted", tableName: "Localizable", source: source, developmentValue: "Promoted", comment: nil) }

      /// en translation: REGISTER
      ///
      /// Key: REGISTER
      ///
      /// Locales: en, tr
      var registeR: RswiftResources.StringResource { .init(key: "REGISTER", tableName: "Localizable", source: source, developmentValue: "REGISTER", comment: nil) }

      /// en translation: REQUEST WITHDRAWAL
      ///
      /// Key: REQUEST WITHDRAWAL
      ///
      /// Locales: en, tr
      var requestwithdrawaL: RswiftResources.StringResource { .init(key: "REQUEST WITHDRAWAL", tableName: "Localizable", source: source, developmentValue: "REQUEST WITHDRAWAL", comment: nil) }

      /// en translation: RESET
      ///
      /// Key: RESET
      ///
      /// Locales: en, tr
      var reseT: RswiftResources.StringResource { .init(key: "RESET", tableName: "Localizable", source: source, developmentValue: "RESET", comment: nil) }

      /// en translation: Ready to stop live streaming?
      ///
      /// Key: Ready to stop live streaming?
      ///
      /// Locales: en, tr
      var readyToStopLiveStreaming: RswiftResources.StringResource { .init(key: "Ready to stop live streaming?", tableName: "Localizable", source: source, developmentValue: "Ready to stop live streaming?", comment: nil) }

      /// en translation: Received Notification when some one
      ///
      /// Key: Received Notification when some one
      ///
      /// Locales: en, tr
      var receivedNotificationWhenSomeOne: RswiftResources.StringResource { .init(key: "Received Notification when some one", tableName: "Localizable", source: source, developmentValue: "Received Notification when some one", comment: nil) }

      /// en translation: Recently Watched
      ///
      /// Key: Recently Watched
      ///
      /// Locales: en, tr
      var recentlyWatched: RswiftResources.StringResource { .init(key: "Recently Watched", tableName: "Localizable", source: source, developmentValue: "Recently Watched", comment: nil) }

      /// en translation: Refresh
      ///
      /// Key: Refresh
      ///
      /// Locales: en, tr
      var refresh: RswiftResources.StringResource { .init(key: "Refresh", tableName: "Localizable", source: source, developmentValue: "Refresh", comment: nil) }

      /// en translation: Register
      ///
      /// Key: Register
      ///
      /// Locales: en, tr
      var register: RswiftResources.StringResource { .init(key: "Register", tableName: "Localizable", source: source, developmentValue: "Register", comment: nil) }

      /// en translation: Remove Account
      ///
      /// Key: Remove Account
      ///
      /// Locales: en, tr
      var removeAccount: RswiftResources.StringResource { .init(key: "Remove Account", tableName: "Localizable", source: source, developmentValue: "Remove Account", comment: nil) }

      /// en translation: Repeat Password
      ///
      /// Key: Repeat Password
      ///
      /// Locales: en, tr
      var repeatPassword: RswiftResources.StringResource { .init(key: "Repeat Password", tableName: "Localizable", source: source, developmentValue: "Repeat Password", comment: nil) }

      /// en translation: Report
      ///
      /// Key: Report
      ///
      /// Locales: en, tr
      var report: RswiftResources.StringResource { .init(key: "Report", tableName: "Localizable", source: source, developmentValue: "Report", comment: nil) }

      /// en translation: Report a Problem
      ///
      /// Key: Report a Problem
      ///
      /// Locales: en, tr
      var reportAProblem: RswiftResources.StringResource { .init(key: "Report a Problem", tableName: "Localizable", source: source, developmentValue: "Report a Problem", comment: nil) }

      /// en translation: Report this Post
      ///
      /// Key: Report this Post
      ///
      /// Locales: en, tr
      var reportThisPost: RswiftResources.StringResource { .init(key: "Report this Post", tableName: "Localizable", source: source, developmentValue: "Report this Post", comment: nil) }

      /// en translation: Request Submit
      ///
      /// Key: Request Submit
      ///
      /// Locales: en, tr
      var requestSubmit: RswiftResources.StringResource { .init(key: "Request Submit", tableName: "Localizable", source: source, developmentValue: "Request Submit", comment: nil) }

      /// en translation: Requested
      ///
      /// Key: Requested
      ///
      /// Locales: en, tr
      var requested: RswiftResources.StringResource { .init(key: "Requested", tableName: "Localizable", source: source, developmentValue: "Requested", comment: nil) }

      /// en translation: Reset filter
      ///
      /// Key: Reset filter
      ///
      /// Locales: en, tr
      var resetFilter: RswiftResources.StringResource { .init(key: "Reset filter", tableName: "Localizable", source: source, developmentValue: "Reset filter", comment: nil) }

      /// en translation: SAVE
      ///
      /// Key: SAVE
      ///
      /// Locales: en, tr
      var savE: RswiftResources.StringResource { .init(key: "SAVE", tableName: "Localizable", source: source, developmentValue: "SAVE", comment: nil) }

      /// en translation: SEND
      ///
      /// Key: SEND
      ///
      /// Locales: en, tr
      var senD: RswiftResources.StringResource { .init(key: "SEND", tableName: "Localizable", source: source, developmentValue: "SEND", comment: nil) }

      /// en translation: SIGN IN
      ///
      /// Key: SIGN IN
      ///
      /// Locales: en, tr
      var signiN: RswiftResources.StringResource { .init(key: "SIGN IN", tableName: "Localizable", source: source, developmentValue: "SIGN IN", comment: nil) }

      /// en translation: SKIP
      ///
      /// Key: SKIP
      ///
      /// Locales: en, tr
      var skiP: RswiftResources.StringResource { .init(key: "SKIP", tableName: "Localizable", source: source, developmentValue: "SKIP", comment: nil) }

      /// en translation: SUBSCRIBE
      ///
      /// Key: SUBSCRIBE
      ///
      /// Locales: en, tr
      var subscribE: RswiftResources.StringResource { .init(key: "SUBSCRIBE", tableName: "Localizable", source: source, developmentValue: "SUBSCRIBE", comment: nil) }

      /// en translation: SUBSCRIBED
      ///
      /// Key: SUBSCRIBED
      ///
      /// Locales: en, tr
      var subscribeD: RswiftResources.StringResource { .init(key: "SUBSCRIBED", tableName: "Localizable", source: source, developmentValue: "SUBSCRIBED", comment: nil) }

      /// en translation: Sad no result!
      ///
      /// Key: Sad no result!
      ///
      /// Locales: en, tr
      var sadNoResult: RswiftResources.StringResource { .init(key: "Sad no result!", tableName: "Localizable", source: source, developmentValue: "Sad no result!", comment: nil) }

      /// en translation: Save
      ///
      /// Key: Save
      ///
      /// Locales: en
      var save: RswiftResources.StringResource { .init(key: "Save", tableName: "Localizable", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Save & Continue
      ///
      /// Key: Save & Continue
      ///
      /// Locales: en, tr
      var saveContinue: RswiftResources.StringResource { .init(key: "Save & Continue", tableName: "Localizable", source: source, developmentValue: "Save & Continue", comment: nil) }

      /// en translation: Search
      ///
      /// Key: Search
      ///
      /// Locales: en, tr
      var search: RswiftResources.StringResource { .init(key: "Search", tableName: "Localizable", source: source, developmentValue: "Search", comment: nil) }

      /// en translation: Search Random
      ///
      /// Key: Search Random
      ///
      /// Locales: en, tr
      var searchRandom: RswiftResources.StringResource { .init(key: "Search Random", tableName: "Localizable", source: source, developmentValue: "Search Random", comment: nil) }

      /// en translation: Security
      ///
      /// Key: Security
      ///
      /// Locales: en, tr
      var security: RswiftResources.StringResource { .init(key: "Security", tableName: "Localizable", source: source, developmentValue: "Security", comment: nil) }

      /// en translation: Select GIF
      ///
      /// Key: Select GIF
      ///
      /// Locales: en, tr
      var selectGIF: RswiftResources.StringResource { .init(key: "Select GIF", tableName: "Localizable", source: source, developmentValue: "Select GIF", comment: nil) }

      /// en translation: Select Image
      ///
      /// Key: Select Image
      ///
      /// Locales: en, tr
      var selectImage: RswiftResources.StringResource { .init(key: "Select Image", tableName: "Localizable", source: source, developmentValue: "Select Image", comment: nil) }

      /// en translation: Select Pictures
      ///
      /// Key: Select Pictures
      ///
      /// Locales: en, tr
      var selectPictures: RswiftResources.StringResource { .init(key: "Select Pictures", tableName: "Localizable", source: source, developmentValue: "Select Pictures", comment: nil) }

      /// en translation: Select Source
      ///
      /// Key: Select Source
      ///
      /// Locales: en, tr
      var selectSource: RswiftResources.StringResource { .init(key: "Select Source", tableName: "Localizable", source: source, developmentValue: "Select Source", comment: nil) }

      /// en translation: Select from your contact list
      ///
      /// Key: Select from your contact list
      ///
      /// Locales: en, tr
      var selectFromYourContactList: RswiftResources.StringResource { .init(key: "Select from your contact list", tableName: "Localizable", source: source, developmentValue: "Select from your contact list", comment: nil) }

      /// en translation: Select what you want
      ///
      /// Key: Select what you want
      ///
      /// Locales: en, tr
      var selectWhatYouWant: RswiftResources.StringResource { .init(key: "Select what you want", tableName: "Localizable", source: source, developmentValue: "Select what you want", comment: nil) }

      /// en translation: Selecte a Category
      ///
      /// Key: Selecte a Category
      ///
      /// Locales: en, tr
      var selecteACategory: RswiftResources.StringResource { .init(key: "Selecte a Category", tableName: "Localizable", source: source, developmentValue: "Selecte a Category", comment: nil) }

      /// en translation: Sell videos at any price
      ///
      /// Key: Sell videos at any price
      ///
      /// Locales: en, tr
      var sellVideosAtAnyPrice: RswiftResources.StringResource { .init(key: "Sell videos at any price", tableName: "Localizable", source: source, developmentValue: "Sell videos at any price", comment: nil) }

      /// en translation: Send
      ///
      /// Key: Send
      ///
      /// Locales: en, tr
      var send: RswiftResources.StringResource { .init(key: "Send", tableName: "Localizable", source: source, developmentValue: "Send", comment: nil) }

      /// en translation: Share
      ///
      /// Key: Share
      ///
      /// Locales: en, tr
      var share: RswiftResources.StringResource { .init(key: "Share", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Share To
      ///
      /// Key: Share To
      ///
      /// Locales: en, tr
      var shareTo: RswiftResources.StringResource { .init(key: "Share To", tableName: "Localizable", source: source, developmentValue: "Share To", comment: nil) }

      /// en translation: Shared
      ///
      /// Key: Shared
      ///
      /// Locales: en, tr
      var shared: RswiftResources.StringResource { .init(key: "Shared", tableName: "Localizable", source: source, developmentValue: "Shared", comment: nil) }

      /// en translation: Show all comments
      ///
      /// Key: Show all comments
      ///
      /// Locales: en, tr
      var showAllComments: RswiftResources.StringResource { .init(key: "Show all comments", tableName: "Localizable", source: source, developmentValue: "Show all comments", comment: nil) }

      /// en translation: Show online users
      ///
      /// Key: Show online users
      ///
      /// Locales: en, tr
      var showOnlineUsers: RswiftResources.StringResource { .init(key: "Show online users", tableName: "Localizable", source: source, developmentValue: "Show online users", comment: nil) }

      /// en translation: Show when user are online
      ///
      /// Key: Show when user are online
      ///
      /// Locales: en, tr
      var showWhenUserAreOnline: RswiftResources.StringResource { .init(key: "Show when user are online", tableName: "Localizable", source: source, developmentValue: "Show when user are online", comment: nil) }

      /// en translation: Show your profile in search engines
      ///
      /// Key: Show your profile in search engines
      ///
      /// Locales: en, tr
      var showYourProfileInSearchEngines: RswiftResources.StringResource { .init(key: "Show your profile in search engines", tableName: "Localizable", source: source, developmentValue: "Show your profile in search engines", comment: nil) }

      /// en translation: Sign Up
      ///
      /// Key: Sign Up
      ///
      /// Locales: en, tr
      var signUp: RswiftResources.StringResource { .init(key: "Sign Up", tableName: "Localizable", source: source, developmentValue: "Sign Up", comment: nil) }

      /// en translation: Social Link
      ///
      /// Key: Social Link
      ///
      /// Locales: en, tr
      var socialLink: RswiftResources.StringResource { .init(key: "Social Link", tableName: "Localizable", source: source, developmentValue: "Social Link", comment: nil) }

      /// tr translation: Sosyal Bağlantılar
      ///
      /// Key: Social Links
      ///
      /// Locales: tr
      var socialLinks: RswiftResources.StringResource { .init(key: "Social Links", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Sort By
      ///
      /// Key: Sort By
      ///
      /// Locales: en, tr
      var sortBy: RswiftResources.StringResource { .init(key: "Sort By", tableName: "Localizable", source: source, developmentValue: "Sort By", comment: nil) }

      /// en translation: Started Messages
      ///
      /// Key: Started Messages
      ///
      /// Locales: en, tr
      var startedMessages: RswiftResources.StringResource { .init(key: "Started Messages", tableName: "Localizable", source: source, developmentValue: "Started Messages", comment: nil) }

      /// en translation: Store
      ///
      /// Key: Store
      ///
      /// Locales: en, tr
      var store: RswiftResources.StringResource { .init(key: "Store", tableName: "Localizable", source: source, developmentValue: "Store", comment: nil) }

      /// en translation: Submit
      ///
      /// Key: Submit
      ///
      /// Locales: en, tr
      var submit: RswiftResources.StringResource { .init(key: "Submit", tableName: "Localizable", source: source, developmentValue: "Submit", comment: nil) }

      /// en translation: Submit Request
      ///
      /// Key: Submit Request
      ///
      /// Locales: en, tr
      var submitRequest: RswiftResources.StringResource { .init(key: "Submit Request", tableName: "Localizable", source: source, developmentValue: "Submit Request", comment: nil) }

      /// en translation: + SUBSCRIBE
      ///
      /// Key: Subscribe
      ///
      /// Locales: en, tr
      var subscribe: RswiftResources.StringResource { .init(key: "Subscribe", tableName: "Localizable", source: source, developmentValue: "+ SUBSCRIBE", comment: nil) }

      /// en translation: ✓ SUBSCRIBED
      ///
      /// Key: Subscribed
      ///
      /// Locales: en, tr
      var subscribed: RswiftResources.StringResource { .init(key: "Subscribed", tableName: "Localizable", source: source, developmentValue: "✓ SUBSCRIBED", comment: nil) }

      /// en translation: Subscribed Successfully
      ///
      /// Key: Subscribed Successfully
      ///
      /// Locales: en, tr
      var subscribedSuccessfully: RswiftResources.StringResource { .init(key: "Subscribed Successfully", tableName: "Localizable", source: source, developmentValue: "Subscribed Successfully", comment: nil) }

      /// en translation: Subscriber
      ///
      /// Key: Subscriber
      ///
      /// Locales: en, tr
      var subscriber: RswiftResources.StringResource { .init(key: "Subscriber", tableName: "Localizable", source: source, developmentValue: "Subscriber", comment: nil) }

      /// en translation: Subscriptions
      ///
      /// Key: Subscriptions
      ///
      /// Locales: en, tr
      var subscriptions: RswiftResources.StringResource { .init(key: "Subscriptions", tableName: "Localizable", source: source, developmentValue: "Subscriptions", comment: nil) }

      /// en translation: Suggested User
      ///
      /// Key: Suggested User
      ///
      /// Locales: en, tr
      var suggestedUser: RswiftResources.StringResource { .init(key: "Suggested User", tableName: "Localizable", source: source, developmentValue: "Suggested User", comment: nil) }

      /// en translation: Suggestion for you
      ///
      /// Key: Suggestion for you
      ///
      /// Locales: en, tr
      var suggestionForYou: RswiftResources.StringResource { .init(key: "Suggestion for you", tableName: "Localizable", source: source, developmentValue: "Suggestion for you", comment: nil) }

      /// en translation: Support
      ///
      /// Key: Support
      ///
      /// Locales: en, tr
      var support: RswiftResources.StringResource { .init(key: "Support", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Switch Camera
      ///
      /// Key: Switch Camera
      ///
      /// Locales: en, tr
      var switchCamera: RswiftResources.StringResource { .init(key: "Switch Camera", tableName: "Localizable", source: source, developmentValue: "Switch Camera", comment: nil) }

      /// en translation: TERMS AND SERVICES
      ///
      /// Key: TERMS AND SERVICES
      ///
      /// Locales: en, tr
      var termsandserviceS: RswiftResources.StringResource { .init(key: "TERMS AND SERVICES", tableName: "Localizable", source: source, developmentValue: "TERMS AND SERVICES", comment: nil) }

      /// en translation: TERMS OF SERVICE
      ///
      /// Key: TERMS OF SERVICE
      ///
      /// Locales: en, tr
      var termsofservicE: RswiftResources.StringResource { .init(key: "TERMS OF SERVICE", tableName: "Localizable", source: source, developmentValue: "TERMS OF SERVICE", comment: nil) }

      /// en translation: Tags
      ///
      /// Key: Tags
      ///
      /// Locales: en, tr
      var tags: RswiftResources.StringResource { .init(key: "Tags", tableName: "Localizable", source: source, developmentValue: "Tags", comment: nil) }

      /// en translation:  Tap 'Yes' to end your stream or 'No' to countinue
      ///
      /// Key: Tap 'Yes' to end your stream or 'No' to countinue
      ///
      /// Locales: en, tr
      var tapYesToEndYourStreamOrNoToCountinue: RswiftResources.StringResource { .init(key: "Tap 'Yes' to end your stream or 'No' to countinue", tableName: "Localizable", source: source, developmentValue: "\nTap 'Yes' to end your stream or 'No' to countinue", comment: nil) }

      /// en translation: Term of use
      ///
      /// Key: Term of use
      ///
      /// Locales: en, tr
      var termOfUse: RswiftResources.StringResource { .init(key: "Term of use", tableName: "Localizable", source: source, developmentValue: "Term of use", comment: nil) }

      /// en translation: Terms & Condition
      ///
      /// Key: Terms & Condition
      ///
      /// Locales: en, tr
      var termsCondition: RswiftResources.StringResource { .init(key: "Terms & Condition", tableName: "Localizable", source: source, developmentValue: "Terms & Condition", comment: nil) }

      /// en translation: Terms Of Service
      ///
      /// Key: Terms Of Service
      ///
      /// Locales: en, tr
      var termsOfService: RswiftResources.StringResource { .init(key: "Terms Of Service", tableName: "Localizable", source: source, developmentValue: "Terms Of Service", comment: nil) }

      /// en translation: Text
      ///
      /// Key: Text
      ///
      /// Locales: en, tr
      var text: RswiftResources.StringResource { .init(key: "Text", tableName: "Localizable", source: source, developmentValue: "Text", comment: nil) }

      /// en translation: Theme
      ///
      /// Key: Theme
      ///
      /// Locales: en, tr
      var theme: RswiftResources.StringResource { .init(key: "Theme", tableName: "Localizable", source: source, developmentValue: "Theme", comment: nil) }

      /// en translation: There are no blocked users
      ///
      /// Key: There are no blocked users
      ///
      /// Locales: en, tr
      var thereAreNoBlockedUsers: RswiftResources.StringResource { .init(key: "There are no blocked users", tableName: "Localizable", source: source, developmentValue: "There are no blocked users", comment: nil) }

      /// en translation: There are no call Logs to clear
      ///
      /// Key: There are no call Logs to clear
      ///
      /// Locales: en, tr
      var thereAreNoCallLogsToClear: RswiftResources.StringResource { .init(key: "There are no call Logs to clear", tableName: "Localizable", source: source, developmentValue: "There are no call Logs to clear", comment: nil) }

      /// en translation: There is no Group request
      ///
      /// Key: There is no Group request
      ///
      /// Locales: en, tr
      var thereIsNoGroupRequest: RswiftResources.StringResource { .init(key: "There is no Group request", tableName: "Localizable", source: source, developmentValue: "There is no Group request", comment: nil) }

      /// en translation: There is no chat available. start chatting with friends.;
      ///
      /// Key: There is no chat available. start chatting with friends.
      ///
      /// Locales: en, tr
      var thereIsNoChatAvailableStartChattingWithFriends: RswiftResources.StringResource { .init(key: "There is no chat available. start chatting with friends.", tableName: "Localizable", source: source, developmentValue: "There is no chat available. start chatting with friends.;", comment: nil) }

      /// en translation: This Month
      ///
      /// Key: This Month
      ///
      /// Locales: en, tr
      var thisMonth: RswiftResources.StringResource { .init(key: "This Month", tableName: "Localizable", source: source, developmentValue: "This Month", comment: nil) }

      /// en translation: This Week
      ///
      /// Key: This Week
      ///
      /// Locales: en, tr
      var thisWeek: RswiftResources.StringResource { .init(key: "This Week", tableName: "Localizable", source: source, developmentValue: "This Week", comment: nil) }

      /// en translation: This Year
      ///
      /// Key: This Year
      ///
      /// Locales: en, tr
      var thisYear: RswiftResources.StringResource { .init(key: "This Year", tableName: "Localizable", source: source, developmentValue: "This Year", comment: nil) }

      /// en translation: Time By
      ///
      /// Key: Time By
      ///
      /// Locales: en, tr
      var timeBy: RswiftResources.StringResource { .init(key: "Time By", tableName: "Localizable", source: source, developmentValue: "Time By", comment: nil) }

      /// en translation: Title
      ///
      /// Key: Title
      ///
      /// Locales: en, tr
      var title: RswiftResources.StringResource { .init(key: "Title", tableName: "Localizable", source: source, developmentValue: "Title", comment: nil) }

      /// en translation: Explore Everything
      ///
      /// Key: Title1
      ///
      /// Locales: en, tr
      var title1: RswiftResources.StringResource { .init(key: "Title1", tableName: "Localizable", source: source, developmentValue: "Explore Everything", comment: nil) }

      /// en translation: Liked & Follow
      ///
      /// Key: Title2
      ///
      /// Locales: en, tr
      var title2: RswiftResources.StringResource { .init(key: "Title2", tableName: "Localizable", source: source, developmentValue: "Liked & Follow", comment: nil) }

      /// en translation: Save & Favorite
      ///
      /// Key: Title3
      ///
      /// Locales: en, tr
      var title3: RswiftResources.StringResource { .init(key: "Title3", tableName: "Localizable", source: source, developmentValue: "Save & Favorite", comment: nil) }

      /// en translation: To log in, you need to verify  your identity.
      ///
      /// Key: To log in, you need to verify  your identity.
      ///
      /// Locales: en, tr
      var toLogInYouNeedToVerifyYourIdentity: RswiftResources.StringResource { .init(key: "To log in, you need to verify  your identity.", tableName: "Localizable", source: source, developmentValue: "To log in, you need to verify  your identity.", comment: nil) }

      /// en translation: Today
      ///
      /// Key: Today
      ///
      /// Locales: en, tr
      var today: RswiftResources.StringResource { .init(key: "Today", tableName: "Localizable", source: source, developmentValue: "Today", comment: nil) }

      /// en translation: Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.
      ///
      /// Key: Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.
      ///
      /// Locales: en, tr
      var turnOn2StepLoginLevelUpYourAccountSSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSentToYourPhoneOrEmailToLogIn: RswiftResources.StringResource { .init(key: "Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.", tableName: "Localizable", source: source, developmentValue: "Turn on 2 step login level-up your account's security. Once turned on. you'll use both your password and a 6-digit security code sent to your phone or email to log in.", comment: nil) }

      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Key: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      var turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn: RswiftResources.StringResource { .init(key: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", tableName: "Localizable", source: source, developmentValue: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", comment: nil) }

      /// en translation: Two Factor Authentication
      ///
      /// Key: Two Factor
      ///
      /// Locales: en, tr
      var twoFactor: RswiftResources.StringResource { .init(key: "Two Factor", tableName: "Localizable", source: source, developmentValue: "Two Factor Authentication", comment: nil) }

      /// en translation: Type Something
      ///
      /// Key: Type Something
      ///
      /// Locales: en, tr
      var typeSomething: RswiftResources.StringResource { .init(key: "Type Something", tableName: "Localizable", source: source, developmentValue: "Type Something", comment: nil) }

      /// en translation: Type Something
      ///
      /// Key: Type Someting
      ///
      /// Locales: en, tr
      var typeSometing: RswiftResources.StringResource { .init(key: "Type Someting", tableName: "Localizable", source: source, developmentValue: "Type Something", comment: nil) }

      /// en translation: USERS
      ///
      /// Key: USERS
      ///
      /// Locales: en, tr
      var userS: RswiftResources.StringResource { .init(key: "USERS", tableName: "Localizable", source: source, developmentValue: "USERS", comment: nil) }

      /// en translation: Unblocked
      ///
      /// Key: Unblocked
      ///
      /// Locales: en, tr
      var unblocked: RswiftResources.StringResource { .init(key: "Unblocked", tableName: "Localizable", source: source, developmentValue: "Unblocked", comment: nil) }

      /// en translation: Update Funding
      ///
      /// Key: Update Funding
      ///
      /// Locales: en, tr
      var updateFunding: RswiftResources.StringResource { .init(key: "Update Funding", tableName: "Localizable", source: source, developmentValue: "Update Funding", comment: nil) }

      /// en translation: Update Group
      ///
      /// Key: Update Group
      ///
      /// Locales: en, tr
      var updateGroup: RswiftResources.StringResource { .init(key: "Update Group", tableName: "Localizable", source: source, developmentValue: "Update Group", comment: nil) }

      /// en translation: Upgrade Now
      ///
      /// Key: Upgrade Now
      ///
      /// Locales: en, tr
      var upgradeNow: RswiftResources.StringResource { .init(key: "Upgrade Now", tableName: "Localizable", source: source, developmentValue: "Upgrade Now", comment: nil) }

      /// en translation: Upload Video
      ///
      /// Key: Upload Video
      ///
      /// Locales: en, tr
      var uploadVideo: RswiftResources.StringResource { .init(key: "Upload Video", tableName: "Localizable", source: source, developmentValue: "Upload Video", comment: nil) }

      /// en translation: Upload to 1GB
      ///
      /// Key: Upload to 1GB
      ///
      /// Locales: en, tr
      var uploadTo1GB: RswiftResources.StringResource { .init(key: "Upload to 1GB", tableName: "Localizable", source: source, developmentValue: "Upload to 1GB", comment: nil) }

      /// en translation: Upload unlimited videos
      ///
      /// Key: Upload unlimited videos
      ///
      /// Locales: en, tr
      var uploadUnlimitedVideos: RswiftResources.StringResource { .init(key: "Upload unlimited videos", tableName: "Localizable", source: source, developmentValue: "Upload unlimited videos", comment: nil) }

      /// en translation: User Info
      ///
      /// Key: User Info
      ///
      /// Locales: en, tr
      var userInfo: RswiftResources.StringResource { .init(key: "User Info", tableName: "Localizable", source: source, developmentValue: "User Info", comment: nil) }

      /// en translation: User Profile
      ///
      /// Key: User Profile
      ///
      /// Locales: en, tr
      var userProfile: RswiftResources.StringResource { .init(key: "User Profile", tableName: "Localizable", source: source, developmentValue: "User Profile", comment: nil) }

      /// en translation: User Suggestion
      ///
      /// Key: User Suggestion
      ///
      /// Locales: en, tr
      var userSuggestion: RswiftResources.StringResource { .init(key: "User Suggestion", tableName: "Localizable", source: source, developmentValue: "User Suggestion", comment: nil) }

      /// en translation: User has been blocked!
      ///
      /// Key: User has been blocked!
      ///
      /// Locales: en, tr
      var userHasBeenBlocked: RswiftResources.StringResource { .init(key: "User has been blocked!", tableName: "Localizable", source: source, developmentValue: "User has been blocked!", comment: nil) }

      /// en translation: VERIFY
      ///
      /// Key: VERIFY
      ///
      /// Locales: en, tr
      var verifY: RswiftResources.StringResource { .init(key: "VERIFY", tableName: "Localizable", source: source, developmentValue: "VERIFY", comment: nil) }

      /// en translation: VIDEOS
      ///
      /// Key: VIDEOS
      ///
      /// Locales: en, tr
      var videoS: RswiftResources.StringResource { .init(key: "VIDEOS", tableName: "Localizable", source: source, developmentValue: "VIDEOS", comment: nil) }

      /// en translation: Verification
      ///
      /// Key: Verification
      ///
      /// Locales: en, tr
      var verification: RswiftResources.StringResource { .init(key: "Verification", tableName: "Localizable", source: source, developmentValue: "Verification", comment: nil) }

      /// en translation: Verification of the Profile!
      ///
      /// Key: Verification of the Profile!
      ///
      /// Locales: en, tr
      var verificationOfTheProfile: RswiftResources.StringResource { .init(key: "Verification of the Profile!", tableName: "Localizable", source: source, developmentValue: "Verification of the Profile!", comment: nil) }

      /// en translation: Verified badge
      ///
      /// Key: Verified badge
      ///
      /// Locales: en, tr
      var verifiedBadge: RswiftResources.StringResource { .init(key: "Verified badge", tableName: "Localizable", source: source, developmentValue: "Verified badge", comment: nil) }

      /// en translation: Video
      ///
      /// Key: Video
      ///
      /// Locales: en, tr
      var video: RswiftResources.StringResource { .init(key: "Video", tableName: "Localizable", source: source, developmentValue: "Video", comment: nil) }

      /// en translation: Video Gallery
      ///
      /// Key: Video Gallery
      ///
      /// Locales: en, tr
      var videoGallery: RswiftResources.StringResource { .init(key: "Video Gallery", tableName: "Localizable", source: source, developmentValue: "Video Gallery", comment: nil) }

      /// en translation: Video Mute
      ///
      /// Key: Video Mute
      ///
      /// Locales: en, tr
      var videoMute: RswiftResources.StringResource { .init(key: "Video Mute", tableName: "Localizable", source: source, developmentValue: "Video Mute", comment: nil) }

      /// en translation: Video Reported successfully!!
      ///
      /// Key: Video Reported successfully!!
      ///
      /// Locales: en, tr
      var videoReportedSuccessfully: RswiftResources.StringResource { .init(key: "Video Reported successfully!!", tableName: "Localizable", source: source, developmentValue: "Video Reported successfully!!", comment: nil) }

      /// en translation: Video removed from the list
      ///
      /// Key: Video removed from the list
      ///
      /// Locales: en, tr
      var videoRemovedFromTheList: RswiftResources.StringResource { .init(key: "Video removed from the list", tableName: "Localizable", source: source, developmentValue: "Video removed from the list", comment: nil) }

      /// en translation: Videos ads will show up
      ///
      /// Key: Videos ads will show up
      ///
      /// Locales: en, tr
      var videosAdsWillShowUp: RswiftResources.StringResource { .init(key: "Videos ads will show up", tableName: "Localizable", source: source, developmentValue: "Videos ads will show up", comment: nil) }

      /// en translation: View
      ///
      /// Key: View
      ///
      /// Locales: en, tr
      var view: RswiftResources.StringResource { .init(key: "View", tableName: "Localizable", source: source, developmentValue: "View", comment: nil) }

      /// en translation: View Profile
      ///
      /// Key: View Profile
      ///
      /// Locales: en, tr
      var viewProfile: RswiftResources.StringResource { .init(key: "View Profile", tableName: "Localizable", source: source, developmentValue: "View Profile", comment: nil) }

      /// en translation: View all Follow Request
      ///
      /// Key: View all Follow Request
      ///
      /// Locales: en, tr
      var viewAllFollowRequest: RswiftResources.StringResource { .init(key: "View all Follow Request", tableName: "Localizable", source: source, developmentValue: "View all Follow Request", comment: nil) }

      /// en translation: Views
      ///
      /// Key: Views
      ///
      /// Locales: en, tr
      var views: RswiftResources.StringResource { .init(key: "Views", tableName: "Localizable", source: source, developmentValue: "Views", comment: nil) }

      /// en translation: Warning !
      ///
      /// Key: Warning !
      ///
      /// Locales: en, tr
      var warning: RswiftResources.StringResource { .init(key: "Warning !", tableName: "Localizable", source: source, developmentValue: "Warning !", comment: nil) }

      /// en translation: Watch Later
      ///
      /// Key: Watch Later
      ///
      /// Locales: en, tr
      var watchLater: RswiftResources.StringResource { .init(key: "Watch Later", tableName: "Localizable", source: source, developmentValue: "Watch Later", comment: nil) }

      /// en translation: Watch offline
      ///
      /// Key: Watch offline
      ///
      /// Locales: en, tr
      var watchOffline: RswiftResources.StringResource { .init(key: "Watch offline", tableName: "Localizable", source: source, developmentValue: "Watch offline", comment: nil) }

      /// en translation: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Key: We cannot find the keyword you are searching form maybe a little spelling mistake?
      ///
      /// Locales: en, tr
      var weCannotFindTheKeywordYouAreSearchingFormMaybeALittleSpellingMistake: RswiftResources.StringResource { .init(key: "We cannot find the keyword you are searching form maybe a little spelling mistake?", tableName: "Localizable", source: source, developmentValue: "We cannot find the keyword you are searching form maybe a little spelling mistake?", comment: nil) }

      /// en translation: Website
      ///
      /// Key: Website
      ///
      /// Locales: en, tr
      var website: RswiftResources.StringResource { .init(key: "Website", tableName: "Localizable", source: source, developmentValue: "Website", comment: nil) }

      /// en translation: Where do you want to share it?
      ///
      /// Key: Where do you want to share it?
      ///
      /// Locales: en, tr
      var whereDoYouWantToShareIt: RswiftResources.StringResource { .init(key: "Where do you want to share it?", tableName: "Localizable", source: source, developmentValue: "Where do you want to share it?", comment: nil) }

      /// en translation: Who can direct message you?
      ///
      /// Key: Who can direct message you?
      ///
      /// Locales: en, tr
      var whoCanDirectMessageYou: RswiftResources.StringResource { .init(key: "Who can direct message you?", tableName: "Localizable", source: source, developmentValue: "Who can direct message you?", comment: nil) }

      /// en translation: Who can follow me?
      ///
      /// Key: Who can follow me?
      ///
      /// Locales: en, tr
      var whoCanFollowMe: RswiftResources.StringResource { .init(key: "Who can follow me?", tableName: "Localizable", source: source, developmentValue: "Who can follow me?", comment: nil) }

      /// en translation: Who can message me?
      ///
      /// Key: Who can message me?
      ///
      /// Locales: en, tr
      var whoCanMessageMe: RswiftResources.StringResource { .init(key: "Who can message me?", tableName: "Localizable", source: source, developmentValue: "Who can message me?", comment: nil) }

      /// en translation: Who can see my birthday?
      ///
      /// Key: Who can see my birthday?
      ///
      /// Locales: en, tr
      var whoCanSeeMyBirthday: RswiftResources.StringResource { .init(key: "Who can see my birthday?", tableName: "Localizable", source: source, developmentValue: "Who can see my birthday?", comment: nil) }

      /// en translation: Who can view your profile?
      ///
      /// Key: Who can view your profile?
      ///
      /// Locales: en, tr
      var whoCanViewYourProfile: RswiftResources.StringResource { .init(key: "Who can view your profile?", tableName: "Localizable", source: source, developmentValue: "Who can view your profile?", comment: nil) }

      /// en translation: Widthdrawals
      ///
      /// Key: Widthdrawals
      ///
      /// Locales: en, tr
      var widthdrawals: RswiftResources.StringResource { .init(key: "Widthdrawals", tableName: "Localizable", source: source, developmentValue: "Widthdrawals", comment: nil) }

      /// en translation: Withdrawals
      ///
      /// Key: Withdrawals
      ///
      /// Locales: en, tr
      var withdrawals: RswiftResources.StringResource { .init(key: "Withdrawals", tableName: "Localizable", source: source, developmentValue: "Withdrawals", comment: nil) }

      /// en translation: Workspace
      ///
      /// Key: Workspace
      ///
      /// Locales: en, tr
      var workspace: RswiftResources.StringResource { .init(key: "Workspace", tableName: "Localizable", source: source, developmentValue: "Workspace", comment: nil) }

      /// en translation: YES
      ///
      /// Key: YES
      ///
      /// Locales: en, tr
      var yeS: RswiftResources.StringResource { .init(key: "YES", tableName: "Localizable", source: source, developmentValue: "YES", comment: nil) }

      /// en translation: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Key: Yes, I wan to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, tr
      var yesIWanToDeletePermanentlyFromPixelPhotoAccount: RswiftResources.StringResource { .init(key: "Yes, I wan to delete permanently from PixelPhoto Account.", tableName: "Localizable", source: source, developmentValue: "Yes, I wan to delete permanently from PixelPhoto Account.", comment: nil) }

      /// en translation: Yes, I want to delete permanently from PixelPhoto Account.
      ///
      /// Key: Yes, I want to delete permanently from PixelPhoto Account.
      ///
      /// Locales: en, tr
      var yesIWantToDeletePermanentlyFromPixelPhotoAccount: RswiftResources.StringResource { .init(key: "Yes, I want to delete permanently from PixelPhoto Account.", tableName: "Localizable", source: source, developmentValue: "Yes, I want to delete permanently from PixelPhoto Account.", comment: nil) }

      /// en translation: You
      ///
      /// Key: You
      ///
      /// Locales: en, tr
      var you: RswiftResources.StringResource { .init(key: "You", tableName: "Localizable", source: source, developmentValue: "You", comment: nil) }

      /// en translation: You cannot block this user because it is administrator
      ///
      /// Key: You cannot block this user because it is administrator
      ///
      /// Locales: en, tr
      var youCannotBlockThisUserBecauseItIsAdministrator: RswiftResources.StringResource { .init(key: "You cannot block this user because it is administrator", tableName: "Localizable", source: source, developmentValue: "You cannot block this user because it is administrator", comment: nil) }

      /// en translation: Your Message here...
      ///
      /// Key: Your Message here...
      ///
      /// Locales: en, tr
      var yourMessageHere: RswiftResources.StringResource { .init(key: "Your Message here...", tableName: "Localizable", source: source, developmentValue: "Your Message here...", comment: nil) }

      /// en translation: Your Photo
      ///
      /// Key: Your Photo
      ///
      /// Locales: en, tr
      var yourPhoto: RswiftResources.StringResource { .init(key: "Your Photo", tableName: "Localizable", source: source, developmentValue: "Your Photo", comment: nil) }

      /// en translation: Your Story
      ///
      /// Key: Your Story
      ///
      /// Locales: en, tr
      var yourStory: RswiftResources.StringResource { .init(key: "Your Story", tableName: "Localizable", source: source, developmentValue: "Your Story", comment: nil) }

      /// en translation: Your balance is $0, minimum withdrawal request is $50
      ///
      /// Key: Your balance is $0, minimum withdrawal request is $50
      ///
      /// Locales: en, tr
      var yourBalanceIs0MinimumWithdrawalRequestIs50: RswiftResources.StringResource { .init(key: "Your balance is $0, minimum withdrawal request is $50", tableName: "Localizable", source: source, developmentValue: "Your balance is $0, minimum withdrawal request is $50", comment: nil) }

      /// en translation: Your facebook profile url
      ///
      /// Key: Your facebook profile url
      ///
      /// Locales: en, tr
      var yourFacebookProfileUrl: RswiftResources.StringResource { .init(key: "Your facebook profile url", tableName: "Localizable", source: source, developmentValue: "Your facebook profile url", comment: nil) }

      /// en translation: Your google-plus profile url
      ///
      /// Key: Your google-plus profile url
      ///
      /// Locales: en, tr
      var yourGooglePlusProfileUrl: RswiftResources.StringResource { .init(key: "Your google-plus profile url", tableName: "Localizable", source: source, developmentValue: "Your google-plus profile url", comment: nil) }

      /// en translation: Your report has been sent
      ///
      /// Key: Your report has been sent
      ///
      /// Locales: en, tr
      var yourReportHasBeenSent: RswiftResources.StringResource { .init(key: "Your report has been sent", tableName: "Localizable", source: source, developmentValue: "Your report has been sent", comment: nil) }

      /// en translation: Your twitter profile url
      ///
      /// Key: Your twitter profile url
      ///
      /// Locales: en, tr
      var yourTwitterProfileUrl: RswiftResources.StringResource { .init(key: "Your twitter profile url", tableName: "Localizable", source: source, developmentValue: "Your twitter profile url", comment: nil) }

      /// en translation: birthday Privacy
      ///
      /// Key: birthday Privacy
      ///
      /// Locales: en, tr
      var birthdayPrivacy: RswiftResources.StringResource { .init(key: "birthday Privacy", tableName: "Localizable", source: source, developmentValue: "birthday Privacy", comment: nil) }

      /// en translation: count
      ///
      /// Key: count
      ///
      /// Locales: en, tr
      var count: RswiftResources.StringResource { .init(key: "count", tableName: "Localizable", source: source, developmentValue: "count", comment: nil) }

      /// en translation: e have sent you the confirmation code to your email address.
      ///
      /// Key: e have sent you the confirmation code to your email address.
      ///
      /// Locales: en, tr
      var eHaveSentYouTheConfirmationCodeToYourEmailAddress: RswiftResources.StringResource { .init(key: "e have sent you the confirmation code to your email address.", tableName: "Localizable", source: source, developmentValue: "e have sent you the confirmation code to your email address.", comment: nil) }

      /// en translation: Start to follow you
      ///
      /// Key: followed you
      ///
      /// Locales: en, tr
      var followedYou: RswiftResources.StringResource { .init(key: "followed you", tableName: "Localizable", source: source, developmentValue: "Start to follow you", comment: nil) }

      /// en translation: get Notification when you receive messages
      ///
      /// Key: get Notification when you receive messages
      ///
      /// Locales: en, tr
      var getNotificationWhenYouReceiveMessages: RswiftResources.StringResource { .init(key: "get Notification when you receive messages", tableName: "Localizable", source: source, developmentValue: "get Notification when you receive messages", comment: nil) }

      /// en translation: liked your comment
      ///
      /// Key: liked your post
      ///
      /// Locales: en, tr
      var likedYourPost: RswiftResources.StringResource { .init(key: "liked your post", tableName: "Localizable", source: source, developmentValue: "liked your comment", comment: nil) }

      /// en translation: mentioned you in a comment
      ///
      /// Key: mentioned you in a comment
      ///
      /// Locales: en, tr
      var mentionedYouInAComment: RswiftResources.StringResource { .init(key: "mentioned you in a comment", tableName: "Localizable", source: source, developmentValue: "mentioned you in a comment", comment: nil) }

      /// en translation: mentioned you in a post
      ///
      /// Key: mentioned you in a post
      ///
      /// Locales: en, tr
      var mentionedYouInAPost: RswiftResources.StringResource { .init(key: "mentioned you in a post", tableName: "Localizable", source: source, developmentValue: "mentioned you in a post", comment: nil) }

      /// en translation: no likes yet
      ///
      /// Key: no likes yet
      ///
      /// Locales: en, tr
      var noLikesYet: RswiftResources.StringResource { .init(key: "no likes yet", tableName: "Localizable", source: source, developmentValue: "no likes yet", comment: nil) }

      /// en translation: select a playlist
      ///
      /// Key: select a playlist
      ///
      /// Locales: en, tr
      var selectAPlaylist: RswiftResources.StringResource { .init(key: "select a playlist", tableName: "Localizable", source: source, developmentValue: "select a playlist", comment: nil) }

      /// en translation: sells
      ///
      /// Key: sells
      ///
      /// Locales: en, tr
      var sells: RswiftResources.StringResource { .init(key: "sells", tableName: "Localizable", source: source, developmentValue: "sells", comment: nil) }

      /// en translation: someone is calling you
      ///
      /// Key: someone is calling you
      ///
      /// Locales: en, tr
      var someoneIsCallingYou: RswiftResources.StringResource { .init(key: "someone is calling you", tableName: "Localizable", source: source, developmentValue: "someone is calling you", comment: nil) }

      /// en translation: something to show
      ///
      /// Key: something to show
      ///
      /// Locales: en, tr
      var somethingToShow: RswiftResources.StringResource { .init(key: "something to show", tableName: "Localizable", source: source, developmentValue: "something to show", comment: nil) }

      /// en translation: unsubscribed
      ///
      /// Key: unsubscribed
      ///
      /// Locales: en, tr
      var unsubscribed: RswiftResources.StringResource { .init(key: "unsubscribed", tableName: "Localizable", source: source, developmentValue: "unsubscribed", comment: nil) }

      /// en translation: update Playlist
      ///
      /// Key: update Playlist
      ///
      /// Locales: en, tr
      var updatePlaylist: RswiftResources.StringResource { .init(key: "update Playlist", tableName: "Localizable", source: source, developmentValue: "update Playlist", comment: nil) }

      /// en translation: upload
      ///
      /// Key: upload
      ///
      /// Locales: en, tr
      var upload: RswiftResources.StringResource { .init(key: "upload", tableName: "Localizable", source: source, developmentValue: "upload", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 23 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `Color`.
    var color: RswiftResources.ColorResource { .init(name: "Color", path: [], bundle: bundle) }

    /// Color `Color-1`.
    var color1: RswiftResources.ColorResource { .init(name: "Color-1", path: [], bundle: bundle) }

    /// Color `Color-2`.
    var color2: RswiftResources.ColorResource { .init(name: "Color-2", path: [], bundle: bundle) }

    /// Color `Color-3`.
    var color3: RswiftResources.ColorResource { .init(name: "Color-3", path: [], bundle: bundle) }

    /// Color `Color-4`.
    var color4: RswiftResources.ColorResource { .init(name: "Color-4", path: [], bundle: bundle) }

    /// Color `Fill_Colors_Secondary`.
    var fill_Colors_Secondary: RswiftResources.ColorResource { .init(name: "Fill_Colors_Secondary", path: [], bundle: bundle) }

    /// Color `Fill_Colors_Tertiary`.
    var fill_Colors_Tertiary: RswiftResources.ColorResource { .init(name: "Fill_Colors_Tertiary", path: [], bundle: bundle) }

    /// Color `Label_Colors_Primary`.
    var label_Colors_Primary: RswiftResources.ColorResource { .init(name: "Label_Colors_Primary", path: [], bundle: bundle) }

    /// Color `Label_Colors_Secondary`.
    var label_Colors_Secondary: RswiftResources.ColorResource { .init(name: "Label_Colors_Secondary", path: [], bundle: bundle) }

    /// Color `Label_Colors_Tertiary`.
    var label_Colors_Tertiary: RswiftResources.ColorResource { .init(name: "Label_Colors_Tertiary", path: [], bundle: bundle) }

    /// Color `Primary_UI_Primary`.
    var primary_UI_Primary: RswiftResources.ColorResource { .init(name: "Primary_UI_Primary", path: [], bundle: bundle) }

    /// Color `Primary_UI_Tertiary`.
    var primary_UI_Tertiary: RswiftResources.ColorResource { .init(name: "Primary_UI_Tertiary", path: [], bundle: bundle) }

    /// Color `Separator_Colors_Non_opaque`.
    var separator_Colors_Non_opaque: RswiftResources.ColorResource { .init(name: "Separator_Colors_Non_opaque", path: [], bundle: bundle) }

    /// Color `Separator_Colors_Opaque`.
    var separator_Colors_Opaque: RswiftResources.ColorResource { .init(name: "Separator_Colors_Opaque", path: [], bundle: bundle) }

    /// Color `System_Backgrounds_Primary`.
    var system_Backgrounds_Primary: RswiftResources.ColorResource { .init(name: "System_Backgrounds_Primary", path: [], bundle: bundle) }

    /// Color `bgcolor1`.
    var bgcolor1: RswiftResources.ColorResource { .init(name: "bgcolor1", path: [], bundle: bundle) }

    /// Color `bgcolor2`.
    var bgcolor2: RswiftResources.ColorResource { .init(name: "bgcolor2", path: [], bundle: bundle) }

    /// Color `btnColor`.
    var btnColor: RswiftResources.ColorResource { .init(name: "btnColor", path: [], bundle: bundle) }

    /// Color `buttonColor`.
    var buttonColor: RswiftResources.ColorResource { .init(name: "buttonColor", path: [], bundle: bundle) }

    /// Color `fontcolor`.
    var fontcolor: RswiftResources.ColorResource { .init(name: "fontcolor", path: [], bundle: bundle) }

    /// Color `mainColor`.
    var mainColor: RswiftResources.ColorResource { .init(name: "mainColor", path: [], bundle: bundle) }

    /// Color `tabBar`.
    var tabBar: RswiftResources.ColorResource { .init(name: "tabBar", path: [], bundle: bundle) }

    /// Color `textColor`.
    var textColor: RswiftResources.ColorResource { .init(name: "textColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 273 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `BG`.
    var bG: RswiftResources.ImageResource { .init(name: "BG", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Bold_ant_design_heart_filled`.
    var bold_ant_design_heart_filled: RswiftResources.ImageResource { .init(name: "Bold_ant_design_heart_filled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Cat_Animals`.
    var cat_Animals: RswiftResources.ImageResource { .init(name: "Cat_Animals", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Cat_Entertainment`.
    var cat_Entertainment: RswiftResources.ImageResource { .init(name: "Cat_Entertainment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ChecksMarks`.
    var checksMarks: RswiftResources.ImageResource { .init(name: "ChecksMarks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Fire`.
    var fire: RswiftResources.ImageResource { .init(name: "Fire", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Fire_1`.
    var fire_1: RswiftResources.ImageResource { .init(name: "Fire_1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Group`.
    var group: RswiftResources.ImageResource { .init(name: "Group", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Hearts`.
    var hearts: RswiftResources.ImageResource { .init(name: "Hearts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Notification`.
    var notification: RswiftResources.ImageResource { .init(name: "Notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Arrow_Left`.
    var outline_Arrow_Left: RswiftResources.ImageResource { .init(name: "Outline_Arrow_Left", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Arrow_Left_Black`.
    var outline_Arrow_Left_Black: RswiftResources.ImageResource { .init(name: "Outline_Arrow_Left_Black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Arrow_Left_Grey`.
    var outline_Arrow_Left_Grey: RswiftResources.ImageResource { .init(name: "Outline_Arrow_Left_Grey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Delete`.
    var outline_Delete: RswiftResources.ImageResource { .init(name: "Outline_Delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Download`.
    var outline_Download: RswiftResources.ImageResource { .init(name: "Outline_Download", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Filter_Grey`.
    var outline_Filter_Grey: RswiftResources.ImageResource { .init(name: "Outline_Filter_Grey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Plus`.
    var outline_Plus: RswiftResources.ImageResource { .init(name: "Outline_Plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Plus_ Secondary`.
    var outline_Plus_Secondary: RswiftResources.ImageResource { .init(name: "Outline_Plus_ Secondary", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Setting`.
    var outline_Setting: RswiftResources.ImageResource { .init(name: "Outline_Setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Show_white`.
    var outline_Show_white: RswiftResources.ImageResource { .init(name: "Outline_Show_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Time_Circle`.
    var outline_Time_Circle: RswiftResources.ImageResource { .init(name: "Outline_Time_Circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Upload`.
    var outline_Upload: RswiftResources.ImageResource { .init(name: "Outline_Upload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Upload_ Secondary`.
    var outline_Upload_Secondary: RswiftResources.ImageResource { .init(name: "Outline_Upload_ Secondary", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_Video_list`.
    var outline_Video_list: RswiftResources.ImageResource { .init(name: "Outline_Video_list", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_ant_design_heart_filled`.
    var outline_ant_design_heart_filled: RswiftResources.ImageResource { .init(name: "Outline_ant_design_heart_filled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_chevron_down`.
    var outline_chevron_down: RswiftResources.ImageResource { .init(name: "Outline_chevron_down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_close_Grey`.
    var outline_close_Grey: RswiftResources.ImageResource { .init(name: "Outline_close_Grey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_comment_white`.
    var outline_comment_white: RswiftResources.ImageResource { .init(name: "Outline_comment_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_donate_heart_ Secondary`.
    var outline_donate_heart_Secondary: RswiftResources.ImageResource { .init(name: "Outline_donate_heart_ Secondary", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_history_Black`.
    var outline_history_Black: RswiftResources.ImageResource { .init(name: "Outline_history_Black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_history_Grey`.
    var outline_history_Grey: RswiftResources.ImageResource { .init(name: "Outline_history_Grey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_more_vertical_gray`.
    var outline_more_vertical_gray: RswiftResources.ImageResource { .init(name: "Outline_more_vertical_gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_send`.
    var outline_send: RswiftResources.ImageResource { .init(name: "Outline_send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_thumbs_down_ Secondary`.
    var outline_thumbs_down_Secondary: RswiftResources.ImageResource { .init(name: "Outline_thumbs_down_ Secondary", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_thumbs_down_white`.
    var outline_thumbs_down_white: RswiftResources.ImageResource { .init(name: "Outline_thumbs_down_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_thumbs_up_ Secondary`.
    var outline_thumbs_up_Secondary: RswiftResources.ImageResource { .init(name: "Outline_thumbs_up_ Secondary", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Outline_thumbs_up_white`.
    var outline_thumbs_up_white: RswiftResources.ImageResource { .init(name: "Outline_thumbs_up_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Playtube_text`.
    var playtube_text: RswiftResources.ImageResource { .init(name: "Playtube_text", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Profile-1`.
    var profile1: RswiftResources.ImageResource { .init(name: "Profile-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Shape-2`.
    var shape2: RswiftResources.ImageResource { .init(name: "Shape-2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Shape-4`.
    var shape4: RswiftResources.ImageResource { .init(name: "Shape-4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Sharess`.
    var sharess: RswiftResources.ImageResource { .init(name: "Sharess", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Tick_Square`.
    var tick_Square: RswiftResources.ImageResource { .init(name: "Tick_Square", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Vector`.
    var vector: RswiftResources.ImageResource { .init(name: "Vector", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Video`.
    var video: RswiftResources.ImageResource { .init(name: "Video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `VideoOff`.
    var videoOff: RswiftResources.ImageResource { .init(name: "VideoOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `VideoOn`.
    var videoOn: RswiftResources.ImageResource { .init(name: "VideoOn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `YouTube`.
    var youTube: RswiftResources.ImageResource { .init(name: "YouTube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `abacus`.
    var abacus: RswiftResources.ImageResource { .init(name: "abacus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `activity_default`.
    var activity_default: RswiftResources.ImageResource { .init(name: "activity_default", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add-1`.
    var add1: RswiftResources.ImageResource { .init(name: "add-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `app_logo`.
    var app_logo: RswiftResources.ImageResource { .init(name: "app_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `arcticle_send`.
    var arcticle_send: RswiftResources.ImageResource { .init(name: "arcticle_send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `articles`.
    var articles: RswiftResources.ImageResource { .init(name: "articles", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back_new`.
    var back_new: RswiftResources.ImageResource { .init(name: "back_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back_white`.
    var back_white: RswiftResources.ImageResource { .init(name: "back_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back_white_1`.
    var back_white_1: RswiftResources.ImageResource { .init(name: "back_white_1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `badge`.
    var badge: RswiftResources.ImageResource { .init(name: "badge", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `beachview`.
    var beachview: RswiftResources.ImageResource { .init(name: "beachview", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bell`.
    var bell: RswiftResources.ImageResource { .init(name: "bell", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blank.debit.card`.
    var blankDebitCard: RswiftResources.ImageResource { .init(name: "blank.debit.card", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `block_new`.
    var block_new: RswiftResources.ImageResource { .init(name: "block_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `block_user`.
    var block_user: RswiftResources.ImageResource { .init(name: "block_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blue_comment`.
    var blue_comment: RswiftResources.ImageResource { .init(name: "blue_comment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blue_dislike`.
    var blue_dislike: RswiftResources.ImageResource { .init(name: "blue_dislike", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blue_eye`.
    var blue_eye: RswiftResources.ImageResource { .init(name: "blue_eye", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blue_like`.
    var blue_like: RswiftResources.ImageResource { .init(name: "blue_like", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blue_plus`.
    var blue_plus: RswiftResources.ImageResource { .init(name: "blue_plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bold_ic_round_pause`.
    var bold_ic_round_pause: RswiftResources.ImageResource { .init(name: "bold_ic_round_pause", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bold_play_arrow`.
    var bold_play_arrow: RswiftResources.ImageResource { .init(name: "bold_play_arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar`.
    var calendar: RswiftResources.ImageResource { .init(name: "calendar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `camera`.
    var camera: RswiftResources.ImageResource { .init(name: "camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `camera-grey`.
    var cameraGrey: RswiftResources.ImageResource { .init(name: "camera-grey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `camera_blue`.
    var camera_blue: RswiftResources.ImageResource { .init(name: "camera_blue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `camera_new`.
    var camera_new: RswiftResources.ImageResource { .init(name: "camera_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `category_new`.
    var category_new: RswiftResources.ImageResource { .init(name: "category_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `channel_cover`.
    var channel_cover: RswiftResources.ImageResource { .init(name: "channel_cover", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chat_new`.
    var chat_new: RswiftResources.ImageResource { .init(name: "chat_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chat_white`.
    var chat_white: RswiftResources.ImageResource { .init(name: "chat_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkBox`.
    var checkBox: RswiftResources.ImageResource { .init(name: "checkBox", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `check_new`.
    var check_new: RswiftResources.ImageResource { .init(name: "check_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkbox-1`.
    var checkbox1: RswiftResources.ImageResource { .init(name: "checkbox-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `clocks`.
    var clocks: RswiftResources.ImageResource { .init(name: "clocks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `close`.
    var close: RswiftResources.ImageResource { .init(name: "close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cloud`.
    var cloud: RswiftResources.ImageResource { .init(name: "cloud", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cloudDownload`.
    var cloudDownload: RswiftResources.ImageResource { .init(name: "cloudDownload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `comment _new`.
    var comment_new: RswiftResources.ImageResource { .init(name: "comment _new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `copy`.
    var copy: RswiftResources.ImageResource { .init(name: "copy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `create_short`.
    var create_short: RswiftResources.ImageResource { .init(name: "create_short", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cross_new`.
    var cross_new: RswiftResources.ImageResource { .init(name: "cross_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `d-avatar`.
    var dAvatar: RswiftResources.ImageResource { .init(name: "d-avatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dailymotion`.
    var dailymotion: RswiftResources.ImageResource { .init(name: "dailymotion", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `demo_shorts`.
    var demo_shorts: RswiftResources.ImageResource { .init(name: "demo_shorts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislike`.
    var dislike: RswiftResources.ImageResource { .init(name: "dislike", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislike_blue`.
    var dislike_blue: RswiftResources.ImageResource { .init(name: "dislike_blue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislike_blue-1`.
    var dislike_blue1: RswiftResources.ImageResource { .init(name: "dislike_blue-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislike_card_ic`.
    var dislike_card_ic: RswiftResources.ImageResource { .init(name: "dislike_card_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislike_gray`.
    var dislike_gray: RswiftResources.ImageResource { .init(name: "dislike_gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislikees`.
    var dislikees: RswiftResources.ImageResource { .init(name: "dislikees", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `document`.
    var document: RswiftResources.ImageResource { .init(name: "document", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dollar`.
    var dollar: RswiftResources.ImageResource { .init(name: "dollar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dollar-1`.
    var dollar1: RswiftResources.ImageResource { .init(name: "dollar-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `donate_gray`.
    var donate_gray: RswiftResources.ImageResource { .init(name: "donate_gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dot_black`.
    var dot_black: RswiftResources.ImageResource { .init(name: "dot_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dot_rectangle`.
    var dot_rectangle: RswiftResources.ImageResource { .init(name: "dot_rectangle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dots`.
    var dots: RswiftResources.ImageResource { .init(name: "dots", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `down-arrow-1`.
    var downArrow1: RswiftResources.ImageResource { .init(name: "down-arrow-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `down_new`.
    var down_new: RswiftResources.ImageResource { .init(name: "down_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `email_new`.
    var email_new: RswiftResources.ImageResource { .init(name: "email_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `eye_hide`.
    var eye_hide: RswiftResources.ImageResource { .init(name: "eye_hide", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `eye_new`.
    var eye_new: RswiftResources.ImageResource { .init(name: "eye_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `eye_show`.
    var eye_show: RswiftResources.ImageResource { .init(name: "eye_show", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebookes`.
    var facebookes: RswiftResources.ImageResource { .init(name: "facebookes", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fi_chevron-right`.
    var fi_chevronRight: RswiftResources.ImageResource { .init(name: "fi_chevron-right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fi_plus-1`.
    var fi_plus1: RswiftResources.ImageResource { .init(name: "fi_plus-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fi_search`.
    var fi_search: RswiftResources.ImageResource { .init(name: "fi_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fi_search_new`.
    var fi_search_new: RswiftResources.ImageResource { .init(name: "fi_search_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fi_search_white`.
    var fi_search_white: RswiftResources.ImageResource { .init(name: "fi_search_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fi_thumbs-down`.
    var fi_thumbsDown: RswiftResources.ImageResource { .init(name: "fi_thumbs-down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fi_thumbs-up`.
    var fi_thumbsUp: RswiftResources.ImageResource { .init(name: "fi_thumbs-up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gender-1`.
    var gender1: RswiftResources.ImageResource { .init(name: "gender-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `genderi`.
    var genderi: RswiftResources.ImageResource { .init(name: "genderi", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `globe.icon`.
    var globeIcon: RswiftResources.ImageResource { .init(name: "globe.icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google-plus`.
    var googlePlus: RswiftResources.ImageResource { .init(name: "google-plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google1`.
    var google1: RswiftResources.ImageResource { .init(name: "google1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `green_verified_badge`.
    var green_verified_badge: RswiftResources.ImageResource { .init(name: "green_verified_badge", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home`.
    var home: RswiftResources.ImageResource { .init(name: "home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Nochat`.
    var ic_Nochat: RswiftResources.ImageResource { .init(name: "ic_Nochat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_User`.
    var ic_User: RswiftResources.ImageResource { .init(name: "ic_User", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_Import`.
    var ic_action_Import: RswiftResources.ImageResource { .init(name: "ic_action_Import", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_more`.
    var ic_action_more: RswiftResources.ImageResource { .init(name: "ic_action_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_action_upload`.
    var ic_action_upload: RswiftResources.ImageResource { .init(name: "ic_action_upload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_comemntSend`.
    var ic_comemntSend: RswiftResources.ImageResource { .init(name: "ic_comemntSend", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_comment`.
    var ic_comment: RswiftResources.ImageResource { .init(name: "ic_comment", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_copper_card`.
    var ic_copper_card: RswiftResources.ImageResource { .init(name: "ic_copper_card", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_dislikeBLue`.
    var ic_dislikeBLue: RswiftResources.ImageResource { .init(name: "ic_dislikeBLue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_eighteen`.
    var ic_eighteen: RswiftResources.ImageResource { .init(name: "ic_eighteen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_likeBlue`.
    var ic_likeBlue: RswiftResources.ImageResource { .init(name: "ic_likeBlue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_location`.
    var ic_location: RswiftResources.ImageResource { .init(name: "ic_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_share`.
    var ic_share: RswiftResources.ImageResource { .init(name: "ic_share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_more`.
    var ic_tab_more: RswiftResources.ImageResource { .init(name: "ic_tab_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_whiteMore`.
    var ic_whiteMore: RswiftResources.ImageResource { .init(name: "ic_whiteMore", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_youtube`.
    var ic_youtube: RswiftResources.ImageResource { .init(name: "ic_youtube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn.square.dashed`.
    var icnSquareDashed: RswiftResources.ImageResource { .init(name: "icn.square.dashed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_backward.end.fill`.
    var icn_backwardEndFill: RswiftResources.ImageResource { .init(name: "icn_backward.end.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_chevron.down`.
    var icn_chevronDown: RswiftResources.ImageResource { .init(name: "icn_chevron.down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_forward.end.fill`.
    var icn_forwardEndFill: RswiftResources.ImageResource { .init(name: "icn_forward.end.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_gearshape`.
    var icn_gearshape: RswiftResources.ImageResource { .init(name: "icn_gearshape", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_gobackward.10`.
    var icn_gobackward10: RswiftResources.ImageResource { .init(name: "icn_gobackward.10", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_goforward.10`.
    var icn_goforward10: RswiftResources.ImageResource { .init(name: "icn_goforward.10", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_pause.fill`.
    var icn_pauseFill: RswiftResources.ImageResource { .init(name: "icn_pause.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_play.fill`.
    var icn_playFill: RswiftResources.ImageResource { .init(name: "icn_play.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icn_xmark`.
    var icn_xmark: RswiftResources.ImageResource { .init(name: "icn_xmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon`.
    var icon: RswiftResources.ImageResource { .init(name: "icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `import_video`.
    var import_video: RswiftResources.ImageResource { .init(name: "import_video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `info`.
    var info: RswiftResources.ImageResource { .init(name: "info", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `instagram`.
    var instagram: RswiftResources.ImageResource { .init(name: "instagram", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `left-arrows`.
    var leftArrows: RswiftResources.ImageResource { .init(name: "left-arrows", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like`.
    var like: RswiftResources.ImageResource { .init(name: "like", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like_blue`.
    var like_blue: RswiftResources.ImageResource { .init(name: "like_blue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like_blue-1`.
    var like_blue1: RswiftResources.ImageResource { .init(name: "like_blue-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like_gray`.
    var like_gray: RswiftResources.ImageResource { .init(name: "like_gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like_new`.
    var like_new: RswiftResources.ImageResource { .init(name: "like_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like_new-1`.
    var like_new1: RswiftResources.ImageResource { .init(name: "like_new-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `likees`.
    var likees: RswiftResources.ImageResource { .init(name: "likees", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `loginBackground`.
    var loginBackground: RswiftResources.ImageResource { .init(name: "loginBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo_WoWonder`.
    var logo_WoWonder: RswiftResources.ImageResource { .init(name: "logo_WoWonder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `magic`.
    var magic: RswiftResources.ImageResource { .init(name: "magic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mainLogo`.
    var mainLogo: RswiftResources.ImageResource { .init(name: "mainLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mastercard.icon.colorized`.
    var mastercardIconColorized: RswiftResources.ImageResource { .init(name: "mastercard.icon.colorized", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `maxresdefault`.
    var maxresdefault: RswiftResources.ImageResource { .init(name: "maxresdefault", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `maxresdefault-1`.
    var maxresdefault1: RswiftResources.ImageResource { .init(name: "maxresdefault-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mic`.
    var mic: RswiftResources.ImageResource { .init(name: "mic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `micOff`.
    var micOff: RswiftResources.ImageResource { .init(name: "micOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mir.icon.colorized`.
    var mirIconColorized: RswiftResources.ImageResource { .init(name: "mir.icon.colorized", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `more_vertical`.
    var more_vertical: RswiftResources.ImageResource { .init(name: "more_vertical", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `movies_new`.
    var movies_new: RswiftResources.ImageResource { .init(name: "movies_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `music_new`.
    var music_new: RswiftResources.ImageResource { .init(name: "music_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no-video`.
    var noVideo: RswiftResources.ImageResource { .init(name: "no-video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no_profile_image_circle`.
    var no_profile_image_circle: RswiftResources.ImageResource { .init(name: "no_profile_image_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `noactivity`.
    var noactivity: RswiftResources.ImageResource { .init(name: "noactivity", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `noplaylist`.
    var noplaylist: RswiftResources.ImageResource { .init(name: "noplaylist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification_new`.
    var notification_new: RswiftResources.ImageResource { .init(name: "notification_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `opacity_view`.
    var opacity_view: RswiftResources.ImageResource { .init(name: "opacity_view", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `paid_new`.
    var paid_new: RswiftResources.ImageResource { .init(name: "paid_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `paper-plane`.
    var paperPlane: RswiftResources.ImageResource { .init(name: "paper-plane", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pass`.
    var pass: RswiftResources.ImageResource { .init(name: "pass", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `phone_new`.
    var phone_new: RswiftResources.ImageResource { .init(name: "phone_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `picture-in-picture-enter`.
    var pictureInPictureEnter: RswiftResources.ImageResource { .init(name: "picture-in-picture-enter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play_inside`.
    var play_inside: RswiftResources.ImageResource { .init(name: "play_inside", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `playlist`.
    var playlist: RswiftResources.ImageResource { .init(name: "playlist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `playlist_default`.
    var playlist_default: RswiftResources.ImageResource { .init(name: "playlist_default", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plus_gray`.
    var plus_gray: RswiftResources.ImageResource { .init(name: "plus_gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `points_new`.
    var points_new: RswiftResources.ImageResource { .init(name: "points_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `popular`.
    var popular: RswiftResources.ImageResource { .init(name: "popular", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profile`.
    var profile: RswiftResources.ImageResource { .init(name: "profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profile_def`.
    var profile_def: RswiftResources.ImageResource { .init(name: "profile_def", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profile_new`.
    var profile_new: RswiftResources.ImageResource { .init(name: "profile_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pulltorefresharrow`.
    var pulltorefresharrow: RswiftResources.ImageResource { .init(name: "pulltorefresharrow", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `radio_button_off`.
    var radio_button_off: RswiftResources.ImageResource { .init(name: "radio_button_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `radio_button_on`.
    var radio_button_on: RswiftResources.ImageResource { .init(name: "radio_button_on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `radio_select`.
    var radio_select: RswiftResources.ImageResource { .init(name: "radio_select", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `radio_unselect`.
    var radio_unselect: RswiftResources.ImageResource { .init(name: "radio_unselect", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `recently_watched`.
    var recently_watched: RswiftResources.ImageResource { .init(name: "recently_watched", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rotateCam`.
    var rotateCam: RswiftResources.ImageResource { .init(name: "rotateCam", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_about`.
    var s_about: RswiftResources.ImageResource { .init(name: "s_about", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_auto_mode`.
    var s_auto_mode: RswiftResources.ImageResource { .init(name: "s_auto_mode", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_block`.
    var s_block: RswiftResources.ImageResource { .init(name: "s_block", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_cache`.
    var s_cache: RswiftResources.ImageResource { .init(name: "s_cache", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_dark_mode`.
    var s_dark_mode: RswiftResources.ImageResource { .init(name: "s_dark_mode", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_delete`.
    var s_delete: RswiftResources.ImageResource { .init(name: "s_delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_edit`.
    var s_edit: RswiftResources.ImageResource { .init(name: "s_edit", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_help`.
    var s_help: RswiftResources.ImageResource { .init(name: "s_help", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_history`.
    var s_history: RswiftResources.ImageResource { .init(name: "s_history", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_invite`.
    var s_invite: RswiftResources.ImageResource { .init(name: "s_invite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_light_mode`.
    var s_light_mode: RswiftResources.ImageResource { .init(name: "s_light_mode", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_logout`.
    var s_logout: RswiftResources.ImageResource { .init(name: "s_logout", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_manage`.
    var s_manage: RswiftResources.ImageResource { .init(name: "s_manage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_password`.
    var s_password: RswiftResources.ImageResource { .init(name: "s_password", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_pause_history`.
    var s_pause_history: RswiftResources.ImageResource { .init(name: "s_pause_history", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_pip`.
    var s_pip: RswiftResources.ImageResource { .init(name: "s_pip", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_pro`.
    var s_pro: RswiftResources.ImageResource { .init(name: "s_pro", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_rate`.
    var s_rate: RswiftResources.ImageResource { .init(name: "s_rate", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_terms`.
    var s_terms: RswiftResources.ImageResource { .init(name: "s_terms", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_theme`.
    var s_theme: RswiftResources.ImageResource { .init(name: "s_theme", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_two`.
    var s_two: RswiftResources.ImageResource { .init(name: "s_two", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_verification`.
    var s_verification: RswiftResources.ImageResource { .init(name: "s_verification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `s_withdrawal`.
    var s_withdrawal: RswiftResources.ImageResource { .init(name: "s_withdrawal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send`.
    var send: RswiftResources.ImageResource { .init(name: "send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_new`.
    var send_new: RswiftResources.ImageResource { .init(name: "send_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_new`.
    var setting_new: RswiftResources.ImageResource { .init(name: "setting_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share_gray`.
    var share_gray: RswiftResources.ImageResource { .init(name: "share_gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share_new`.
    var share_new: RswiftResources.ImageResource { .init(name: "share_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share_new-1`.
    var share_new1: RswiftResources.ImageResource { .init(name: "share_new-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shared`.
    var shared: RswiftResources.ImageResource { .init(name: "shared", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `short1`.
    var short1: RswiftResources.ImageResource { .init(name: "short1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shorts`.
    var shorts: RswiftResources.ImageResource { .init(name: "shorts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `smartphone`.
    var smartphone: RswiftResources.ImageResource { .init(name: "smartphone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `smile`.
    var smile: RswiftResources.ImageResource { .init(name: "smile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash`.
    var splash: RswiftResources.ImageResource { .init(name: "splash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `square-video`.
    var squareVideo: RswiftResources.ImageResource { .init(name: "square-video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `square-youtube`.
    var squareYoutube: RswiftResources.ImageResource { .init(name: "square-youtube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `star_new`.
    var star_new: RswiftResources.ImageResource { .init(name: "star_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `stream`.
    var stream: RswiftResources.ImageResource { .init(name: "stream", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sub_new`.
    var sub_new: RswiftResources.ImageResource { .init(name: "sub_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `technology`.
    var technology: RswiftResources.ImageResource { .init(name: "technology", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumb`.
    var thumb: RswiftResources.ImageResource { .init(name: "thumb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumb-down`.
    var thumbDown: RswiftResources.ImageResource { .init(name: "thumb-down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumbs-down-s`.
    var thumbsDownS: RswiftResources.ImageResource { .init(name: "thumbs-down-s", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumbs-up`.
    var thumbsUp: RswiftResources.ImageResource { .init(name: "thumbs-up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumbs-up-h`.
    var thumbsUpH: RswiftResources.ImageResource { .init(name: "thumbs-up-h", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ticks`.
    var ticks: RswiftResources.ImageResource { .init(name: "ticks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `top_new`.
    var top_new: RswiftResources.ImageResource { .init(name: "top_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tv_new`.
    var tv_new: RswiftResources.ImageResource { .init(name: "tv_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twitter-1`.
    var twitter1: RswiftResources.ImageResource { .init(name: "twitter-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twoFactor`.
    var twoFactor: RswiftResources.ImageResource { .init(name: "twoFactor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unCheckBox`.
    var unCheckBox: RswiftResources.ImageResource { .init(name: "unCheckBox", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `un_Tick_Square`.
    var un_Tick_Square: RswiftResources.ImageResource { .init(name: "un_Tick_Square", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `up_new`.
    var up_new: RswiftResources.ImageResource { .init(name: "up_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `upgrade_pro`.
    var upgrade_pro: RswiftResources.ImageResource { .init(name: "upgrade_pro", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user`.
    var user: RswiftResources.ImageResource { .init(name: "user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `userIcon`.
    var userIcon: RswiftResources.ImageResource { .init(name: "userIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user_profile`.
    var user_profile: RswiftResources.ImageResource { .init(name: "user_profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `verified`.
    var verified: RswiftResources.ImageResource { .init(name: "verified", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `verified_badge`.
    var verified_badge: RswiftResources.ImageResource { .init(name: "verified_badge", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `video_default`.
    var video_default: RswiftResources.ImageResource { .init(name: "video_default", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `vimeo`.
    var vimeo: RswiftResources.ImageResource { .init(name: "vimeo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `visa.icon.colorized`.
    var visaIconColorized: RswiftResources.ImageResource { .init(name: "visa.icon.colorized", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `wallet_new`.
    var wallet_new: RswiftResources.ImageResource { .init(name: "wallet_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `watch_new`.
    var watch_new: RswiftResources.ImageResource { .init(name: "watch_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `web_new`.
    var web_new: RswiftResources.ImageResource { .init(name: "web_new", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `world_map`.
    var world_map: RswiftResources.ImageResource { .init(name: "world_map", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `wowonder`.
    var wowonder: RswiftResources.ImageResource { .init(name: "wowonder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperApplesignin = comAppleDeveloperApplesignin()
    struct comAppleDeveloperApplesignin {
      let `default`: String = "Default"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `TTCommons-Black`.
    var ttCommonsBlack: RswiftResources.FontResource { .init(name: "TTCommons-Black", bundle: bundle, filename: "TTCommons-Black.ttf") }

    /// Font `TTCommons-BlackItalic`.
    var ttCommonsBlackItalic: RswiftResources.FontResource { .init(name: "TTCommons-BlackItalic", bundle: bundle, filename: "TTCommons-BlackItalic.ttf") }

    /// Font `TTCommons-Bold`.
    var ttCommonsBold: RswiftResources.FontResource { .init(name: "TTCommons-Bold", bundle: bundle, filename: "TTCommons-Bold.ttf") }

    /// Font `TTCommons-BoldItalic`.
    var ttCommonsBoldItalic: RswiftResources.FontResource { .init(name: "TTCommons-BoldItalic", bundle: bundle, filename: "TTCommons-BoldItalic.ttf") }

    /// Font `TTCommons-DemiBold`.
    var ttCommonsDemiBold: RswiftResources.FontResource { .init(name: "TTCommons-DemiBold", bundle: bundle, filename: "TTCommons-DemiBold.ttf") }

    /// Font `TTCommons-DemiBoldItalic`.
    var ttCommonsDemiBoldItalic: RswiftResources.FontResource { .init(name: "TTCommons-DemiBoldItalic", bundle: bundle, filename: "TTCommons-DemiBoldItalic.ttf") }

    /// Font `TTCommons-ExtraBold`.
    var ttCommonsExtraBold: RswiftResources.FontResource { .init(name: "TTCommons-ExtraBold", bundle: bundle, filename: "TTCommons-ExtraBold.ttf") }

    /// Font `TTCommons-ExtraBoldItalic`.
    var ttCommonsExtraBoldItalic: RswiftResources.FontResource { .init(name: "TTCommons-ExtraBoldItalic", bundle: bundle, filename: "TTCommons-ExtraBoldItalic.ttf") }

    /// Font `TTCommons-ExtraLight`.
    var ttCommonsExtraLight: RswiftResources.FontResource { .init(name: "TTCommons-ExtraLight", bundle: bundle, filename: "TTCommons-ExtraLight.ttf") }

    /// Font `TTCommons-ExtraLightItalic`.
    var ttCommonsExtraLightItalic: RswiftResources.FontResource { .init(name: "TTCommons-ExtraLightItalic", bundle: bundle, filename: "TTCommons-ExtraLightItalic.ttf") }

    /// Font `TTCommons-Italic`.
    var ttCommonsItalic: RswiftResources.FontResource { .init(name: "TTCommons-Italic", bundle: bundle, filename: "TTCommons-Italic.ttf") }

    /// Font `TTCommons-Light`.
    var ttCommonsLight: RswiftResources.FontResource { .init(name: "TTCommons-Light", bundle: bundle, filename: "TTCommons-Light.ttf") }

    /// Font `TTCommons-LightItalic`.
    var ttCommonsLightItalic: RswiftResources.FontResource { .init(name: "TTCommons-LightItalic", bundle: bundle, filename: "TTCommons-LightItalic.ttf") }

    /// Font `TTCommons-Medium`.
    var ttCommonsMedium: RswiftResources.FontResource { .init(name: "TTCommons-Medium", bundle: bundle, filename: "TTCommons-Medium.ttf") }

    /// Font `TTCommons-MediumItalic`.
    var ttCommonsMediumItalic: RswiftResources.FontResource { .init(name: "TTCommons-MediumItalic", bundle: bundle, filename: "TTCommons-MediumItalic.ttf") }

    /// Font `TTCommons-Regular`.
    var ttCommonsRegular: RswiftResources.FontResource { .init(name: "TTCommons-Regular", bundle: bundle, filename: "TTCommons-Regular.ttf") }

    /// Font `TTCommons-Thin`.
    var ttCommonsThin: RswiftResources.FontResource { .init(name: "TTCommons-Thin", bundle: bundle, filename: "TTCommons-Thin.ttf") }

    /// Font `TTCommons-ThinItalic`.
    var ttCommonsThinItalic: RswiftResources.FontResource { .init(name: "TTCommons-ThinItalic", bundle: bundle, filename: "TTCommons-ThinItalic.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [ttCommonsBlack, ttCommonsBlackItalic, ttCommonsBold, ttCommonsBoldItalic, ttCommonsDemiBold, ttCommonsDemiBoldItalic, ttCommonsExtraBold, ttCommonsExtraBoldItalic, ttCommonsExtraLight, ttCommonsExtraLightItalic, ttCommonsItalic, ttCommonsLight, ttCommonsLightItalic, ttCommonsMedium, ttCommonsMediumItalic, ttCommonsRegular, ttCommonsThin, ttCommonsThinItalic].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 26 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `MainVideo.mp4`.
    var mainVideoMp4: RswiftResources.FileResource { .init(name: "MainVideo", pathExtension: "mp4", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-Black.ttf`.
    var ttCommonsBlackTtf: RswiftResources.FileResource { .init(name: "TTCommons-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-BlackItalic.ttf`.
    var ttCommonsBlackItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-BlackItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-Bold.ttf`.
    var ttCommonsBoldTtf: RswiftResources.FileResource { .init(name: "TTCommons-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-BoldItalic.ttf`.
    var ttCommonsBoldItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-BoldItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-DemiBold.ttf`.
    var ttCommonsDemiBoldTtf: RswiftResources.FileResource { .init(name: "TTCommons-DemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-DemiBoldItalic.ttf`.
    var ttCommonsDemiBoldItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-DemiBoldItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-ExtraBold.ttf`.
    var ttCommonsExtraBoldTtf: RswiftResources.FileResource { .init(name: "TTCommons-ExtraBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-ExtraBoldItalic.ttf`.
    var ttCommonsExtraBoldItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-ExtraBoldItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-ExtraLight.ttf`.
    var ttCommonsExtraLightTtf: RswiftResources.FileResource { .init(name: "TTCommons-ExtraLight", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-ExtraLightItalic.ttf`.
    var ttCommonsExtraLightItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-ExtraLightItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-Italic.ttf`.
    var ttCommonsItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-Italic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-Light.ttf`.
    var ttCommonsLightTtf: RswiftResources.FileResource { .init(name: "TTCommons-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-LightItalic.ttf`.
    var ttCommonsLightItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-LightItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-Medium.ttf`.
    var ttCommonsMediumTtf: RswiftResources.FileResource { .init(name: "TTCommons-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-MediumItalic.ttf`.
    var ttCommonsMediumItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-MediumItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-Regular.ttf`.
    var ttCommonsRegularTtf: RswiftResources.FileResource { .init(name: "TTCommons-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-Thin.ttf`.
    var ttCommonsThinTtf: RswiftResources.FileResource { .init(name: "TTCommons-Thin", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `TTCommons-ThinItalic.ttf`.
    var ttCommonsThinItalicTtf: RswiftResources.FileResource { .init(name: "TTCommons-ThinItalic", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `pulltorefresharrow.png`.
    var pulltorefresharrowPng: RswiftResources.FileResource { .init(name: "pulltorefresharrow", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.abi.json`.
    var x86_64AppleIosSimulatorAbiJson: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator.abi", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.private.swiftinterface`.
    var x86_64AppleIosSimulatorPrivateSwiftinterface: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator.private", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftdoc`.
    var x86_64AppleIosSimulatorSwiftdoc: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftinterface`.
    var x86_64AppleIosSimulatorSwiftinterface: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftmodule`.
    var x86_64AppleIosSimulatorSwiftmodule: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftsourceinfo`.
    var x86_64AppleIosSimulatorSwiftsourceinfo: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 60 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AdPlayerView`.
    var adPlayerView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AdPlayerView", bundle: bundle) }

    /// Nib `ArticleFooterView`.
    var articleFooterView: RswiftResources.NibReference<ArticleFooterView> { .init(name: "ArticleFooterView", bundle: bundle) }

    /// Nib `ArticleHeaderView`.
    var articleHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ArticleHeaderView", bundle: bundle) }

    /// Nib `ArticleListCell`.
    var articleListCell: RswiftResources.NibReferenceReuseIdentifier<ArticleListCell, ArticleListCell> { .init(name: "ArticleListCell", bundle: bundle, identifier: "ArticleListCell") }

    /// Nib `ArticleSectionOneTableItem`.
    var articleSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticleSectionOneTableItem, ArticleSectionOneTableItem> { .init(name: "ArticleSectionOneTableItem", bundle: bundle, identifier: "ArticleSectionOneTableItem") }

    /// Nib `ArticlesCollectionViewCell`.
    var articlesCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<ArticlesCollectionViewCell, ArticlesCollectionViewCell> { .init(name: "ArticlesCollectionViewCell", bundle: bundle, identifier: "ArticlesCollectionViewCell") }

    /// Nib `ArticlesSectionFiveTableItem`.
    var articlesSectionFiveTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticlesSectionFiveTableItem, ArticlesSectionFiveTableItem> { .init(name: "ArticlesSectionFiveTableItem", bundle: bundle, identifier: "ArticlesSectionFiveTableItem") }

    /// Nib `ArticlesSectionSevenTableItem`.
    var articlesSectionSevenTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticlesSectionSevenTableItem, ArticlesSectionSevenTableItem> { .init(name: "ArticlesSectionSevenTableItem", bundle: bundle, identifier: "ArticlesSectionSevenTableItem") }

    /// Nib `ArticlesSectionSixTableItem`.
    var articlesSectionSixTableItem: RswiftResources.NibReferenceReuseIdentifier<ArticlesSectionSixTableItem, ArticlesSectionSixTableItem> { .init(name: "ArticlesSectionSixTableItem", bundle: bundle, identifier: "ArticlesSectionSixTableItem") }

    /// Nib `ArticlesTableViewCell`.
    var articlesTableViewCell: RswiftResources.NibReferenceReuseIdentifier<ArticlesTableViewCell, ArticlesTableViewCell> { .init(name: "ArticlesTableViewCell", bundle: bundle, identifier: "ArticlesTableViewCell") }

    /// Nib `CategoryCell`.
    var categoryCell: RswiftResources.NibReferenceReuseIdentifier<CategoryCell, CategoryCell> { .init(name: "CategoryCell", bundle: bundle, identifier: "CategoryCell") }

    /// Nib `ChatLeftTableItem`.
    var chatLeftTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatLeftTableItem, ChatLeftTableItem> { .init(name: "ChatLeftTableItem", bundle: bundle, identifier: "ChatLeftTableItem") }

    /// Nib `ChatRightTableItem`.
    var chatRightTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatRightTableItem, ChatRightTableItem> { .init(name: "ChatRightTableItem", bundle: bundle, identifier: "ChatRightTableItem") }

    /// Nib `ChatTableItem`.
    var chatTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatTableItem, ChatTableItem> { .init(name: "ChatTableItem", bundle: bundle, identifier: "ChatTableItem") }

    /// Nib `CommentCell`.
    var commentCell: RswiftResources.NibReferenceReuseIdentifier<CommentCell, CommentCell> { .init(name: "CommentCell", bundle: bundle, identifier: "CommentCell") }

    /// Nib `ContactCell`.
    var contactCell: RswiftResources.NibReferenceReuseIdentifier<ContactCell, ContactCell> { .init(name: "ContactCell", bundle: bundle, identifier: "ContactCell") }

    /// Nib `CreatePopupCell`.
    var createPopupCell: RswiftResources.NibReferenceReuseIdentifier<CreatePopupCell, CreatePopupCell> { .init(name: "CreatePopupCell", bundle: bundle, identifier: "createPopupCell") }

    /// Nib `CustomDropDownCell`.
    var customDropDownCell: RswiftResources.NibReference<CustomDropDownCell> { .init(name: "CustomDropDownCell", bundle: bundle) }

    /// Nib `CustomTextField`.
    var customTextField: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CustomTextField", bundle: bundle) }

    /// Nib `EmptyVideoCell`.
    var emptyVideoCell: RswiftResources.NibReferenceReuseIdentifier<EmptyVideoCell, EmptyVideoCell> { .init(name: "EmptyVideoCell", bundle: bundle, identifier: "EmptyCell") }

    /// Nib `FavouriteCatCell`.
    var favouriteCatCell: RswiftResources.NibReferenceReuseIdentifier<FavouriteCatCell, FavouriteCatCell> { .init(name: "FavouriteCatCell", bundle: bundle, identifier: "FavCatCell") }

    /// Nib `FeaturedCell`.
    var featuredCell: RswiftResources.NibReferenceReuseIdentifier<FeaturedCell, FeaturedCell> { .init(name: "FeaturedCell", bundle: bundle, identifier: "FeaturedCell") }

    /// Nib `FlowPlayerView`.
    var flowPlayerView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FlowPlayerView", bundle: bundle) }

    /// Nib `HomeCollectionViewCell`.
    var homeCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<HomeCollectionViewCell, HomeCollectionViewCell> { .init(name: "HomeCollectionViewCell", bundle: bundle, identifier: "HomeCollectionViewCell") }

    /// Nib `HomeHeaderAndCategoryCell`.
    var homeHeaderAndCategoryCell: RswiftResources.NibReferenceReuseIdentifier<HomeHeaderAndCategoryCell, HomeHeaderAndCategoryCell> { .init(name: "HomeHeaderAndCategoryCell", bundle: bundle, identifier: "HomeHeaderAndCategoryCell") }

    /// Nib `HomeHeaderView`.
    var homeHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HomeHeaderView", bundle: bundle) }

    /// Nib `LiveTableViewCell`.
    var liveTableViewCell: RswiftResources.NibReferenceReuseIdentifier<LiveTableViewCell, LiveTableViewCell> { .init(name: "LiveTableViewCell", bundle: bundle, identifier: "LiveTableViewCell") }

    /// Nib `MenageSessionCell`.
    var menageSessionCell: RswiftResources.NibReferenceReuseIdentifier<MenageSessionCell, MenageSessionCell> { .init(name: "MenageSessionCell", bundle: bundle, identifier: "MenageSessionCell") }

    /// Nib `MiniPlayerView`.
    var miniPlayerView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MiniPlayerView", bundle: bundle) }

    /// Nib `MoviesCell`.
    var moviesCell: RswiftResources.NibReferenceReuseIdentifier<MoviesCell, MoviesCell> { .init(name: "MoviesCell", bundle: bundle, identifier: "MoviesCell") }

    /// Nib `NotificationTableItem`.
    var notificationTableItem: RswiftResources.NibReferenceReuseIdentifier<NotificationTableItem, NotificationTableItem> { .init(name: "NotificationTableItem", bundle: bundle, identifier: "NotificationTableItem") }

    /// Nib `PaidVideoView`.
    var paidVideoView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PaidVideoView", bundle: bundle) }

    /// Nib `PaymentOptionCell`.
    var paymentOptionCell: RswiftResources.NibReferenceReuseIdentifier<PaymentOptionCell, PaymentOptionCell> { .init(name: "PaymentOptionCell", bundle: bundle, identifier: "PaymentOptionCell") }

    /// Nib `PlayListCell`.
    var playListCell: RswiftResources.NibReferenceReuseIdentifier<PlayListCell, PlayListCell> { .init(name: "PlayListCell", bundle: bundle, identifier: "PlayListCell") }

    /// Nib `PlayerFooterSection`.
    var playerFooterSection: RswiftResources.NibReference<PlayerSectionFooter> { .init(name: "PlayerFooterSection", bundle: bundle) }

    /// Nib `PlayerNextTableItem`.
    var playerNextTableItem: RswiftResources.NibReferenceReuseIdentifier<PlayerNextTableItem, PlayerNextTableItem> { .init(name: "PlayerNextTableItem", bundle: bundle, identifier: "PlayerNextTableItem") }

    /// Nib `PlayerSectionHeader`.
    var playerSectionHeader: RswiftResources.NibReference<PlayerSectionHeader> { .init(name: "PlayerSectionHeader", bundle: bundle) }

    /// Nib `PlaylistTableItem`.
    var playlistTableItem: RswiftResources.NibReferenceReuseIdentifier<PlaylistTableItem, PlaylistTableItem> { .init(name: "PlaylistTableItem", bundle: bundle, identifier: "PlaylistTableItem") }

    /// Nib `PopularCell`.
    var popularCell: RswiftResources.NibReferenceReuseIdentifier<PopularCell, PopularCell> { .init(name: "PopularCell", bundle: bundle, identifier: "PopularCell") }

    /// Nib `ProfileHeaderView`.
    var profileHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ProfileHeaderView", bundle: bundle) }

    /// Nib `ProfileShortsCell`.
    var profileShortsCell: RswiftResources.NibReferenceReuseIdentifier<ProfileShortsCell, ProfileShortsCell> { .init(name: "ProfileShortsCell", bundle: bundle, identifier: "ProfileShortsCell") }

    /// Nib `ProfileTabOptionCell`.
    var profileTabOptionCell: RswiftResources.NibReferenceReuseIdentifier<ProfileTabOptionCell, ProfileTabOptionCell> { .init(name: "ProfileTabOptionCell", bundle: bundle, identifier: "ProfileTabOptionCell") }

    /// Nib `ReplyCommentCell`.
    var replyCommentCell: RswiftResources.NibReferenceReuseIdentifier<ReplyCommentCell, ReplyCommentCell> { .init(name: "ReplyCommentCell", bundle: bundle, identifier: "ReplyCommentCell") }

    /// Nib `SearchCategoryCell`.
    var searchCategoryCell: RswiftResources.NibReferenceReuseIdentifier<SearchCategoryCell, SearchCategoryCell> { .init(name: "SearchCategoryCell", bundle: bundle, identifier: "SearchCategoryCell") }

    /// Nib `SearchFilterCell`.
    var searchFilterCell: RswiftResources.NibReferenceReuseIdentifier<SearchFilterCell, SearchFilterCell> { .init(name: "SearchFilterCell", bundle: bundle, identifier: "SearchFilterCell") }

    /// Nib `SendCommentCell`.
    var sendCommentCell: RswiftResources.NibReferenceReuseIdentifier<SendCommentCell, SendCommentCell> { .init(name: "SendCommentCell", bundle: bundle, identifier: "SendCommentCell") }

    /// Nib `SettingOneTableItem`.
    var settingOneTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingOneTableItem, SettingOneTableItem> { .init(name: "SettingOneTableItem", bundle: bundle, identifier: "SettingOneTableItem") }

    /// Nib `SettingThreeTableItem`.
    var settingThreeTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingThreeTableItem, SettingThreeTableItem> { .init(name: "SettingThreeTableItem", bundle: bundle, identifier: "SettingThreeTableItem") }

    /// Nib `ShortsCell`.
    var shortsCell: RswiftResources.NibReferenceReuseIdentifier<ShortsCell, ShortsCell> { .init(name: "ShortsCell", bundle: bundle, identifier: "ShortsCell") }

    /// Nib `ShowPlaylistTableItem`.
    var showPlaylistTableItem: RswiftResources.NibReferenceReuseIdentifier<ShowPlaylistTableItem, ShowPlaylistTableItem> { .init(name: "ShowPlaylistTableItem", bundle: bundle, identifier: "ShowPlaylistTableItem") }

    /// Nib `StockCell`.
    var stockCell: RswiftResources.NibReferenceReuseIdentifier<StockCell, StockCell> { .init(name: "StockCell", bundle: bundle, identifier: "StockCell") }

    /// Nib `TrendingCell`.
    var trendingCell: RswiftResources.NibReferenceReuseIdentifier<TrendingCell, TrendingCell> { .init(name: "TrendingCell", bundle: bundle, identifier: "TrendingCell") }

    /// Nib `UserActivityCell`.
    var userActivityCell: RswiftResources.NibReferenceReuseIdentifier<UserActivityCell, UserActivityCell> { .init(name: "UserActivityCell", bundle: bundle, identifier: "UserActivityCell") }

    /// Nib `UserChannelHeaderView`.
    var userChannelHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "UserChannelHeaderView", bundle: bundle) }

    /// Nib `VideoDetailCell`.
    var videoDetailCell: RswiftResources.NibReferenceReuseIdentifier<VideoDetailCell, VideoDetailCell> { .init(name: "VideoDetailCell", bundle: bundle, identifier: "videoDetailCell") }

    /// Nib `VideoOptionCell`.
    var videoOptionCell: RswiftResources.NibReferenceReuseIdentifier<VideoOptionCell, VideoOptionCell> { .init(name: "VideoOptionCell", bundle: bundle, identifier: "VideoOptionCell") }

    /// Nib `VideoPlayerContainerView`.
    var videoPlayerContainerView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "VideoPlayerContainerView", bundle: bundle) }

    /// Nib `VideoPlayerErrorView`.
    var videoPlayerErrorView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "VideoPlayerErrorView", bundle: bundle) }

    /// Nib `VideoPlayerView`.
    var videoPlayerView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "VideoPlayerView", bundle: bundle) }

    /// Nib `VideoSize3Cell`.
    var videoSize3Cell: RswiftResources.NibReferenceReuseIdentifier<VideoSize3Cell, VideoSize3Cell> { .init(name: "VideoSize3Cell", bundle: bundle, identifier: "VideoSize3Cell") }

    func validate() throws {
      if UIKit.UIImage(named: "icn.square.dashed", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn.square.dashed' is used in nib 'AdPlayerView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in nib 'AdPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "arcticle_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'arcticle_send' is used in nib 'ArticleFooterView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'ArticleFooterView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "smile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'smile' is used in nib 'ArticleFooterView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in nib 'ArticleFooterView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Fill_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Fill_Colors_Tertiary' is used in nib 'ArticleFooterView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'ArticleFooterView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "document", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'document' is used in nib 'ArticleHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'ArticleListCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'ArticleListCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Tertiary' is used in nib 'ArticleListCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dislike_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_gray' is used in nib 'ArticleSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "like_blue-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'like_blue-1' is used in nib 'ArticleSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'ArticleSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "textColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'textColor' is used in nib 'ArticleSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'ArticlesCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'ArticlesCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Tertiary' is used in nib 'ArticlesCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dislike_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_gray' is used in nib 'ArticlesSectionFiveTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "like_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'like_gray' is used in nib 'ArticlesSectionFiveTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'ArticlesSectionFiveTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in nib 'ArticlesSectionFiveTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_comemntSend", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_comemntSend' is used in nib 'ArticlesSectionSevenTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_comment", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_comment' is used in nib 'ArticlesSectionSixTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Fill_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Fill_Colors_Tertiary' is used in nib 'CategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'CategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in nib 'ChatRightTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in nib 'ChatTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dislike_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_gray' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "like_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'like_gray' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in nib 'CommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "d-avatar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'd-avatar' is used in nib 'ContactCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'ContactCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "shorts", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'shorts' is used in nib 'CreatePopupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-4", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-4' is used in nib 'CreatePopupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "radio_button_off", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'radio_button_off' is used in nib 'CustomDropDownCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'CustomDropDownCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in nib 'CustomDropDownCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "log_in_user_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'log_in_user_icon' is used in nib 'CustomTextField', but couldn't be loaded.") }
      if UIKit.UIImage(named: "noplaylist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'noplaylist' is used in nib 'EmptyVideoCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "checkbox-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'checkbox-1' is used in nib 'FavouriteCatCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in nib 'FeaturedCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "music_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'music_new' is used in nib 'HomeCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "shorts", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'shorts' is used in nib 'HomeCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "top_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'top_new' is used in nib 'HomeCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'HomeCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in nib 'HomeCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Notification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Notification' is used in nib 'HomeHeaderAndCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "app_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'app_logo' is used in nib 'HomeHeaderAndCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chat_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat_new' is used in nib 'HomeHeaderAndCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "fi_search_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_search_white' is used in nib 'HomeHeaderAndCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "no_profile_image_circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no_profile_image_circle' is used in nib 'HomeHeaderAndCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "app_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'app_logo' is used in nib 'HomeHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "bgcolor2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor2' is used in nib 'HomeHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "cross_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cross_new' is used in nib 'MenageSessionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "phone_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'phone_new' is used in nib 'MenageSessionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'MenageSessionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'MenageSessionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_pause.fill", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_pause.fill' is used in nib 'MiniPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_xmark", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_xmark' is used in nib 'MiniPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in nib 'MiniPlayerView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-2' is used in nib 'MiniPlayerView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "textColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'textColor' is used in nib 'MiniPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Cat_Animals", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Cat_Animals' is used in nib 'MoviesCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.badge.plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.badge.plus' is used in nib 'NotificationTableItem', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in nib 'NotificationTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "buttonColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttonColor' is used in nib 'NotificationTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in nib 'PaidVideoView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in nib 'PaidVideoView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'PaymentOptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "up_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'up_new' is used in nib 'PlayerFooterSection', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in nib 'PlayerFooterSection', but couldn't be loaded.") }
      if UIKit.UIImage(named: "YouTube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'YouTube' is used in nib 'PlayerNextTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots' is used in nib 'PlayerNextTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified_badge' is used in nib 'PlayerNextTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'PlayerNextTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in nib 'PlayerSectionHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_Video_list", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Video_list' is used in nib 'PlaylistTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_more_vertical_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_more_vertical_gray' is used in nib 'PlaylistTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "beachview", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'beachview' is used in nib 'PlaylistTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'PlaylistTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'PlaylistTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Cat_Entertainment", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Cat_Entertainment' is used in nib 'PopularCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified_badge' is used in nib 'PopularCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'PopularCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'PopularCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in nib 'PopularCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in nib 'PopularCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "green_verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'green_verified_badge' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "user_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user_profile' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in nib 'ProfileHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots' is used in nib 'ProfileShortsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "shorts", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'shorts' is used in nib 'ProfileShortsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified_badge' is used in nib 'ProfileShortsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'ProfileShortsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in nib 'ProfileTabOptionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dislike_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_gray' is used in nib 'ReplyCommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "like_gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'like_gray' is used in nib 'ReplyCommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'ReplyCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'ReplyCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'ReplyCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in nib 'ReplyCommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_history_Grey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_history_Grey' is used in nib 'SearchCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'SearchCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'SearchFilterCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_send' is used in nib 'SendCommentCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'SendCommentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "fi_chevron-right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_chevron-right' is used in nib 'SettingOneTableItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pause.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'pause.circle' is used in nib 'SettingOneTableItem', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in nib 'SettingOneTableItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "tv") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'tv' is used in nib 'SettingThreeTableItem', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in nib 'SettingThreeTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "YouTube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'YouTube' is used in nib 'ShortsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots' is used in nib 'ShortsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "short1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'short1' is used in nib 'ShortsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified_badge' is used in nib 'ShortsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in nib 'ShortsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "YouTube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'YouTube' is used in nib 'StockCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots' is used in nib 'StockCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified_badge' is used in nib 'StockCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "YouTube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'YouTube' is used in nib 'TrendingCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots' is used in nib 'TrendingCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile' is used in nib 'TrendingCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified_badge' is used in nib 'TrendingCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Bold_ant_design_heart_filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Bold_ant_design_heart_filled' is used in nib 'UserActivityCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_send' is used in nib 'UserActivityCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "activity_default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'activity_default' is used in nib 'UserActivityCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "comment _new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'comment _new' is used in nib 'UserActivityCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Tertiary' is used in nib 'UserActivityCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "green_verified_badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'green_verified_badge' is used in nib 'UserChannelHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'UserChannelHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'UserChannelHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in nib 'UserChannelHeaderView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in nib 'UserChannelHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_Plus_ Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Plus_ Secondary' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_Upload_ Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Upload_ Secondary' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_donate_heart_ Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_donate_heart_ Secondary' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_thumbs_down_ Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_thumbs_down_ Secondary' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_thumbs_up_ Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_thumbs_up_ Secondary' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "down_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'down_new' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in nib 'VideoDetailCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Outline_Time_Circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Time_Circle' is used in nib 'VideoOptionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'VideoOptionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'VideoOptionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in nib 'VideoPlayerContainerView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in nib 'VideoPlayerErrorView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "bold_play_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bold_play_arrow' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn.square.dashed", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn.square.dashed' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_backward.end.fill", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_backward.end.fill' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_chevron.down", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_chevron.down' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_forward.end.fill", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_forward.end.fill' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_gearshape", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_gearshape' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_gobackward.10", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_gobackward.10' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icn_goforward.10", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icn_goforward.10' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "picture-in-picture-enter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'picture-in-picture-enter' is used in nib 'VideoPlayerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "YouTube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'YouTube' is used in nib 'VideoSize3Cell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots' is used in nib 'VideoSize3Cell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in nib 'VideoSize3Cell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in nib 'VideoSize3Cell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 50 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `ArticleListCell`.
    let articleListCell: RswiftResources.ReuseIdentifier<ArticleListCell> = .init(identifier: "ArticleListCell")

    /// Reuse identifier `ArticleSectionOneTableItem`.
    let articleSectionOneTableItem: RswiftResources.ReuseIdentifier<ArticleSectionOneTableItem> = .init(identifier: "ArticleSectionOneTableItem")

    /// Reuse identifier `ArticlesCollectionViewCell`.
    let articlesCollectionViewCell: RswiftResources.ReuseIdentifier<ArticlesCollectionViewCell> = .init(identifier: "ArticlesCollectionViewCell")

    /// Reuse identifier `ArticlesSectionFiveTableItem`.
    let articlesSectionFiveTableItem: RswiftResources.ReuseIdentifier<ArticlesSectionFiveTableItem> = .init(identifier: "ArticlesSectionFiveTableItem")

    /// Reuse identifier `ArticlesSectionSevenTableItem`.
    let articlesSectionSevenTableItem: RswiftResources.ReuseIdentifier<ArticlesSectionSevenTableItem> = .init(identifier: "ArticlesSectionSevenTableItem")

    /// Reuse identifier `ArticlesSectionSixTableItem`.
    let articlesSectionSixTableItem: RswiftResources.ReuseIdentifier<ArticlesSectionSixTableItem> = .init(identifier: "ArticlesSectionSixTableItem")

    /// Reuse identifier `ArticlesTableViewCell`.
    let articlesTableViewCell: RswiftResources.ReuseIdentifier<ArticlesTableViewCell> = .init(identifier: "ArticlesTableViewCell")

    /// Reuse identifier `blockTblCell`.
    let blockTblCell: RswiftResources.ReuseIdentifier<blockTblCell> = .init(identifier: "blockTblCell")

    /// Reuse identifier `CategoryCell`.
    let categoryCell: RswiftResources.ReuseIdentifier<CategoryCell> = .init(identifier: "CategoryCell")

    /// Reuse identifier `ChangeActivityCell`.
    let changeActivityCell: RswiftResources.ReuseIdentifier<ChangeActivityCell> = .init(identifier: "ChangeActivityCell")

    /// Reuse identifier `ChatLeftTableItem`.
    let chatLeftTableItem: RswiftResources.ReuseIdentifier<ChatLeftTableItem> = .init(identifier: "ChatLeftTableItem")

    /// Reuse identifier `ChatRightTableItem`.
    let chatRightTableItem: RswiftResources.ReuseIdentifier<ChatRightTableItem> = .init(identifier: "ChatRightTableItem")

    /// Reuse identifier `ChatTableItem`.
    let chatTableItem: RswiftResources.ReuseIdentifier<ChatTableItem> = .init(identifier: "ChatTableItem")

    /// Reuse identifier `CommentCell`.
    let commentCell: RswiftResources.ReuseIdentifier<CommentCell> = .init(identifier: "CommentCell")

    /// Reuse identifier `ContactCell`.
    let contactCell: RswiftResources.ReuseIdentifier<ContactCell> = .init(identifier: "ContactCell")

    /// Reuse identifier `createPopupCell`.
    let createPopupCell: RswiftResources.ReuseIdentifier<CreatePopupCell> = .init(identifier: "createPopupCell")

    /// Reuse identifier `EmptyCell`.
    let emptyCell: RswiftResources.ReuseIdentifier<EmptyVideoCell> = .init(identifier: "EmptyCell")

    /// Reuse identifier `FavCatCell`.
    let favCatCell: RswiftResources.ReuseIdentifier<FavouriteCatCell> = .init(identifier: "FavCatCell")

    /// Reuse identifier `FeaturedCell`.
    let featuredCell: RswiftResources.ReuseIdentifier<FeaturedCell> = .init(identifier: "FeaturedCell")

    /// Reuse identifier `HomeCollectionViewCell`.
    let homeCollectionViewCell: RswiftResources.ReuseIdentifier<HomeCollectionViewCell> = .init(identifier: "HomeCollectionViewCell")

    /// Reuse identifier `HomeHeaderAndCategoryCell`.
    let homeHeaderAndCategoryCell: RswiftResources.ReuseIdentifier<HomeHeaderAndCategoryCell> = .init(identifier: "HomeHeaderAndCategoryCell")

    /// Reuse identifier `LiveTableViewCell`.
    let liveTableViewCell: RswiftResources.ReuseIdentifier<LiveTableViewCell> = .init(identifier: "LiveTableViewCell")

    /// Reuse identifier `MenageSessionCell`.
    let menageSessionCell: RswiftResources.ReuseIdentifier<MenageSessionCell> = .init(identifier: "MenageSessionCell")

    /// Reuse identifier `MoviesCell`.
    let moviesCell: RswiftResources.ReuseIdentifier<MoviesCell> = .init(identifier: "MoviesCell")

    /// Reuse identifier `moviesNewCell`.
    let moviesNewCell: RswiftResources.ReuseIdentifier<moviesNewCell> = .init(identifier: "moviesNewCell")

    /// Reuse identifier `NotificationTableItem`.
    let notificationTableItem: RswiftResources.ReuseIdentifier<NotificationTableItem> = .init(identifier: "NotificationTableItem")

    /// Reuse identifier `PaymentOptionCell`.
    let paymentOptionCell: RswiftResources.ReuseIdentifier<PaymentOptionCell> = .init(identifier: "PaymentOptionCell")

    /// Reuse identifier `PlayListCell`.
    let playListCell: RswiftResources.ReuseIdentifier<PlayListCell> = .init(identifier: "PlayListCell")

    /// Reuse identifier `PlayerNextTableItem`.
    let playerNextTableItem: RswiftResources.ReuseIdentifier<PlayerNextTableItem> = .init(identifier: "PlayerNextTableItem")

    /// Reuse identifier `PlaylistTableItem`.
    let playlistTableItem: RswiftResources.ReuseIdentifier<PlaylistTableItem> = .init(identifier: "PlaylistTableItem")

    /// Reuse identifier `PopularCell`.
    let popularCell: RswiftResources.ReuseIdentifier<PopularCell> = .init(identifier: "PopularCell")

    /// Reuse identifier `profilePlaylistCell`.
    let profilePlaylistCell: RswiftResources.ReuseIdentifier<profilePlaylistCell> = .init(identifier: "profilePlaylistCell")

    /// Reuse identifier `ProfileShortsCell`.
    let profileShortsCell: RswiftResources.ReuseIdentifier<ProfileShortsCell> = .init(identifier: "ProfileShortsCell")

    /// Reuse identifier `ProfileTabOptionCell`.
    let profileTabOptionCell: RswiftResources.ReuseIdentifier<ProfileTabOptionCell> = .init(identifier: "ProfileTabOptionCell")

    /// Reuse identifier `ReplyCommentCell`.
    let replyCommentCell: RswiftResources.ReuseIdentifier<ReplyCommentCell> = .init(identifier: "ReplyCommentCell")

    /// Reuse identifier `SearchCategoryCell`.
    let searchCategoryCell: RswiftResources.ReuseIdentifier<SearchCategoryCell> = .init(identifier: "SearchCategoryCell")

    /// Reuse identifier `SearchFilterCell`.
    let searchFilterCell: RswiftResources.ReuseIdentifier<SearchFilterCell> = .init(identifier: "SearchFilterCell")

    /// Reuse identifier `SendCommentCell`.
    let sendCommentCell: RswiftResources.ReuseIdentifier<SendCommentCell> = .init(identifier: "SendCommentCell")

    /// Reuse identifier `SettingOneTableItem`.
    let settingOneTableItem: RswiftResources.ReuseIdentifier<SettingOneTableItem> = .init(identifier: "SettingOneTableItem")

    /// Reuse identifier `SettingThreeTableItem`.
    let settingThreeTableItem: RswiftResources.ReuseIdentifier<SettingThreeTableItem> = .init(identifier: "SettingThreeTableItem")

    /// Reuse identifier `ShortsCell`.
    let shortsCell: RswiftResources.ReuseIdentifier<ShortsCell> = .init(identifier: "ShortsCell")

    /// Reuse identifier `shortsProfileCell`.
    let shortsProfileCell: RswiftResources.ReuseIdentifier<shortsProfileCell> = .init(identifier: "shortsProfileCell")

    /// Reuse identifier `ShortsVideoCell`.
    let shortsVideoCell: RswiftResources.ReuseIdentifier<ShortsVideoCell> = .init(identifier: "ShortsVideoCell")

    /// Reuse identifier `ShowPlaylistTableItem`.
    let showPlaylistTableItem: RswiftResources.ReuseIdentifier<ShowPlaylistTableItem> = .init(identifier: "ShowPlaylistTableItem")

    /// Reuse identifier `StockCell`.
    let stockCell: RswiftResources.ReuseIdentifier<StockCell> = .init(identifier: "StockCell")

    /// Reuse identifier `TrendingCell`.
    let trendingCell: RswiftResources.ReuseIdentifier<TrendingCell> = .init(identifier: "TrendingCell")

    /// Reuse identifier `UserActivityCell`.
    let userActivityCell: RswiftResources.ReuseIdentifier<UserActivityCell> = .init(identifier: "UserActivityCell")

    /// Reuse identifier `videoDetailCell`.
    let videoDetailCell: RswiftResources.ReuseIdentifier<VideoDetailCell> = .init(identifier: "videoDetailCell")

    /// Reuse identifier `VideoOptionCell`.
    let videoOptionCell: RswiftResources.ReuseIdentifier<VideoOptionCell> = .init(identifier: "VideoOptionCell")

    /// Reuse identifier `VideoSize3Cell`.
    let videoSize3Cell: RswiftResources.ReuseIdentifier<VideoSize3Cell> = .init(identifier: "VideoSize3Cell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 13 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var articles: articles { .init(bundle: bundle) }
    var auth: auth { .init(bundle: bundle) }
    var chat: chat { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var library: library { .init(bundle: bundle) }
    var live: live { .init(bundle: bundle) }
    var loggedUser: loggedUser { .init(bundle: bundle) }
    var notification: notification { .init(bundle: bundle) }
    var player: player { .init(bundle: bundle) }
    var playlist: playlist { .init(bundle: bundle) }
    var popups: popups { .init(bundle: bundle) }
    var settings: settings { .init(bundle: bundle) }
    var upgrade: upgrade { .init(bundle: bundle) }

    func articles(bundle: Foundation.Bundle) -> articles {
      .init(bundle: bundle)
    }
    func auth(bundle: Foundation.Bundle) -> auth {
      .init(bundle: bundle)
    }
    func chat(bundle: Foundation.Bundle) -> chat {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func library(bundle: Foundation.Bundle) -> library {
      .init(bundle: bundle)
    }
    func live(bundle: Foundation.Bundle) -> live {
      .init(bundle: bundle)
    }
    func loggedUser(bundle: Foundation.Bundle) -> loggedUser {
      .init(bundle: bundle)
    }
    func notification(bundle: Foundation.Bundle) -> notification {
      .init(bundle: bundle)
    }
    func player(bundle: Foundation.Bundle) -> player {
      .init(bundle: bundle)
    }
    func playlist(bundle: Foundation.Bundle) -> playlist {
      .init(bundle: bundle)
    }
    func popups(bundle: Foundation.Bundle) -> popups {
      .init(bundle: bundle)
    }
    func settings(bundle: Foundation.Bundle) -> settings {
      .init(bundle: bundle)
    }
    func upgrade(bundle: Foundation.Bundle) -> upgrade {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.articles.validate()
      try self.auth.validate()
      try self.chat.validate()
      try self.launchScreen.validate()
      try self.library.validate()
      try self.live.validate()
      try self.loggedUser.validate()
      try self.notification.validate()
      try self.player.validate()
      try self.playlist.validate()
      try self.popups.validate()
      try self.settings.validate()
      try self.upgrade.validate()
    }


    /// Storyboard `Articles`.
    struct articles: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Articles"

      var articleCommentReplyVC: RswiftResources.StoryboardViewControllerIdentifier<ArticleCommentReplyVC> { .init(identifier: "ArticleCommentReplyVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "dislike", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike' is used in storyboard 'Articles', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_share' is used in storyboard 'Articles', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'like' is used in storyboard 'Articles', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send_new' is used in storyboard 'Articles', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-4", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-4' is used in storyboard 'Articles', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Articles', but couldn't be loaded.") }
        if articleCommentReplyVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'articleCommentReplyVC' could not be loaded from storyboard 'Articles' as 'ArticleCommentReplyVC'.") }
      }
    }

    /// Storyboard `Auth`.
    struct auth: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SplashVC

      let bundle: Foundation.Bundle

      let name = "Auth"

      var forgetPasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ForgetPasswordVC> { .init(identifier: "ForgetPasswordVC", storyboard: name, bundle: bundle) }
      var introDuctionVC: RswiftResources.StoryboardViewControllerIdentifier<IntroDuctionVC> { .init(identifier: "IntroDuctionVC", storyboard: name, bundle: bundle) }
      var login: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "Login", storyboard: name, bundle: bundle) }
      var loginVC: RswiftResources.StoryboardViewControllerIdentifier<LoginVC> { .init(identifier: "LoginVC", storyboard: name, bundle: bundle) }
      var loginWithWoWonderVC: RswiftResources.StoryboardViewControllerIdentifier<LoginWithWoWonderVC> { .init(identifier: "LoginWithWoWonderVC", storyboard: name, bundle: bundle) }
      var registerVC: RswiftResources.StoryboardViewControllerIdentifier<RegisterVC> { .init(identifier: "RegisterVC", storyboard: name, bundle: bundle) }
      var splashVC: RswiftResources.StoryboardViewControllerIdentifier<SplashVC> { .init(identifier: "SplashVC", storyboard: name, bundle: bundle) }
      var twoFactorVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorVC> { .init(identifier: "TwoFactorVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Email", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Email' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "applelogo") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'applelogo' is used in storyboard 'Auth', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "back_white_1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_white_1' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'email_new' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye_show", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'eye_show' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook1' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'google1' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrows", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'left-arrows' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'loginBackground' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_WoWonder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'logo_WoWonder' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mainLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mainLogo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pass", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'pass' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_new' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_select", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'radio_select' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_unselect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'radio_unselect' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twoFactor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twoFactor' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unCheckBox", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'unCheckBox' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wowonder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'wowonder' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-2' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Auth', but couldn't be loaded.") }
        if forgetPasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Auth' as 'ForgetPasswordVC'.") }
        if introDuctionVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'introDuctionVC' could not be loaded from storyboard 'Auth' as 'IntroDuctionVC'.") }
        if login() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Auth' as 'UIKit.UINavigationController'.") }
        if loginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Auth' as 'LoginVC'.") }
        if loginWithWoWonderVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginWithWoWonderVC' could not be loaded from storyboard 'Auth' as 'LoginWithWoWonderVC'.") }
        if registerVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'Auth' as 'RegisterVC'.") }
        if splashVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Auth' as 'SplashVC'.") }
        if twoFactorVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorVC' could not be loaded from storyboard 'Auth' as 'TwoFactorVC'.") }
      }
    }

    /// Storyboard `Chat`.
    struct chat: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Chat"

      var chatScreenVC: RswiftResources.StoryboardViewControllerIdentifier<ChatScreenVC> { .init(identifier: "ChatScreenVC", storyboard: name, bundle: bundle) }
      var chatVC: RswiftResources.StoryboardViewControllerIdentifier<ChatVC> { .init(identifier: "ChatVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_new' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dot_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dot_black' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Nochat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Nochat' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_whiteMore", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_whiteMore' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send_new' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-2' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Chat', but couldn't be loaded.") }
        if chatScreenVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatScreenVC' could not be loaded from storyboard 'Chat' as 'ChatScreenVC'.") }
        if chatVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Chat' as 'ChatVC'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "mainLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mainLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `library`.
    struct library: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "library"

      var activityCommentReplyVC: RswiftResources.StoryboardViewControllerIdentifier<ActivityCommentReplyVC> { .init(identifier: "ActivityCommentReplyVC", storyboard: name, bundle: bundle) }
      var activityDetailsVC: RswiftResources.StoryboardViewControllerIdentifier<ActivityDetailsVC> { .init(identifier: "ActivityDetailsVC", storyboard: name, bundle: bundle) }
      var channelsVC: RswiftResources.StoryboardViewControllerIdentifier<ChannelsVC> { .init(identifier: "ChannelsVC", storyboard: name, bundle: bundle) }
      var libSubscriptionVC: RswiftResources.StoryboardViewControllerIdentifier<LibSubscriptionVC> { .init(identifier: "LibSubscriptionVC", storyboard: name, bundle: bundle) }
      var libraryPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<LibraryPlaylistVC> { .init(identifier: "LibraryPlaylistVC", storyboard: name, bundle: bundle) }
      var lilbraryLikedVC: RswiftResources.StoryboardViewControllerIdentifier<LilbraryLikedVC> { .init(identifier: "LilbraryLikedVC", storyboard: name, bundle: bundle) }
      var newUserChannelVC: RswiftResources.StoryboardViewControllerIdentifier<NewUserChannelVC> { .init(identifier: "NewUserChannelVC", storyboard: name, bundle: bundle) }
      var paidVC: RswiftResources.StoryboardViewControllerIdentifier<PaidVideoController> { .init(identifier: "PaidVC", storyboard: name, bundle: bundle) }
      var recentlyWatchVC: RswiftResources.StoryboardViewControllerIdentifier<RecentlyWatchVC> { .init(identifier: "RecentlyWatchVC", storyboard: name, bundle: bundle) }
      var sharedVC: RswiftResources.StoryboardViewControllerIdentifier<SharedVC> { .init(identifier: "SharedVC", storyboard: name, bundle: bundle) }
      var userActivitiesVC: RswiftResources.StoryboardViewControllerIdentifier<UserActivitiesVC> { .init(identifier: "UserActivitiesVC", storyboard: name, bundle: bundle) }
      var userChannelPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<UserChannelPlaylistVC> { .init(identifier: "UserChannelPlaylistVC", storyboard: name, bundle: bundle) }
      var userChannelVideosVC: RswiftResources.StoryboardViewControllerIdentifier<UserChannelVideosVC> { .init(identifier: "UserChannelVideosVC", storyboard: name, bundle: bundle) }
      var userShortsVC: RswiftResources.StoryboardViewControllerIdentifier<UserShortsVC> { .init(identifier: "UserShortsVC", storyboard: name, bundle: bundle) }
      var watchLaterVC: RswiftResources.StoryboardViewControllerIdentifier<WatchLaterVC> { .init(identifier: "WatchLaterVC", storyboard: name, bundle: bundle) }
      var watchOfflineVC: RswiftResources.StoryboardViewControllerIdentifier<WatchOfflineVC> { .init(identifier: "WatchOfflineVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Outline_Arrow_Left", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Arrow_Left' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_Arrow_Left_Black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Arrow_Left_Black' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arcticle_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'arcticle_send' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_new' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'camera' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat_white' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fi_search_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_search_white' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no-video", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no-video' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noactivity", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'noactivity' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noplaylist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'noplaylist' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in storyboard 'library', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'library', but couldn't be loaded.") }
        if activityCommentReplyVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'activityCommentReplyVC' could not be loaded from storyboard 'library' as 'ActivityCommentReplyVC'.") }
        if activityDetailsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'activityDetailsVC' could not be loaded from storyboard 'library' as 'ActivityDetailsVC'.") }
        if channelsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelsVC' could not be loaded from storyboard 'library' as 'ChannelsVC'.") }
        if libSubscriptionVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'libSubscriptionVC' could not be loaded from storyboard 'library' as 'LibSubscriptionVC'.") }
        if libraryPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'libraryPlaylistVC' could not be loaded from storyboard 'library' as 'LibraryPlaylistVC'.") }
        if lilbraryLikedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'lilbraryLikedVC' could not be loaded from storyboard 'library' as 'LilbraryLikedVC'.") }
        if newUserChannelVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'newUserChannelVC' could not be loaded from storyboard 'library' as 'NewUserChannelVC'.") }
        if paidVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'paidVC' could not be loaded from storyboard 'library' as 'PaidVideoController'.") }
        if recentlyWatchVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'recentlyWatchVC' could not be loaded from storyboard 'library' as 'RecentlyWatchVC'.") }
        if sharedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sharedVC' could not be loaded from storyboard 'library' as 'SharedVC'.") }
        if userActivitiesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userActivitiesVC' could not be loaded from storyboard 'library' as 'UserActivitiesVC'.") }
        if userChannelPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userChannelPlaylistVC' could not be loaded from storyboard 'library' as 'UserChannelPlaylistVC'.") }
        if userChannelVideosVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userChannelVideosVC' could not be loaded from storyboard 'library' as 'UserChannelVideosVC'.") }
        if userShortsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userShortsVC' could not be loaded from storyboard 'library' as 'UserShortsVC'.") }
        if watchLaterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'watchLaterVC' could not be loaded from storyboard 'library' as 'WatchLaterVC'.") }
        if watchOfflineVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'watchOfflineVC' could not be loaded from storyboard 'library' as 'WatchOfflineVC'.") }
      }
    }

    /// Storyboard `Live`.
    struct live: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Live"

      var endLiveStreamVC: RswiftResources.StoryboardViewControllerIdentifier<EndLiveStreamVC> { .init(identifier: "EndLiveStreamVC", storyboard: name, bundle: bundle) }
      var liveStreamController: RswiftResources.StoryboardViewControllerIdentifier<LiveStreamController> { .init(identifier: "LiveStreamController", storyboard: name, bundle: bundle) }
      var liveStreamVC: RswiftResources.StoryboardViewControllerIdentifier<LiveStreamVC> { .init(identifier: "LiveStreamVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Sharess", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Sharess' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "VideoOn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'VideoOn' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bg2' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera-grey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'camera-grey' is used in storyboard 'Live', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.filters") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'camera.filters' is used in storyboard 'Live', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_comemntSend", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_comemntSend' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_share' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "magic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'magic' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mic' is used in storyboard 'Live', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mic.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'mic.fill' is used in storyboard 'Live', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "rotateCam", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rotateCam' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send' is used in storyboard 'Live', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "video") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'video' is used in storyboard 'Live', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "x.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'x.circle' is used in storyboard 'Live', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Live', but couldn't be loaded.") }
        if endLiveStreamVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'endLiveStreamVC' could not be loaded from storyboard 'Live' as 'EndLiveStreamVC'.") }
        if liveStreamController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'liveStreamController' could not be loaded from storyboard 'Live' as 'LiveStreamController'.") }
        if liveStreamVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'liveStreamVC' could not be loaded from storyboard 'Live' as 'LiveStreamVC'.") }
      }
    }

    /// Storyboard `LoggedUser`.
    struct loggedUser: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LoggedUser"

      var aboutVC: RswiftResources.StoryboardViewControllerIdentifier<AboutVC> { .init(identifier: "AboutVC", storyboard: name, bundle: bundle) }
      var activityVC: RswiftResources.StoryboardViewControllerIdentifier<ActivitesController> { .init(identifier: "ActivityVC", storyboard: name, bundle: bundle) }
      var articleFilterVC: RswiftResources.StoryboardViewControllerIdentifier<ArticleFilterController> { .init(identifier: "ArticleFilterVC", storyboard: name, bundle: bundle) }
      var changeVideosVC: RswiftResources.StoryboardViewControllerIdentifier<ChangeVideosVC> { .init(identifier: "ChangeVideosVC", storyboard: name, bundle: bundle) }
      var channelFilterVC: RswiftResources.StoryboardViewControllerIdentifier<PopularChannelFilterController> { .init(identifier: "ChannelFilterVC", storyboard: name, bundle: bundle) }
      var channelPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<ChannelPlaylistVC> { .init(identifier: "ChannelPlaylistVC", storyboard: name, bundle: bundle) }
      var detailsArticlesVC: RswiftResources.StoryboardViewControllerIdentifier<DetailsArticlesVC> { .init(identifier: "DetailsArticlesVC", storyboard: name, bundle: bundle) }
      var homeVC: RswiftResources.StoryboardViewControllerIdentifier<HomeVC> { .init(identifier: "HomeVC", storyboard: name, bundle: bundle) }
      var libraryVC: RswiftResources.StoryboardViewControllerIdentifier<LibraryVC> { .init(identifier: "LibraryVC", storyboard: name, bundle: bundle) }
      var moviesFilterVC: RswiftResources.StoryboardViewControllerIdentifier<MoviesFilterVC> { .init(identifier: "MoviesFilterVC", storyboard: name, bundle: bundle) }
      var moviesNewVC: RswiftResources.StoryboardViewControllerIdentifier<MoviesNewVC> { .init(identifier: "MoviesNewVC", storyboard: name, bundle: bundle) }
      var moviesVC: RswiftResources.StoryboardViewControllerIdentifier<MoviesVC> { .init(identifier: "MoviesVC", storyboard: name, bundle: bundle) }
      var newArticleVC: RswiftResources.StoryboardViewControllerIdentifier<NewArticleVC> { .init(identifier: "NewArticleVC", storyboard: name, bundle: bundle) }
      var newProfileVC: RswiftResources.StoryboardViewControllerIdentifier<NewProfileVC> { .init(identifier: "NewProfileVC", storyboard: name, bundle: bundle) }
      var popularChannelVC: RswiftResources.StoryboardViewControllerIdentifier<PopularChannelController> { .init(identifier: "PopularChannelVC", storyboard: name, bundle: bundle) }
      var profileShortsVC: RswiftResources.StoryboardViewControllerIdentifier<ProfileShortsVC> { .init(identifier: "ProfileShortsVC", storyboard: name, bundle: bundle) }
      var searchFilterVC: RswiftResources.StoryboardViewControllerIdentifier<SearchFilterVC> { .init(identifier: "SearchFilterVC", storyboard: name, bundle: bundle) }
      var searchVC: RswiftResources.StoryboardViewControllerIdentifier<SearchVC> { .init(identifier: "SearchVC", storyboard: name, bundle: bundle) }
      var shortsVC: RswiftResources.StoryboardViewControllerIdentifier<ShortsVC> { .init(identifier: "ShortsVC", storyboard: name, bundle: bundle) }
      var sortByVC: RswiftResources.StoryboardViewControllerIdentifier<SortByController> { .init(identifier: "SortByVC", storyboard: name, bundle: bundle) }
      var tAndLVideosVC: RswiftResources.StoryboardViewControllerIdentifier<TAndLVideosVC> { .init(identifier: "TAndLVideosVC", storyboard: name, bundle: bundle) }
      var tabBarNav: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "tabBarNav", storyboard: name, bundle: bundle) }
      var tabbarController: RswiftResources.StoryboardViewControllerIdentifier<TabbarController> { .init(identifier: "TabbarController", storyboard: name, bundle: bundle) }
      var timeByVC: RswiftResources.StoryboardViewControllerIdentifier<TimeByController> { .init(identifier: "TimeByVC", storyboard: name, bundle: bundle) }
      var trendingVC: RswiftResources.StoryboardViewControllerIdentifier<TrendingVC> { .init(identifier: "TrendingVC", storyboard: name, bundle: bundle) }
      var webViewVC: RswiftResources.StoryboardViewControllerIdentifier<WebViewVC> { .init(identifier: "WebViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Fire", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Fire' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Fire_1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Fire_1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Hearts", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Hearts' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Notification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Notification' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_Arrow_Left", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Arrow_Left' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_Arrow_Left_Grey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Arrow_Left_Grey' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_Filter_Grey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Filter_Grey' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_Setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Setting' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_Show_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Show_white' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_close_Grey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_close_Grey' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_comment_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_comment_white' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_history_Black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_history_Black' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_thumbs_down_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_thumbs_down_white' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Outline_thumbs_up_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_thumbs_up_white' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Playtube_text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Playtube_text' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Profile-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Profile-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Vector", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Vector' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Video", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Video' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "abacus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'abacus' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "activity_default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'activity_default' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'add-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "articles", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'articles' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_white_1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_white_1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bell", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bell' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "block_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'block_user' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chat_white' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "comment _new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'comment _new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "copy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'copy' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "demo_shorts", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'demo_shorts' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dot_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dot_black' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dots", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dots' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down-arrow-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'down-arrow-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'email_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fi_chevron-right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_chevron-right' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fi_plus-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_plus-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fi_search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_search' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fi_search_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_search_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fi_search_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fi_search_white' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gender-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gender-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'home' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "instagram", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'instagram' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'like_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "more_vertical", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'more_vertical' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "movies_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'movies_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no-video", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no-video' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no_profile_image_circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no_profile_image_circle' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noactivity", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'noactivity' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noplaylist", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'noplaylist' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "opacity_view", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'opacity_view' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paid_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'paid_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "play_inside", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play_inside' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "popular", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'popular' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'share_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_new-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'share_new-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "short1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'short1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shorts", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'shorts' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sub_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sub_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twitter-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user_profile' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "watch_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'watch_new' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Fill_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Fill_Colors_Secondary' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Fill_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Fill_Colors_Tertiary' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Tertiary' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Separator_Colors_Non_opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Non_opaque' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "tabBar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'tabBar' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if UIKit.UIColor(named: "textColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'textColor' is used in storyboard 'LoggedUser', but couldn't be loaded.") }
        if aboutVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'aboutVC' could not be loaded from storyboard 'LoggedUser' as 'AboutVC'.") }
        if activityVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'activityVC' could not be loaded from storyboard 'LoggedUser' as 'ActivitesController'.") }
        if articleFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'articleFilterVC' could not be loaded from storyboard 'LoggedUser' as 'ArticleFilterController'.") }
        if changeVideosVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'changeVideosVC' could not be loaded from storyboard 'LoggedUser' as 'ChangeVideosVC'.") }
        if channelFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelFilterVC' could not be loaded from storyboard 'LoggedUser' as 'PopularChannelFilterController'.") }
        if channelPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'channelPlaylistVC' could not be loaded from storyboard 'LoggedUser' as 'ChannelPlaylistVC'.") }
        if detailsArticlesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'detailsArticlesVC' could not be loaded from storyboard 'LoggedUser' as 'DetailsArticlesVC'.") }
        if homeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'LoggedUser' as 'HomeVC'.") }
        if libraryVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'libraryVC' could not be loaded from storyboard 'LoggedUser' as 'LibraryVC'.") }
        if moviesFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'moviesFilterVC' could not be loaded from storyboard 'LoggedUser' as 'MoviesFilterVC'.") }
        if moviesNewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'moviesNewVC' could not be loaded from storyboard 'LoggedUser' as 'MoviesNewVC'.") }
        if moviesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'moviesVC' could not be loaded from storyboard 'LoggedUser' as 'MoviesVC'.") }
        if newArticleVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'newArticleVC' could not be loaded from storyboard 'LoggedUser' as 'NewArticleVC'.") }
        if newProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'newProfileVC' could not be loaded from storyboard 'LoggedUser' as 'NewProfileVC'.") }
        if popularChannelVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'popularChannelVC' could not be loaded from storyboard 'LoggedUser' as 'PopularChannelController'.") }
        if profileShortsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileShortsVC' could not be loaded from storyboard 'LoggedUser' as 'ProfileShortsVC'.") }
        if searchFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchFilterVC' could not be loaded from storyboard 'LoggedUser' as 'SearchFilterVC'.") }
        if searchVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'LoggedUser' as 'SearchVC'.") }
        if shortsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'shortsVC' could not be loaded from storyboard 'LoggedUser' as 'ShortsVC'.") }
        if sortByVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sortByVC' could not be loaded from storyboard 'LoggedUser' as 'SortByController'.") }
        if tAndLVideosVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tAndLVideosVC' could not be loaded from storyboard 'LoggedUser' as 'TAndLVideosVC'.") }
        if tabbarController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tabbarController' could not be loaded from storyboard 'LoggedUser' as 'TabbarController'.") }
        if timeByVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'timeByVC' could not be loaded from storyboard 'LoggedUser' as 'TimeByController'.") }
        if trendingVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'trendingVC' could not be loaded from storyboard 'LoggedUser' as 'TrendingVC'.") }
        if webViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'webViewVC' could not be loaded from storyboard 'LoggedUser' as 'WebViewVC'.") }
        if tabBarNav() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tabBarNav' could not be loaded from storyboard 'LoggedUser' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Notification`.
    struct notification: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Notification"

      var notificationVC: RswiftResources.StoryboardViewControllerIdentifier<NotificationVC> { .init(identifier: "NotificationVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_new' is used in storyboard 'Notification', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notification_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notification_new' is used in storyboard 'Notification', but couldn't be loaded.") }
        if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in storyboard 'Notification', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Notification', but couldn't be loaded.") }
        if notificationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Notification' as 'NotificationVC'.") }
      }
    }

    /// Storyboard `Player`.
    struct player: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Player"

      var playerCommentVC: RswiftResources.StoryboardViewControllerIdentifier<PlayerCommentVC> { .init(identifier: "PlayerCommentVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "send_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send_new' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in storyboard 'Player', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Player', but couldn't be loaded.") }
        if playerCommentVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'playerCommentVC' could not be loaded from storyboard 'Player' as 'PlayerCommentVC'.") }
      }
    }

    /// Storyboard `Playlist`.
    struct playlist: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Playlist"

      var createNewPlaylistVC: RswiftResources.StoryboardViewControllerIdentifier<CreateNewPlaylistVC> { .init(identifier: "CreateNewPlaylistVC", storyboard: name, bundle: bundle) }
      var getPlaylistVideosVC: RswiftResources.StoryboardViewControllerIdentifier<GetPlaylistVideosVC> { .init(identifier: "GetPlaylistVideosVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_new' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'camera' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tab_more' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_button_off", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'radio_button_off' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_button_on", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'radio_button_on' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Playlist', but couldn't be loaded.") }
        if createNewPlaylistVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createNewPlaylistVC' could not be loaded from storyboard 'Playlist' as 'CreateNewPlaylistVC'.") }
        if getPlaylistVideosVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'getPlaylistVideosVC' could not be loaded from storyboard 'Playlist' as 'GetPlaylistVideosVC'.") }
      }
    }

    /// Storyboard `Popups`.
    struct popups: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Popups"

      var addToPopupVC: RswiftResources.StoryboardViewControllerIdentifier<AddToPopupVC> { .init(identifier: "AddToPopupVC", storyboard: name, bundle: bundle) }
      var cashfreePopupVC: RswiftResources.StoryboardViewControllerIdentifier<CashfreePopupVC> { .init(identifier: "CashfreePopupVC", storyboard: name, bundle: bundle) }
      var categoryPopupVC: RswiftResources.StoryboardViewControllerIdentifier<CategoryPopupVC> { .init(identifier: "CategoryPopupVC", storyboard: name, bundle: bundle) }
      var clearCachesPopupVC: RswiftResources.StoryboardViewControllerIdentifier<ClearCachesPopupVC> { .init(identifier: "ClearCachesPopupVC", storyboard: name, bundle: bundle) }
      var countryPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<CountryPopUpVC> { .init(identifier: "CountryPopUpVC", storyboard: name, bundle: bundle) }
      var createPopupVC: RswiftResources.StoryboardViewControllerIdentifier<CreatePopupVC> { .init(identifier: "CreatePopupVC", storyboard: name, bundle: bundle) }
      var deleteAccountPopupVC: RswiftResources.StoryboardViewControllerIdentifier<DeleteAccountPopupVC> { .init(identifier: "DeleteAccountPopupVC", storyboard: name, bundle: bundle) }
      var emailVerificationVC: RswiftResources.StoryboardViewControllerIdentifier<EmailVerificationVC> { .init(identifier: "EmailVerificationVC", storyboard: name, bundle: bundle) }
      var endStreamPopup: RswiftResources.StoryboardViewControllerIdentifier<endStreamPopup> { .init(identifier: "endStreamPopup", storyboard: name, bundle: bundle) }
      var loginPopupVC: RswiftResources.StoryboardViewControllerIdentifier<LoginPopupVC> { .init(identifier: "LoginPopupVC", storyboard: name, bundle: bundle) }
      var logoutPopupVC: RswiftResources.StoryboardViewControllerIdentifier<LogoutPopupVC> { .init(identifier: "LogoutPopupVC", storyboard: name, bundle: bundle) }
      var payStackEmailPopupVC: RswiftResources.StoryboardViewControllerIdentifier<PayStackEmailPopupVC> { .init(identifier: "PayStackEmailPopupVC", storyboard: name, bundle: bundle) }
      var paymentOptionPopupVC: RswiftResources.StoryboardViewControllerIdentifier<PaymentOptionPopupVC> { .init(identifier: "PaymentOptionPopupVC", storyboard: name, bundle: bundle) }
      var playlistsPopupVC: RswiftResources.StoryboardViewControllerIdentifier<PlaylistsPopupVC> { .init(identifier: "PlaylistsPopupVC", storyboard: name, bundle: bundle) }
      var reportVideoPopupVC: RswiftResources.StoryboardViewControllerIdentifier<ReportVideoPopupVC> { .init(identifier: "ReportVideoPopupVC", storyboard: name, bundle: bundle) }
      var securityPopupVC: RswiftResources.StoryboardViewControllerIdentifier<SecurityPopupVC> { .init(identifier: "SecurityPopupVC", storyboard: name, bundle: bundle) }
      var themeOptionPopupVC: RswiftResources.StoryboardViewControllerIdentifier<ThemeOptionPopupVC> { .init(identifier: "ThemeOptionPopupVC", storyboard: name, bundle: bundle) }
      var unblockUserPopupVC: RswiftResources.StoryboardViewControllerIdentifier<UnblockUserPopupVC> { .init(identifier: "UnblockUserPopupVC", storyboard: name, bundle: bundle) }
      var videoOptionPopupVC: RswiftResources.StoryboardViewControllerIdentifier<VideoOptionPopupVC> { .init(identifier: "VideoOptionPopupVC", storyboard: name, bundle: bundle) }
      var warningPopupVC: RswiftResources.StoryboardViewControllerIdentifier<WarningPopupVC> { .init(identifier: "WarningPopupVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paper-plane", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'paper-plane' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smartphone", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'smartphone' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-2' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Fill_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Fill_Colors_Secondary' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "System_Backgrounds_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'System_Backgrounds_Primary' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "bgcolor1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor1' is used in storyboard 'Popups', but couldn't be loaded.") }
        if UIKit.UIColor(named: "mainColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'mainColor' is used in storyboard 'Popups', but couldn't be loaded.") }
        if addToPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addToPopupVC' could not be loaded from storyboard 'Popups' as 'AddToPopupVC'.") }
        if cashfreePopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'cashfreePopupVC' could not be loaded from storyboard 'Popups' as 'CashfreePopupVC'.") }
        if categoryPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'categoryPopupVC' could not be loaded from storyboard 'Popups' as 'CategoryPopupVC'.") }
        if clearCachesPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'clearCachesPopupVC' could not be loaded from storyboard 'Popups' as 'ClearCachesPopupVC'.") }
        if countryPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'countryPopUpVC' could not be loaded from storyboard 'Popups' as 'CountryPopUpVC'.") }
        if createPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createPopupVC' could not be loaded from storyboard 'Popups' as 'CreatePopupVC'.") }
        if deleteAccountPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'deleteAccountPopupVC' could not be loaded from storyboard 'Popups' as 'DeleteAccountPopupVC'.") }
        if emailVerificationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'emailVerificationVC' could not be loaded from storyboard 'Popups' as 'EmailVerificationVC'.") }
        if loginPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginPopupVC' could not be loaded from storyboard 'Popups' as 'LoginPopupVC'.") }
        if logoutPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'logoutPopupVC' could not be loaded from storyboard 'Popups' as 'LogoutPopupVC'.") }
        if payStackEmailPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'payStackEmailPopupVC' could not be loaded from storyboard 'Popups' as 'PayStackEmailPopupVC'.") }
        if paymentOptionPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'paymentOptionPopupVC' could not be loaded from storyboard 'Popups' as 'PaymentOptionPopupVC'.") }
        if playlistsPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'playlistsPopupVC' could not be loaded from storyboard 'Popups' as 'PlaylistsPopupVC'.") }
        if reportVideoPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'reportVideoPopupVC' could not be loaded from storyboard 'Popups' as 'ReportVideoPopupVC'.") }
        if securityPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'securityPopupVC' could not be loaded from storyboard 'Popups' as 'SecurityPopupVC'.") }
        if themeOptionPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'themeOptionPopupVC' could not be loaded from storyboard 'Popups' as 'ThemeOptionPopupVC'.") }
        if unblockUserPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'unblockUserPopupVC' could not be loaded from storyboard 'Popups' as 'UnblockUserPopupVC'.") }
        if videoOptionPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'videoOptionPopupVC' could not be loaded from storyboard 'Popups' as 'VideoOptionPopupVC'.") }
        if warningPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'warningPopupVC' could not be loaded from storyboard 'Popups' as 'WarningPopupVC'.") }
        if endStreamPopup() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'endStreamPopup' could not be loaded from storyboard 'Popups' as 'endStreamPopup'.") }
      }
    }

    /// Storyboard `Settings`.
    struct settings: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Settings"

      var bankTransferVC: RswiftResources.StoryboardViewControllerIdentifier<BankTransferVC> { .init(identifier: "BankTransferVC", storyboard: name, bundle: bundle) }
      var blockedUsersVC: RswiftResources.StoryboardViewControllerIdentifier<BlockedUsersVC> { .init(identifier: "BlockedUsersVC", storyboard: name, bundle: bundle) }
      var changePasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ChangePasswordVC> { .init(identifier: "ChangePasswordVC", storyboard: name, bundle: bundle) }
      var deleteAccountVC: RswiftResources.StoryboardViewControllerIdentifier<DeleteAccountVC> { .init(identifier: "DeleteAccountVC", storyboard: name, bundle: bundle) }
      var editChannelVC: RswiftResources.StoryboardViewControllerIdentifier<EditChannelVC> { .init(identifier: "EditChannelVC", storyboard: name, bundle: bundle) }
      var favouriteCateVC: RswiftResources.StoryboardViewControllerIdentifier<FavouriteCategoryController> { .init(identifier: "FavouriteCateVC", storyboard: name, bundle: bundle) }
      var linkTvVC: RswiftResources.StoryboardViewControllerIdentifier<LinkTvVC> { .init(identifier: "LinkTvVC", storyboard: name, bundle: bundle) }
      var manageSessionVC: RswiftResources.StoryboardViewControllerIdentifier<ManageSessionController> { .init(identifier: "ManageSessionVC", storyboard: name, bundle: bundle) }
      var paymentCardVC: RswiftResources.StoryboardViewControllerIdentifier<PaymentCardVC> { .init(identifier: "PaymentCardVC", storyboard: name, bundle: bundle) }
      var phoneContactsVC: RswiftResources.StoryboardViewControllerIdentifier<PhoneContactsVC> { .init(identifier: "PhoneContactsVC", storyboard: name, bundle: bundle) }
      var pointsVC: RswiftResources.StoryboardViewControllerIdentifier<PointsVC> { .init(identifier: "PointsVC", storyboard: name, bundle: bundle) }
      var settingVC: RswiftResources.StoryboardViewControllerIdentifier<SettingVC> { .init(identifier: "SettingVC", storyboard: name, bundle: bundle) }
      var settingsWebViewVC: RswiftResources.StoryboardViewControllerIdentifier<SettingsWebViewVC> { .init(identifier: "SettingsWebViewVC", storyboard: name, bundle: bundle) }
      var twoFactorController: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorController> { .init(identifier: "TwoFactorController", storyboard: name, bundle: bundle) }
      var verificationVC: RswiftResources.StoryboardViewControllerIdentifier<VerificationVC> { .init(identifier: "VerificationVC", storyboard: name, bundle: bundle) }
      var verifiedVC: RswiftResources.StoryboardViewControllerIdentifier<VerifiedVC> { .init(identifier: "VerifiedVC", storyboard: name, bundle: bundle) }
      var walletVC: RswiftResources.StoryboardViewControllerIdentifier<WalletVC> { .init(identifier: "WalletVC", storyboard: name, bundle: bundle) }
      var walletWebViewVC: RswiftResources.StoryboardViewControllerIdentifier<WalletWebViewVC> { .init(identifier: "WalletWebViewVC", storyboard: name, bundle: bundle) }
      var withdrawalsVC: RswiftResources.StoryboardViewControllerIdentifier<WithdrawalsVC> { .init(identifier: "WithdrawalsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Outline_Arrow_Left_Black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Outline_Arrow_Left_Black' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_white_1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_white_1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blank.debit.card", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blank.debit.card' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "block_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'block_new' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blue_comment", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blue_comment' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blue_dislike", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blue_dislike' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blue_eye", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blue_eye' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blue_like", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blue_like' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blue_plus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blue_plus' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'camera_blue' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'camera_new' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "category_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'category_new' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "channel_cover", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'channel_cover' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dislike_card_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_card_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down-arrow-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'down-arrow-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'email_new' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "flag") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'flag' is used in storyboard 'Settings', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "gender-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gender-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_copper_card", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_copper_card' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "maxresdefault", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'maxresdefault' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_def", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_def' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profile_new' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twitter-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "un_Tick_Square", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'un_Tick_Square' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user_profile' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verified' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "world_map", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'world_map' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Fill_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Fill_Colors_Tertiary' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Primary' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Secondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Secondary' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Label_Colors_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Label_Colors_Tertiary' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Primary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Primary' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Primary_UI_Tertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Primary_UI_Tertiary' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Separator_Colors_Non_opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Non_opaque' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Separator_Colors_Opaque", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Separator_Colors_Opaque' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "bgcolor2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'bgcolor2' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "buttonColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'buttonColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "textColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'textColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if bankTransferVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'bankTransferVC' could not be loaded from storyboard 'Settings' as 'BankTransferVC'.") }
        if blockedUsersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blockedUsersVC' could not be loaded from storyboard 'Settings' as 'BlockedUsersVC'.") }
        if changePasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Settings' as 'ChangePasswordVC'.") }
        if deleteAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'Settings' as 'DeleteAccountVC'.") }
        if editChannelVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editChannelVC' could not be loaded from storyboard 'Settings' as 'EditChannelVC'.") }
        if favouriteCateVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'favouriteCateVC' could not be loaded from storyboard 'Settings' as 'FavouriteCategoryController'.") }
        if linkTvVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'linkTvVC' could not be loaded from storyboard 'Settings' as 'LinkTvVC'.") }
        if manageSessionVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'manageSessionVC' could not be loaded from storyboard 'Settings' as 'ManageSessionController'.") }
        if paymentCardVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'paymentCardVC' could not be loaded from storyboard 'Settings' as 'PaymentCardVC'.") }
        if phoneContactsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'phoneContactsVC' could not be loaded from storyboard 'Settings' as 'PhoneContactsVC'.") }
        if pointsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'pointsVC' could not be loaded from storyboard 'Settings' as 'PointsVC'.") }
        if settingVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Settings' as 'SettingVC'.") }
        if settingsWebViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsWebViewVC' could not be loaded from storyboard 'Settings' as 'SettingsWebViewVC'.") }
        if twoFactorController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorController' could not be loaded from storyboard 'Settings' as 'TwoFactorController'.") }
        if verificationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'verificationVC' could not be loaded from storyboard 'Settings' as 'VerificationVC'.") }
        if verifiedVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'verifiedVC' could not be loaded from storyboard 'Settings' as 'VerifiedVC'.") }
        if walletVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'walletVC' could not be loaded from storyboard 'Settings' as 'WalletVC'.") }
        if walletWebViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'walletWebViewVC' could not be loaded from storyboard 'Settings' as 'WalletWebViewVC'.") }
        if withdrawalsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'withdrawalsVC' could not be loaded from storyboard 'Settings' as 'WithdrawalsVC'.") }
      }
    }

    /// Storyboard `Upgrade`.
    struct upgrade: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Upgrade"

      var upgradeVC: RswiftResources.StoryboardViewControllerIdentifier<UpgradeVC> { .init(identifier: "UpgradeVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_new' is used in storyboard 'Upgrade', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_new", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star_new' is used in storyboard 'Upgrade', but couldn't be loaded.") }
        if upgradeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'upgradeVC' could not be loaded from storyboard 'Upgrade' as 'UpgradeVC'.") }
      }
    }
  }
}